
Moros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005608  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a9c  2400007c  08005a5c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004b18  08005a5c  00024b18  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002091b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003cc5  00000000  00000000  000409c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001528  00000000  00000000  00044690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000013a0  00000000  00000000  00045bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035ea7  00000000  00000000  00046f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019123  00000000  00000000  0007cdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015307a  00000000  00000000  00095f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e8f9c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005d90  00000000  00000000  001e8fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080058c0 	.word	0x080058c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	080058c0 	.word	0x080058c0

08000310 <_Z9MorosInitPv>:
MorosLIDARTrigger* test_service;

void on_trigger(void);

void MorosInit(void*)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	test_service = new MorosLIDARTrigger(on_trigger);
 8000318:	2014      	movs	r0, #20
 800031a:	f005 f8a7 	bl	800546c <_Znwj>
 800031e:	4603      	mov	r3, r0
 8000320:	461c      	mov	r4, r3
 8000322:	490c      	ldr	r1, [pc, #48]	; (8000354 <_Z9MorosInitPv+0x44>)
 8000324:	4620      	mov	r0, r4
 8000326:	f000 f821 	bl	800036c <_ZN17MorosLIDARTriggerC1EPFvvE>
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <_Z9MorosInitPv+0x48>)
 800032c:	601c      	str	r4, [r3, #0]
	test_service->start();
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <_Z9MorosInitPv+0x48>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f868 	bl	8000408 <_ZN19MorosTriggerService5startEv>
	osDelay(10000);
 8000338:	f242 7010 	movw	r0, #10000	; 0x2710
 800033c:	f002 fb21 	bl	8002982 <osDelay>
	test_service->stop();
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <_Z9MorosInitPv+0x48>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f877 	bl	8000438 <_ZN19MorosTriggerService4stopEv>
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bd90      	pop	{r4, r7, pc}
 8000352:	bf00      	nop
 8000354:	0800035d 	.word	0x0800035d
 8000358:	24000098 	.word	0x24000098

0800035c <_Z10on_triggerv>:

void on_trigger(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <_ZN17MorosLIDARTriggerC1EPFvvE>:
  .name = "mts_lidar",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosLIDARTrigger::MorosLIDARTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6839      	ldr	r1, [r7, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f82c 	bl	80003d8 <_ZN19MorosTriggerServiceC1EPFvvE>
 8000380:	4a05      	ldr	r2, [pc, #20]	; (8000398 <_ZN17MorosLIDARTriggerC1EPFvvE+0x2c>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <_ZN17MorosLIDARTriggerC1EPFvvE+0x30>)
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	08005934 	.word	0x08005934
 800039c:	08005908 	.word	0x08005908

080003a0 <_ZN17MorosLIDARTrigger5_taskEv>:

void MorosLIDARTrigger::_task(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2101      	movs	r1, #1
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <_ZN17MorosLIDARTrigger5_taskEv+0x34>)
 80003ae:	f000 feed 	bl	800118c <HAL_GPIO_WritePin>
	osDelay(500);
 80003b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b6:	f002 fae4 	bl	8002982 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2101      	movs	r1, #1
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <_ZN17MorosLIDARTrigger5_taskEv+0x34>)
 80003c0:	f000 fee4 	bl	800118c <HAL_GPIO_WritePin>
	osDelay(500);
 80003c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c8:	f002 fadb 	bl	8002982 <osDelay>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	58020400 	.word	0x58020400

080003d8 <_ZN19MorosTriggerServiceC1EPFvvE>:
 *      Author: ben
 */

#include "MorosTriggerService.hpp"

MorosTriggerService::MorosTriggerService(void(*_on_trigger)(void))
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <_ZN19MorosTriggerServiceC1EPFvvE+0x2c>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	741a      	strb	r2, [r3, #16]
{
	this->_on_trigger = _on_trigger;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	605a      	str	r2, [r3, #4]
}
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	08005940 	.word	0x08005940

08000408 <_ZN19MorosTriggerService5startEv>:

void MorosTriggerService::start(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	this->_exit = false;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	741a      	strb	r2, [r3, #16]
	this->_thread_handle = osThreadNew(this->_run, this, this->_thread_attr);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	461a      	mov	r2, r3
 800041c:	6879      	ldr	r1, [r7, #4]
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <_ZN19MorosTriggerService5startEv+0x2c>)
 8000420:	f002 f9f0 	bl	8002804 <osThreadNew>
 8000424:	4602      	mov	r2, r0
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	609a      	str	r2, [r3, #8]
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	08000453 	.word	0x08000453

08000438 <_ZN19MorosTriggerService4stopEv>:

void MorosTriggerService::stop(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	this->_exit = true;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2201      	movs	r2, #1
 8000444:	741a      	strb	r2, [r3, #16]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <_ZN19MorosTriggerService4_runEPv>:

void MorosTriggerService::_run(void* obj)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b084      	sub	sp, #16
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	MorosTriggerService* svc = (MorosTriggerService*) obj;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	60fb      	str	r3, [r7, #12]
	while(!svc->_exit) { svc->_task(); osDelay(1); }
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	7c1b      	ldrb	r3, [r3, #16]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d108      	bne.n	8000478 <_ZN19MorosTriggerService4_runEPv+0x26>
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	4798      	blx	r3
 8000470:	2001      	movs	r0, #1
 8000472:	f002 fa86 	bl	8002982 <osDelay>
 8000476:	e7f2      	b.n	800045e <_ZN19MorosTriggerService4_runEPv+0xc>
	osThreadTerminate(svc->_thread_handle);
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fa53 	bl	8002928 <osThreadTerminate>
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fb98 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f816 	bl	80004c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f894 	bl	80005c4 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800049c:	f002 f968 	bl	8002770 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <main+0x2c>)
 80004a2:	2100      	movs	r1, #0
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <main+0x30>)
 80004a6:	f002 f9ad 	bl	8002804 <osThreadNew>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <main+0x34>)
 80004ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004b0:	f002 f982 	bl	80027b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <main+0x28>
 80004b6:	bf00      	nop
 80004b8:	08005944 	.word	0x08005944
 80004bc:	08000849 	.word	0x08000849
 80004c0:	2400009c 	.word	0x2400009c

080004c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b09c      	sub	sp, #112	; 0x70
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ce:	224c      	movs	r2, #76	; 0x4c
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f005 f842 	bl	800555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2220      	movs	r2, #32
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f005 f83c 	bl	800555c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004e4:	2002      	movs	r0, #2
 80004e6:	f000 fe6b 	bl	80011c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	4b34      	ldr	r3, [pc, #208]	; (80005c0 <_Z18SystemClock_Configv+0xfc>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f6:	4a32      	ldr	r2, [pc, #200]	; (80005c0 <_Z18SystemClock_Configv+0xfc>)
 80004f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <_Z18SystemClock_Configv+0xfc>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050a:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <_Z18SystemClock_Configv+0xfc>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d000      	beq.n	8000524 <_Z18SystemClock_Configv+0x60>
 8000522:	e7f2      	b.n	800050a <_Z18SystemClock_Configv+0x46>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000528:	2301      	movs	r3, #1
 800052a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052c:	2340      	movs	r3, #64	; 0x40
 800052e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	2302      	movs	r3, #2
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000534:	2300      	movs	r3, #0
 8000536:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000538:	2304      	movs	r3, #4
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800053c:	230c      	movs	r3, #12
 800053e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000544:	2304      	movs	r3, #4
 8000546:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000548:	2302      	movs	r3, #2
 800054a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800054c:	230c      	movs	r3, #12
 800054e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000550:	2300      	movs	r3, #0
 8000552:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fe69 	bl	8001234 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	bf14      	ite	ne
 8000568:	2301      	movne	r3, #1
 800056a:	2300      	moveq	r3, #0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000572:	f000 f987 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	233f      	movs	r3, #63	; 0x3f
 8000578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2303      	movs	r3, #3
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000582:	2308      	movs	r3, #8
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f9f7 	bl	8001990 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf14      	ite	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	2300      	moveq	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80005b2:	f000 f967 	bl	8000884 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3770      	adds	r7, #112	; 0x70
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024800 	.word	0x58024800

080005c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b94      	ldr	r3, [pc, #592]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e0:	4a92      	ldr	r2, [pc, #584]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ea:	4b90      	ldr	r3, [pc, #576]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f8:	4b8c      	ldr	r3, [pc, #560]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 80005fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fe:	4a8b      	ldr	r2, [pc, #556]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000608:	4b88      	ldr	r3, [pc, #544]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b85      	ldr	r3, [pc, #532]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061c:	4a83      	ldr	r2, [pc, #524]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000626:	4b81      	ldr	r3, [pc, #516]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	4b7d      	ldr	r3, [pc, #500]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063a:	4a7c      	ldr	r2, [pc, #496]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000644:	4b79      	ldr	r3, [pc, #484]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b76      	ldr	r3, [pc, #472]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	4a74      	ldr	r2, [pc, #464]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000662:	4b72      	ldr	r3, [pc, #456]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000670:	4b6e      	ldr	r3, [pc, #440]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	4a6d      	ldr	r2, [pc, #436]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800067c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000680:	4b6a      	ldr	r3, [pc, #424]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a65      	ldr	r2, [pc, #404]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b63      	ldr	r3, [pc, #396]	; (800082c <_ZL12MX_GPIO_Initv+0x268>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0310 	and.w	r3, r3, #16
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f244 0101 	movw	r1, #16385	; 0x4001
 80006b2:	485f      	ldr	r0, [pc, #380]	; (8000830 <_ZL12MX_GPIO_Initv+0x26c>)
 80006b4:	f000 fd6a 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006be:	485d      	ldr	r0, [pc, #372]	; (8000834 <_ZL12MX_GPIO_Initv+0x270>)
 80006c0:	f000 fd64 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	485b      	ldr	r0, [pc, #364]	; (8000838 <_ZL12MX_GPIO_Initv+0x274>)
 80006ca:	f000 fd5f 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4856      	ldr	r0, [pc, #344]	; (800083c <_ZL12MX_GPIO_Initv+0x278>)
 80006e4:	f000 fbaa 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006e8:	2332      	movs	r3, #50	; 0x32
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f8:	230b      	movs	r3, #11
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	484e      	ldr	r0, [pc, #312]	; (800083c <_ZL12MX_GPIO_Initv+0x278>)
 8000704:	f000 fb9a 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000708:	2386      	movs	r3, #134	; 0x86
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4847      	ldr	r0, [pc, #284]	; (8000840 <_ZL12MX_GPIO_Initv+0x27c>)
 8000724:	f000 fb8a 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000728:	f244 0301 	movw	r3, #16385	; 0x4001
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	483b      	ldr	r0, [pc, #236]	; (8000830 <_ZL12MX_GPIO_Initv+0x26c>)
 8000742:	f000 fb7b 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000758:	230b      	movs	r3, #11
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	4833      	ldr	r0, [pc, #204]	; (8000830 <_ZL12MX_GPIO_Initv+0x26c>)
 8000764:	f000 fb6a 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800077a:	2307      	movs	r3, #7
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	482b      	ldr	r0, [pc, #172]	; (8000834 <_ZL12MX_GPIO_Initv+0x270>)
 8000786:	f000 fb59 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4824      	ldr	r0, [pc, #144]	; (8000834 <_ZL12MX_GPIO_Initv+0x270>)
 80007a4:	f000 fb4a 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4821      	ldr	r0, [pc, #132]	; (8000844 <_ZL12MX_GPIO_Initv+0x280>)
 80007be:	f000 fb3d 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007d4:	230a      	movs	r3, #10
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <_ZL12MX_GPIO_Initv+0x27c>)
 80007e0:	f000 fb2c 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f6:	230b      	movs	r3, #11
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <_ZL12MX_GPIO_Initv+0x280>)
 8000802:	f000 fb1b 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000806:	2302      	movs	r3, #2
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <_ZL12MX_GPIO_Initv+0x274>)
 800081e:	f000 fb0d 	bl	8000e3c <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	58024400 	.word	0x58024400
 8000830:	58020400 	.word	0x58020400
 8000834:	58020c00 	.word	0x58020c00
 8000838:	58021000 	.word	0x58021000
 800083c:	58020800 	.word	0x58020800
 8000840:	58020000 	.word	0x58020000
 8000844:	58021800 	.word	0x58021800

08000848 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  MorosInit(NULL);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd5d 	bl	8000310 <_Z9MorosInitPv>
  for(;;)
  {
    osDelay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f002 f893 	bl	8002982 <osDelay>
 800085c:	e7fb      	b.n	8000856 <_Z16StartDefaultTaskPv+0xe>
	...

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 f9e3 	bl	8000c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010000 	.word	0x40010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x38>)
 8000898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_MspInit+0x38>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x38>)
 80008a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	210f      	movs	r1, #15
 80008b8:	f06f 0001 	mvn.w	r0, #1
 80008bc:	f000 fa96 	bl	8000dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400

080008cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d844      	bhi.n	8000964 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80008da:	2200      	movs	r2, #0
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	2019      	movs	r0, #25
 80008e0:	f000 fa84 	bl	8000dec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008e4:	2019      	movs	r0, #25
 80008e6:	f000 fa9b 	bl	8000e20 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <HAL_InitTick+0xb0>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <HAL_InitTick+0xb4>)
 80008f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <HAL_InitTick+0xb4>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_InitTick+0xb4>)
 8000902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fbaf 	bl	800207c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800091e:	f001 fb97 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 8000922:	4603      	mov	r3, r0
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <HAL_InitTick+0xb8>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	0c9b      	lsrs	r3, r3, #18
 8000932:	3b01      	subs	r3, #1
 8000934:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_InitTick+0xbc>)
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <HAL_InitTick+0xc0>)
 800093a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0xbc>)
 800093e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000944:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_InitTick+0xbc>)
 8000946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000948:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_InitTick+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_InitTick+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <HAL_InitTick+0xbc>)
 8000958:	f001 fbd2 	bl	8002100 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d107      	bne.n	8000972 <HAL_InitTick+0xa6>
 8000962:	e001      	b.n	8000968 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	e005      	b.n	8000974 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_InitTick+0xbc>)
 800096a:	f001 fc2b 	bl	80021c4 <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24000008 	.word	0x24000008
 8000980:	58024400 	.word	0x58024400
 8000984:	431bde83 	.word	0x431bde83
 8000988:	240000a0 	.word	0x240000a0
 800098c:	40010000 	.word	0x40010000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM1_UP_IRQHandler+0x10>)
 80009c2:	f001 fc85 	bl	80022d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	240000a0 	.word	0x240000a0

080009d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	return 1;
 80009d4:	2301      	movs	r3, #1
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_kill>:

int _kill(int pid, int sig)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009ea:	f004 fd75 	bl	80054d8 <__errno>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2216      	movs	r2, #22
 80009f2:	601a      	str	r2, [r3, #0]
	return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_exit>:

void _exit (int status)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ffe7 	bl	80009e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a12:	e7fe      	b.n	8000a12 <_exit+0x12>

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f004 fd48 	bl	80054d8 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	24050000 	.word	0x24050000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	240000ec 	.word	0x240000ec
 8000a7c:	24004b18 	.word	0x24004b18

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <SystemInit+0xd0>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <SystemInit+0xd0>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <SystemInit+0xd4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d807      	bhi.n	8000ab0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <SystemInit+0xd4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 030f 	bic.w	r3, r3, #15
 8000aa8:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <SystemInit+0xd4>)
 8000aaa:	f043 0307 	orr.w	r3, r3, #7
 8000aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <SystemInit+0xd8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <SystemInit+0xd8>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemInit+0xd8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemInit+0xd8>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4924      	ldr	r1, [pc, #144]	; (8000b58 <SystemInit+0xd8>)
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <SystemInit+0xdc>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <SystemInit+0xd4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d007      	beq.n	8000aea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <SystemInit+0xd4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f023 030f 	bic.w	r3, r3, #15
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <SystemInit+0xd4>)
 8000ae4:	f043 0307 	orr.w	r3, r3, #7
 8000ae8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <SystemInit+0xd8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <SystemInit+0xd8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <SystemInit+0xd8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <SystemInit+0xd8>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <SystemInit+0xe0>)
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <SystemInit+0xd8>)
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <SystemInit+0xe4>)
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <SystemInit+0xd8>)
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <SystemInit+0xe8>)
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <SystemInit+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <SystemInit+0xd8>)
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <SystemInit+0xe8>)
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <SystemInit+0xd8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <SystemInit+0xd8>)
 8000b22:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <SystemInit+0xe8>)
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <SystemInit+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <SystemInit+0xd8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <SystemInit+0xd8>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <SystemInit+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <SystemInit+0xec>)
 8000b40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	52002000 	.word	0x52002000
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b60:	02020200 	.word	0x02020200
 8000b64:	01ff0000 	.word	0x01ff0000
 8000b68:	01010280 	.word	0x01010280
 8000b6c:	52004000 	.word	0x52004000

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b74:	f7ff ff84 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f004 fca1 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fc73 	bl	800048c <main>
  bx  lr
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000bac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bb0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8000bb4:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8000bb8:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8000bbc:	24004b18 	.word	0x24004b18

08000bc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC3_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f903 	bl	8000dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bd0:	f001 f894 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_Init+0x68>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	4913      	ldr	r1, [pc, #76]	; (8000c30 <HAL_Init+0x6c>)
 8000be2:	5ccb      	ldrb	r3, [r1, r3]
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_Init+0x68>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_Init+0x6c>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_Init+0x70>)
 8000c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_Init+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff fe5c 	bl	80008cc <HAL_InitTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e002      	b.n	8000c24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1e:	f7ff fe37 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	08005968 	.word	0x08005968
 8000c34:	24000004 	.word	0x24000004
 8000c38:	24000000 	.word	0x24000000

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2400000c 	.word	0x2400000c
 8000c60:	240000f0 	.word	0x240000f0

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	240000f0 	.word	0x240000f0

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <__NVIC_SetPriorityGrouping+0x40>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x40>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	05fa0000 	.word	0x05fa0000

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff4c 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff63 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb3 	bl	8000d70 <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff82 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff56 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e4a:	4b86      	ldr	r3, [pc, #536]	; (8001064 <HAL_GPIO_Init+0x228>)
 8000e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e4e:	e18c      	b.n	800116a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	2101      	movs	r1, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 817e 	beq.w	8001164 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d005      	beq.n	8000e80 <HAL_GPIO_Init+0x44>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d130      	bne.n	8000ee2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	f003 0201 	and.w	r2, r3, #1
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d017      	beq.n	8000f1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d123      	bne.n	8000f72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	691a      	ldr	r2, [r3, #16]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	69b9      	ldr	r1, [r7, #24]
 8000f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0203 	and.w	r2, r3, #3
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80d8 	beq.w	8001164 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <HAL_GPIO_Init+0x22c>)
 8000fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fba:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <HAL_GPIO_Init+0x22c>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <HAL_GPIO_Init+0x22c>)
 8000fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_GPIO_Init+0x230>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_GPIO_Init+0x234>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d04a      	beq.n	8001094 <HAL_GPIO_Init+0x258>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_GPIO_Init+0x238>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d02b      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_GPIO_Init+0x23c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d025      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_GPIO_Init+0x240>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01f      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_GPIO_Init+0x244>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_GPIO_Init+0x248>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x24c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_GPIO_Init+0x250>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x20a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a15      	ldr	r2, [pc, #84]	; (8001090 <HAL_GPIO_Init+0x254>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x206>
 800103e:	2309      	movs	r3, #9
 8001040:	e029      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 8001042:	230a      	movs	r3, #10
 8001044:	e027      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 8001046:	2307      	movs	r3, #7
 8001048:	e025      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 800104a:	2306      	movs	r3, #6
 800104c:	e023      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 800104e:	2305      	movs	r3, #5
 8001050:	e021      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 8001052:	2304      	movs	r3, #4
 8001054:	e01f      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 8001056:	2303      	movs	r3, #3
 8001058:	e01d      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 800105a:	2302      	movs	r3, #2
 800105c:	e01b      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 800105e:	2301      	movs	r3, #1
 8001060:	e019      	b.n	8001096 <HAL_GPIO_Init+0x25a>
 8001062:	bf00      	nop
 8001064:	58000080 	.word	0x58000080
 8001068:	58024400 	.word	0x58024400
 800106c:	58000400 	.word	0x58000400
 8001070:	58020000 	.word	0x58020000
 8001074:	58020400 	.word	0x58020400
 8001078:	58020800 	.word	0x58020800
 800107c:	58020c00 	.word	0x58020c00
 8001080:	58021000 	.word	0x58021000
 8001084:	58021400 	.word	0x58021400
 8001088:	58021800 	.word	0x58021800
 800108c:	58021c00 	.word	0x58021c00
 8001090:	58022400 	.word	0x58022400
 8001094:	2300      	movs	r3, #0
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	f002 0203 	and.w	r2, r2, #3
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	4093      	lsls	r3, r2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a6:	4938      	ldr	r1, [pc, #224]	; (8001188 <HAL_GPIO_Init+0x34c>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	3301      	adds	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	f47f ae6b 	bne.w	8000e50 <HAL_GPIO_Init+0x14>
  }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3724      	adds	r7, #36	; 0x24
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58000400 	.word	0x58000400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_PWREx_ConfigSupply+0x70>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d00a      	beq.n	80011ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_PWREx_ConfigSupply+0x70>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e01f      	b.n	8001226 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e01d      	b.n	8001226 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_PWREx_ConfigSupply+0x70>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	490f      	ldr	r1, [pc, #60]	; (8001230 <HAL_PWREx_ConfigSupply+0x70>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011fa:	f7ff fd33 	bl	8000c64 <HAL_GetTick>
 80011fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001200:	e009      	b.n	8001216 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001202:	f7ff fd2f 	bl	8000c64 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001210:	d901      	bls.n	8001216 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e007      	b.n	8001226 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_PWREx_ConfigSupply+0x70>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800121e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001222:	d1ee      	bne.n	8001202 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	58024800 	.word	0x58024800

08001234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e39d      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8087 	beq.w	8001362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800125e:	4b86      	ldr	r3, [pc, #536]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	2b10      	cmp	r3, #16
 8001268:	d007      	beq.n	800127a <HAL_RCC_OscConfig+0x46>
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	2b18      	cmp	r3, #24
 800126e:	d110      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d10b      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d06c      	beq.n	8001360 <HAL_RCC_OscConfig+0x12c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d168      	bne.n	8001360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e377      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x76>
 800129c:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e02e      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b71      	ldr	r3, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a70      	ldr	r2, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6e      	ldr	r3, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6d      	ldr	r2, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e01d      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0xbc>
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012f0:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a60      	ldr	r2, [pc, #384]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a5d      	ldr	r2, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fca8 	bl	8000c64 <HAL_GetTick>
 8001314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fca4 	bl	8000c64 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e32b      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800132a:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0xe4>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fc94 	bl	8000c64 <HAL_GetTick>
 800133c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fc90 	bl	8000c64 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e317      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x10c>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 808c 	beq.w	8001488 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001370:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001378:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_RCC_OscConfig+0x162>
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	2b18      	cmp	r3, #24
 800138a:	d137      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c8>
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d132      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x17a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e2e9      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0219 	bic.w	r2, r3, #25
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	492f      	ldr	r1, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013c0:	f7ff fc50 	bl	8000c64 <HAL_GetTick>
 80013c4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc4c 	bl	8000c64 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e2d3      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	061b      	lsls	r3, r3, #24
 80013f4:	4920      	ldr	r1, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fa:	e045      	b.n	8001488 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d026      	beq.n	8001452 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 0219 	bic.w	r2, r3, #25
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4919      	ldr	r1, [pc, #100]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc25 	bl	8000c64 <HAL_GetTick>
 800141a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc21 	bl	8000c64 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e2a8      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	490b      	ldr	r1, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
 8001450:	e01a      	b.n	8001488 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fc01 	bl	8000c64 <HAL_GetTick>
 8001462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fbfd 	bl	8000c64 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d903      	bls.n	800147c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e284      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
 8001478:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147c:	4b96      	ldr	r3, [pc, #600]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ee      	bne.n	8001466 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d06a      	beq.n	800156a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	4b90      	ldr	r3, [pc, #576]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800149c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800149e:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d007      	beq.n	80014ba <HAL_RCC_OscConfig+0x286>
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b18      	cmp	r3, #24
 80014ae:	d11b      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2b4>
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ba:	4b87      	ldr	r3, [pc, #540]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x29e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b80      	cmp	r3, #128	; 0x80
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e257      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014d2:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	061b      	lsls	r3, r3, #24
 80014e0:	497d      	ldr	r1, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e6:	e040      	b.n	800156a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014f0:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a78      	ldr	r2, [pc, #480]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80014f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fbb2 	bl	8000c64 <HAL_GetTick>
 8001500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001504:	f7ff fbae 	bl	8000c64 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e235      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001516:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	4969      	ldr	r1, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	60cb      	str	r3, [r1, #12]
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001538:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 800153e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb8e 	bl	8000c64 <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800154c:	f7ff fb8a 	bl	8000c64 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e211      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800155e:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d036      	beq.n	80015e4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001582:	4a55      	ldr	r2, [pc, #340]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fb6b 	bl	8000c64 <HAL_GetTick>
 800158e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fb67 	bl	8000c64 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1ee      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x35e>
 80015b0:	e018      	b.n	80015e4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b6:	4a48      	ldr	r2, [pc, #288]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fb51 	bl	8000c64 <HAL_GetTick>
 80015c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fb4d 	bl	8000c64 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1d4      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d036      	beq.n	800165e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d019      	beq.n	800162c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a36      	ldr	r2, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80015fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001602:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001604:	f7ff fb2e 	bl	8000c64 <HAL_GetTick>
 8001608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800160c:	f7ff fb2a 	bl	8000c64 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1b1      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x3d8>
 800162a:	e018      	b.n	800165e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001636:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001638:	f7ff fb14 	bl	8000c64 <HAL_GetTick>
 800163c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001640:	f7ff fb10 	bl	8000c64 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e197      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8086 	beq.w	8001778 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x4a8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x4a8>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001678:	f7ff faf4 	bl	8000c64 <HAL_GetTick>
 800167c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001680:	f7ff faf0 	bl	8000c64 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e177      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_OscConfig+0x4a8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x480>
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
 80016b2:	e032      	b.n	800171a <HAL_RCC_OscConfig+0x4e6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4ac>
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a02      	ldr	r2, [pc, #8]	; (80016d8 <HAL_RCC_OscConfig+0x4a4>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	e021      	b.n	800171a <HAL_RCC_OscConfig+0x4e6>
 80016d6:	bf00      	nop
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58024800 	.word	0x58024800
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x4ce>
 80016e8:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x4e6>
 8001702:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a79      	ldr	r2, [pc, #484]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff fa9f 	bl	8000c64 <HAL_GetTick>
 8001726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fa9b 	bl	8000c64 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e120      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001740:	4b6d      	ldr	r3, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x4f6>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fa89 	bl	8000c64 <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fa85 	bl	8000c64 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e10a      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80ff 	beq.w	8001980 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178a:	2b18      	cmp	r3, #24
 800178c:	f000 80ba 	beq.w	8001904 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2b02      	cmp	r3, #2
 8001796:	f040 8095 	bne.w	80018c4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80017a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff fa5d 	bl	8000c64 <HAL_GetTick>
 80017aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fa59 	bl	8000c64 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0e0      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c0:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80017ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_RCC_OscConfig+0x6c8>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	430a      	orrs	r2, r1
 80017e0:	4945      	ldr	r1, [pc, #276]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	628b      	str	r3, [r1, #40]	; 0x28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	3b01      	subs	r3, #1
 80017f6:	025b      	lsls	r3, r3, #9
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
 8001804:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	3b01      	subs	r3, #1
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001816:	4938      	ldr	r1, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	4a35      	ldr	r2, [pc, #212]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x6cc>)
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001834:	00d2      	lsls	r2, r2, #3
 8001836:	4930      	ldr	r1, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800183c:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f023 020c 	bic.w	r2, r3, #12
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	492b      	ldr	r1, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f023 0202 	bic.w	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4927      	ldr	r1, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800187e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f9e2 	bl	8000c64 <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff f9de 	bl	8000c64 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e065      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x670>
 80018c2:	e05d      	b.n	8001980 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80018ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff f9c8 	bl	8000c64 <HAL_GetTick>
 80018d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f9c4 	bl	8000c64 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e04b      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ea:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x6c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x6a4>
 80018f6:	e043      	b.n	8001980 <HAL_RCC_OscConfig+0x74c>
 80018f8:	58024400 	.word	0x58024400
 80018fc:	fffffc0c 	.word	0xfffffc0c
 8001900:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x758>)
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_OscConfig+0x758>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	2b01      	cmp	r3, #1
 8001916:	d031      	beq.n	800197c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d12a      	bne.n	800197c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d122      	bne.n	800197c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0a5b      	lsrs	r3, r3, #9
 800194a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001952:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d108      	bne.n	800197c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0e1b      	lsrs	r3, r3, #24
 800196e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001976:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3730      	adds	r7, #48	; 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	58024400 	.word	0x58024400

08001990 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e19c      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d910      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b87      	ldr	r3, [pc, #540]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 020f 	bic.w	r2, r3, #15
 80019ba:	4985      	ldr	r1, [pc, #532]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b83      	ldr	r3, [pc, #524]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e184      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d908      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019f0:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4975      	ldr	r1, [pc, #468]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d908      	bls.n	8001a30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	496a      	ldr	r1, [pc, #424]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d908      	bls.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	495e      	ldr	r1, [pc, #376]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d908      	bls.n	8001a8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4953      	ldr	r1, [pc, #332]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d908      	bls.n	8001aba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f023 020f 	bic.w	r2, r3, #15
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4947      	ldr	r1, [pc, #284]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d055      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4940      	ldr	r1, [pc, #256]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d121      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0f6      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d115      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0ea      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0de      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0d6      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f023 0207 	bic.w	r2, r3, #7
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4925      	ldr	r1, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f88f 	bl	8000c64 <HAL_GetTick>
 8001b46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4a:	f7ff f88b 	bl	8000c64 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0be      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d1eb      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d010      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d208      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <HAL_RCC_ClockConfig+0x244>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d214      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 020f 	bic.w	r2, r3, #15
 8001bb6:	4906      	ldr	r1, [pc, #24]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_RCC_ClockConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e086      	b.n	8001cde <HAL_RCC_ClockConfig+0x34e>
 8001bd0:	52002000 	.word	0x52002000
 8001bd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d208      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bf4:	4b3c      	ldr	r3, [pc, #240]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4939      	ldr	r1, [pc, #228]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d010      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d208      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	492e      	ldr	r1, [pc, #184]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d208      	bcs.n	8001c62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d010      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d208      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4917      	ldr	r1, [pc, #92]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c90:	f000 f834 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	4912      	ldr	r1, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x35c>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_RCC_ClockConfig+0x35c>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x360>)
 8001cc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x364>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x368>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fdfa 	bl	80008cc <HAL_InitTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	08005968 	.word	0x08005968
 8001cf0:	24000004 	.word	0x24000004
 8001cf4:	24000000 	.word	0x24000000
 8001cf8:	24000008 	.word	0x24000008

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d02:	4bb3      	ldr	r3, [pc, #716]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0a:	2b18      	cmp	r3, #24
 8001d0c:	f200 8155 	bhi.w	8001fba <HAL_RCC_GetSysClockFreq+0x2be>
 8001d10:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d7d 	.word	0x08001d7d
 8001d1c:	08001fbb 	.word	0x08001fbb
 8001d20:	08001fbb 	.word	0x08001fbb
 8001d24:	08001fbb 	.word	0x08001fbb
 8001d28:	08001fbb 	.word	0x08001fbb
 8001d2c:	08001fbb 	.word	0x08001fbb
 8001d30:	08001fbb 	.word	0x08001fbb
 8001d34:	08001fbb 	.word	0x08001fbb
 8001d38:	08001da3 	.word	0x08001da3
 8001d3c:	08001fbb 	.word	0x08001fbb
 8001d40:	08001fbb 	.word	0x08001fbb
 8001d44:	08001fbb 	.word	0x08001fbb
 8001d48:	08001fbb 	.word	0x08001fbb
 8001d4c:	08001fbb 	.word	0x08001fbb
 8001d50:	08001fbb 	.word	0x08001fbb
 8001d54:	08001fbb 	.word	0x08001fbb
 8001d58:	08001da9 	.word	0x08001da9
 8001d5c:	08001fbb 	.word	0x08001fbb
 8001d60:	08001fbb 	.word	0x08001fbb
 8001d64:	08001fbb 	.word	0x08001fbb
 8001d68:	08001fbb 	.word	0x08001fbb
 8001d6c:	08001fbb 	.word	0x08001fbb
 8001d70:	08001fbb 	.word	0x08001fbb
 8001d74:	08001fbb 	.word	0x08001fbb
 8001d78:	08001daf 	.word	0x08001daf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d7c:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d88:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	4a90      	ldr	r2, [pc, #576]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d9a:	e111      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d9c:	4b8d      	ldr	r3, [pc, #564]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d9e:	61bb      	str	r3, [r7, #24]
    break;
 8001da0:	e10e      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001da2:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001da4:	61bb      	str	r3, [r7, #24]
    break;
 8001da6:	e10b      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001da8:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001daa:	61bb      	str	r3, [r7, #24]
    break;
 8001dac:	e108      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001db8:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001dc4:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001dce:	4b80      	ldr	r3, [pc, #512]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80e1 	beq.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	f000 8083 	beq.w	8001f00 <HAL_RCC_GetSysClockFreq+0x204>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	f200 80a1 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x248>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x114>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d056      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e0e:	e099      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e10:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02d      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e1c:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	4a6b      	ldr	r2, [pc, #428]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e76:	e087      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e82:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001fe4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eba:	e065      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001efe:	e043      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001fec <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f42:	e021      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	0a5b      	lsrs	r3, r3, #9
 8001f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f92:	3301      	adds	r3, #1
 8001f94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fac:	ee17 3a90 	vmov	r3, s15
 8001fb0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
    break;
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fbc:	61bb      	str	r3, [r7, #24]
    break;
 8001fbe:	bf00      	nop
  }

  return sysclockfreq;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	03d09000 	.word	0x03d09000
 8001fd8:	003d0900 	.word	0x003d0900
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	46000000 	.word	0x46000000
 8001fe4:	4c742400 	.word	0x4c742400
 8001fe8:	4a742400 	.word	0x4a742400
 8001fec:	4af42400 	.word	0x4af42400

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001ff6:	f7ff fe81 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_RCC_GetHCLKFreq+0x50>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490f      	ldr	r1, [pc, #60]	; (8002044 <HAL_RCC_GetHCLKFreq+0x54>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_GetHCLKFreq+0x50>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_GetHCLKFreq+0x54>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_RCC_GetHCLKFreq+0x58>)
 800202c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_RCC_GetHCLKFreq+0x58>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	58024400 	.word	0x58024400
 8002044:	08005968 	.word	0x08005968
 8002048:	24000004 	.word	0x24000004
 800204c:	24000000 	.word	0x24000000

08002050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002054:	f7ff ffcc 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4904      	ldr	r1, [pc, #16]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	58024400 	.word	0x58024400
 8002078:	08005968 	.word	0x08005968

0800207c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0207 	and.w	r2, r3, #7
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_GetClockConfig+0x7c>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetClockConfig+0x80>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 020f 	and.w	r2, r3, #15
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	58024400 	.word	0x58024400
 80020fc:	52002000 	.word	0x52002000

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e049      	b.n	80021a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f841 	bl	80021ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 fa0e 	bl	8002560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d001      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e05e      	b.n	800229a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02c      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d027      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_TIM_Base_Start_IT+0xe8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d022      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_TIM_Base_Start_IT+0xec>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d01d      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d018      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <HAL_TIM_Base_Start_IT+0xf4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_TIM_Base_Start_IT+0xf8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00e      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_TIM_Base_Start_IT+0x100>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d004      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x94>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_TIM_Base_Start_IT+0x104>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d115      	bne.n	8002284 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_TIM_Base_Start_IT+0x108>)
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d015      	beq.n	8002296 <HAL_TIM_Base_Start_IT+0xd2>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d011      	beq.n	8002296 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	e008      	b.n	8002296 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e000      	b.n	8002298 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40000c00 	.word	0x40000c00
 80022b8:	40010400 	.word	0x40010400
 80022bc:	40001800 	.word	0x40001800
 80022c0:	40014000 	.word	0x40014000
 80022c4:	4000e000 	.word	0x4000e000
 80022c8:	4000e400 	.word	0x4000e400
 80022cc:	00010007 	.word	0x00010007

080022d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0202 	mvn.w	r2, #2
 80022fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f905 	bl	8002522 <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f8f7 	bl	800250e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f908 	bl	8002536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0204 	mvn.w	r2, #4
 8002350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8db 	bl	8002522 <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8cd 	bl	800250e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f8de 	bl	8002536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b08      	cmp	r3, #8
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0208 	mvn.w	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8b1 	bl	8002522 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8a3 	bl	800250e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8b4 	bl	8002536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0210 	mvn.w	r2, #16
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2208      	movs	r2, #8
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f887 	bl	8002522 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f879 	bl	800250e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f88a 	bl	8002536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0201 	mvn.w	r2, #1
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fa06 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b80      	cmp	r3, #128	; 0x80
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f920 	bl	80026c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248e:	d10e      	bne.n	80024ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d107      	bne.n	80024ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f913 	bl	80026d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d10e      	bne.n	80024da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d107      	bne.n	80024da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f838 	bl	800254a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d10e      	bne.n	8002506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d107      	bne.n	8002506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0220 	mvn.w	r2, #32
 80024fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8d3 	bl	80026ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a44      	ldr	r2, [pc, #272]	; (8002684 <TIM_Base_SetConfig+0x124>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d00f      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a41      	ldr	r2, [pc, #260]	; (8002688 <TIM_Base_SetConfig+0x128>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00b      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <TIM_Base_SetConfig+0x12c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <TIM_Base_SetConfig+0x130>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a3e      	ldr	r2, [pc, #248]	; (8002694 <TIM_Base_SetConfig+0x134>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d108      	bne.n	80025b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a33      	ldr	r2, [pc, #204]	; (8002684 <TIM_Base_SetConfig+0x124>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d023      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a30      	ldr	r2, [pc, #192]	; (8002688 <TIM_Base_SetConfig+0x128>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2f      	ldr	r2, [pc, #188]	; (800268c <TIM_Base_SetConfig+0x12c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01b      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2e      	ldr	r2, [pc, #184]	; (8002690 <TIM_Base_SetConfig+0x130>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d017      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <TIM_Base_SetConfig+0x134>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <TIM_Base_SetConfig+0x138>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00f      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a2b      	ldr	r2, [pc, #172]	; (800269c <TIM_Base_SetConfig+0x13c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <TIM_Base_SetConfig+0x140>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <TIM_Base_SetConfig+0x144>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0xaa>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <TIM_Base_SetConfig+0x148>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <TIM_Base_SetConfig+0x124>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00f      	beq.n	8002668 <TIM_Base_SetConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <TIM_Base_SetConfig+0x134>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00b      	beq.n	8002668 <TIM_Base_SetConfig+0x108>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a11      	ldr	r2, [pc, #68]	; (8002698 <TIM_Base_SetConfig+0x138>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <TIM_Base_SetConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <TIM_Base_SetConfig+0x13c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_Base_SetConfig+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <TIM_Base_SetConfig+0x140>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d103      	bne.n	8002670 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	615a      	str	r2, [r3, #20]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40010400 	.word	0x40010400
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800
 80026a4:	4000e000 	.word	0x4000e000
 80026a8:	4000e400 	.word	0x4000e400

080026ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <__NVIC_SetPriority>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	; (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Handler+0x1c>)
 8002742:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002744:	f001 fe2c 	bl	80043a0 <xTaskGetSchedulerState>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800274e:	f002 fc13 	bl	8004f78 <xPortSysTickHandler>
  }
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002760:	2100      	movs	r1, #0
 8002762:	f06f 0004 	mvn.w	r0, #4
 8002766:	f7ff ffbf 	bl	80026e8 <__NVIC_SetPriority>
#endif
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002776:	f3ef 8305 	mrs	r3, IPSR
 800277a:	603b      	str	r3, [r7, #0]
  return(result);
 800277c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002782:	f06f 0305 	mvn.w	r3, #5
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	e00c      	b.n	80027a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <osKernelInitialize+0x44>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <osKernelInitialize+0x44>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	e002      	b.n	80027a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	240000f4 	.word	0x240000f4

080027b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027be:	f3ef 8305 	mrs	r3, IPSR
 80027c2:	603b      	str	r3, [r7, #0]
  return(result);
 80027c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80027ca:	f06f 0305 	mvn.w	r3, #5
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	e010      	b.n	80027f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <osKernelStart+0x48>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d109      	bne.n	80027ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027da:	f7ff ffbf 	bl	800275c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <osKernelStart+0x48>)
 80027e0:	2202      	movs	r2, #2
 80027e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80027e4:	f001 f980 	bl	8003ae8 <vTaskStartScheduler>
      stat = osOK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	e002      	b.n	80027f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	240000f4 	.word	0x240000f4

08002804 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	; 0x38
 8002808:	af04      	add	r7, sp, #16
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002814:	f3ef 8305 	mrs	r3, IPSR
 8002818:	617b      	str	r3, [r7, #20]
  return(result);
 800281a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800281c:	2b00      	cmp	r3, #0
 800281e:	d17e      	bne.n	800291e <osThreadNew+0x11a>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07b      	beq.n	800291e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800282a:	2318      	movs	r3, #24
 800282c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002836:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d045      	beq.n	80028ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <osThreadNew+0x48>
        name = attr->name;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <osThreadNew+0x6e>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b38      	cmp	r3, #56	; 0x38
 8002864:	d805      	bhi.n	8002872 <osThreadNew+0x6e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <osThreadNew+0x72>
        return (NULL);
 8002872:	2300      	movs	r3, #0
 8002874:	e054      	b.n	8002920 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00e      	beq.n	80028ac <osThreadNew+0xa8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2bbb      	cmp	r3, #187	; 0xbb
 8002894:	d90a      	bls.n	80028ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <osThreadNew+0xa8>
        mem = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e010      	b.n	80028ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10c      	bne.n	80028ce <osThreadNew+0xca>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d108      	bne.n	80028ce <osThreadNew+0xca>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <osThreadNew+0xca>
          mem = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	e001      	b.n	80028ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d110      	bne.n	80028f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028dc:	9202      	str	r2, [sp, #8]
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fe38 	bl	8003560 <xTaskCreateStatic>
 80028f0:	4603      	mov	r3, r0
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e013      	b.n	800291e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d110      	bne.n	800291e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fe83 	bl	800361a <xTaskCreate>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d001      	beq.n	800291e <osThreadNew+0x11a>
            hTask = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800291e:	693b      	ldr	r3, [r7, #16]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002934:	f3ef 8305 	mrs	r3, IPSR
 8002938:	60bb      	str	r3, [r7, #8]
  return(result);
 800293a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8002940:	f06f 0305 	mvn.w	r3, #5
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e017      	b.n	8002978 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800294e:	f06f 0303 	mvn.w	r3, #3
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e010      	b.n	8002978 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8002956:	6938      	ldr	r0, [r7, #16]
 8002958:	f001 f860 	bl	8003a1c <eTaskGetState>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d005      	beq.n	8002972 <osThreadTerminate+0x4a>
      stat = osOK;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800296a:	6938      	ldr	r0, [r7, #16]
 800296c:	f000 ffb0 	bl	80038d0 <vTaskDelete>
 8002970:	e002      	b.n	8002978 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8002972:	f06f 0302 	mvn.w	r3, #2
 8002976:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002978:	697b      	ldr	r3, [r7, #20]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800298a:	f3ef 8305 	mrs	r3, IPSR
 800298e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002990:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <osDelay+0x1c>
    stat = osErrorISR;
 8002996:	f06f 0305 	mvn.w	r3, #5
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e007      	b.n	80029ae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <osDelay+0x2c>
      vTaskDelay(ticks);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f001 f803 	bl	80039b4 <vTaskDelay>
    }
  }

  return (stat);
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80029c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <vApplicationGetIdleTaskMemory+0x30>)
 80029ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	240000f8 	.word	0x240000f8
 80029e8:	240001b4 	.word	0x240001b4

080029ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <vApplicationGetTimerTaskMemory+0x2c>)
 80029fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <vApplicationGetTimerTaskMemory+0x30>)
 8002a02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	240003b4 	.word	0x240003b4
 8002a1c:	24000470 	.word	0x24000470

08002a20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f103 0208 	add.w	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f103 0208 	add.w	r2, r3, #8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 0208 	add.w	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad8:	d103      	bne.n	8002ae2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e00c      	b.n	8002afc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e002      	b.n	8002af0 <vListInsert+0x2e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d2f6      	bcs.n	8002aea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6852      	ldr	r2, [r2, #4]
 8002b54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d103      	bne.n	8002b68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bb2:	f002 f94f 	bl	8004e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	3b01      	subs	r3, #1
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	441a      	add	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d114      	bne.n	8002c32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01a      	beq.n	8002c46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3310      	adds	r3, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fa01 	bl	800401c <xTaskRemoveFromEventList>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <xQueueGenericReset+0xcc>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	e009      	b.n	8002c46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3310      	adds	r3, #16
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fef2 	bl	8002a20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3324      	adds	r3, #36	; 0x24
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff feed 	bl	8002a20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c46:	f002 f935 	bl	8004eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	e000ed04 	.word	0xe000ed04

08002c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <xQueueGenericCreateStatic+0x52>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <xQueueGenericCreateStatic+0x56>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueGenericCreateStatic+0x58>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	623b      	str	r3, [r7, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <xQueueGenericCreateStatic+0x7e>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <xQueueGenericCreateStatic+0x82>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <xQueueGenericCreateStatic+0x84>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	61fb      	str	r3, [r7, #28]
}
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cf6:	2350      	movs	r3, #80	; 0x50
 8002cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b50      	cmp	r3, #80	; 0x50
 8002cfe:	d00a      	beq.n	8002d16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	61bb      	str	r3, [r7, #24]
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f805 	bl	8002d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3730      	adds	r7, #48	; 0x30
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e002      	b.n	8002d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d76:	2101      	movs	r1, #1
 8002d78:	69b8      	ldr	r0, [r7, #24]
 8002d7a:	f7ff ff05 	bl	8002b88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericSend+0x32>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGenericSend+0x40>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGenericSend+0x44>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGenericSend+0x46>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <xQueueGenericSend+0x60>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d103      	bne.n	8002dfe <xQueueGenericSend+0x6e>
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <xQueueGenericSend+0x72>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueGenericSend+0x74>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueGenericSend+0x8e>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	623b      	str	r3, [r7, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e1e:	f001 fabf 	bl	80043a0 <xTaskGetSchedulerState>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <xQueueGenericSend+0x9e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <xQueueGenericSend+0xa2>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueGenericSend+0xa4>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSend+0xbe>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61fb      	str	r3, [r7, #28]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e4e:	f002 f801 	bl	8004e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <xQueueGenericSend+0xd4>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d129      	bne.n	8002eb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e6a:	f000 fa0b 	bl	8003284 <prvCopyDataToQueue>
 8002e6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f8cd 	bl	800401c <xTaskRemoveFromEventList>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	e00a      	b.n	8002eb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ea0:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eb0:	f002 f800 	bl	8004eb4 <vPortExitCritical>
				return pdPASS;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e063      	b.n	8002f80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ebe:	f001 fff9 	bl	8004eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e05c      	b.n	8002f80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 f907 	bl	80040e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eda:	f001 ffeb 	bl	8004eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ede:	f000 fe73 	bl	8003bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ee2:	f001 ffb7 	bl	8004e54 <vPortEnterCritical>
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef2:	d103      	bne.n	8002efc <xQueueGenericSend+0x16c>
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f08:	d103      	bne.n	8002f12 <xQueueGenericSend+0x182>
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f12:	f001 ffcf 	bl	8004eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f16:	1d3a      	adds	r2, r7, #4
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 f8f6 	bl	8004110 <xTaskCheckForTimeOut>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d124      	bne.n	8002f74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2c:	f000 faa2 	bl	8003474 <prvIsQueueFull>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d018      	beq.n	8002f68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	3310      	adds	r3, #16
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 f81c 	bl	8003f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f46:	f000 fa2d 	bl	80033a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f4a:	f000 fe4b 	bl	8003be4 <xTaskResumeAll>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af7c 	bne.w	8002e4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	e772      	b.n	8002e4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6a:	f000 fa1b 	bl	80033a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f6e:	f000 fe39 	bl	8003be4 <xTaskResumeAll>
 8002f72:	e76c      	b.n	8002e4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f76:	f000 fa15 	bl	80033a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f7a:	f000 fe33 	bl	8003be4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3738      	adds	r7, #56	; 0x38
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b090      	sub	sp, #64	; 0x40
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <xQueueGenericSendFromISR+0x3c>
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <xQueueGenericSendFromISR+0x40>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <xQueueGenericSendFromISR+0x42>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d103      	bne.n	8002ff6 <xQueueGenericSendFromISR+0x6a>
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSendFromISR+0x6e>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueGenericSendFromISR+0x70>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	623b      	str	r3, [r7, #32]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003016:	f001 ffff 	bl	8005018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800301a:	f3ef 8211 	mrs	r2, BASEPRI
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	61fa      	str	r2, [r7, #28]
 8003030:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003032:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <xQueueGenericSendFromISR+0xbc>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d12f      	bne.n	80030a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800305e:	f000 f911 	bl	8003284 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003062:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306a:	d112      	bne.n	8003092 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f000 ffcf 	bl	800401c <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e007      	b.n	80030a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003096:	3301      	adds	r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b25a      	sxtb	r2, r3
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030a2:	2301      	movs	r3, #1
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80030a6:	e001      	b.n	80030ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3740      	adds	r7, #64	; 0x40
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <xQueueReceive+0x30>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	623b      	str	r3, [r7, #32]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <xQueueReceive+0x3e>
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <xQueueReceive+0x42>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <xQueueReceive+0x44>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <xQueueReceive+0x5e>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	61fb      	str	r3, [r7, #28]
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003122:	f001 f93d 	bl	80043a0 <xTaskGetSchedulerState>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <xQueueReceive+0x6e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <xQueueReceive+0x72>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueReceive+0x74>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueReceive+0x8e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003152:	f001 fe7f 	bl	8004e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01f      	beq.n	80031a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003166:	f000 f8f7 	bl	8003358 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1e5a      	subs	r2, r3, #1
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00f      	beq.n	800319a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	3310      	adds	r3, #16
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff4c 	bl	800401c <xTaskRemoveFromEventList>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <xQueueReceive+0x1bc>)
 800318c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800319a:	f001 fe8b 	bl	8004eb4 <vPortExitCritical>
				return pdPASS;
 800319e:	2301      	movs	r3, #1
 80031a0:	e069      	b.n	8003276 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031a8:	f001 fe84 	bl	8004eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e062      	b.n	8003276 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 ff92 	bl	80040e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031c4:	f001 fe76 	bl	8004eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031c8:	f000 fcfe 	bl	8003bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031cc:	f001 fe42 	bl	8004e54 <vPortEnterCritical>
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031dc:	d103      	bne.n	80031e6 <xQueueReceive+0x122>
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f2:	d103      	bne.n	80031fc <xQueueReceive+0x138>
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fc:	f001 fe5a 	bl	8004eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003200:	1d3a      	adds	r2, r7, #4
 8003202:	f107 0310 	add.w	r3, r7, #16
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ff81 	bl	8004110 <xTaskCheckForTimeOut>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d123      	bne.n	800325c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003216:	f000 f917 	bl	8003448 <prvIsQueueEmpty>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fea7 	bl	8003f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800322e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003230:	f000 f8b8 	bl	80033a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003234:	f000 fcd6 	bl	8003be4 <xTaskResumeAll>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d189      	bne.n	8003152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <xQueueReceive+0x1bc>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	e780      	b.n	8003152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003252:	f000 f8a7 	bl	80033a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003256:	f000 fcc5 	bl	8003be4 <xTaskResumeAll>
 800325a:	e77a      	b.n	8003152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800325c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800325e:	f000 f8a1 	bl	80033a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003262:	f000 fcbf 	bl	8003be4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003268:	f000 f8ee 	bl	8003448 <prvIsQueueEmpty>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	f43f af6f 	beq.w	8003152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003276:	4618      	mov	r0, r3
 8003278:	3730      	adds	r7, #48	; 0x30
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d14d      	bne.n	8003346 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 f894 	bl	80043dc <xTaskPriorityDisinherit>
 80032b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	e043      	b.n	8003346 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d119      	bne.n	80032f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6858      	ldr	r0, [r3, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	461a      	mov	r2, r3
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	f002 f936 	bl	8005540 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	441a      	add	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d32b      	bcc.n	8003346 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	e026      	b.n	8003346 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68d8      	ldr	r0, [r3, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	f002 f91c 	bl	8005540 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	425b      	negs	r3, r3
 8003312:	441a      	add	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	425b      	negs	r3, r3
 800332e:	441a      	add	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d105      	bne.n	8003346 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	3b01      	subs	r3, #1
 8003344:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800334e:	697b      	ldr	r3, [r7, #20]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d303      	bcc.n	800338c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68d9      	ldr	r1, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	461a      	mov	r2, r3
 8003396:	6838      	ldr	r0, [r7, #0]
 8003398:	f002 f8d2 	bl	8005540 <memcpy>
	}
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033ac:	f001 fd52 	bl	8004e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033b8:	e011      	b.n	80033de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d012      	beq.n	80033e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3324      	adds	r3, #36	; 0x24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fe28 	bl	800401c <xTaskRemoveFromEventList>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033d2:	f000 feff 	bl	80041d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	3b01      	subs	r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	dce9      	bgt.n	80033ba <prvUnlockQueue+0x16>
 80033e6:	e000      	b.n	80033ea <prvUnlockQueue+0x46>
					break;
 80033e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033f2:	f001 fd5f 	bl	8004eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033f6:	f001 fd2d 	bl	8004e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003400:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003402:	e011      	b.n	8003428 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3310      	adds	r3, #16
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fe03 	bl	800401c <xTaskRemoveFromEventList>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800341c:	f000 feda 	bl	80041d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003420:	7bbb      	ldrb	r3, [r7, #14]
 8003422:	3b01      	subs	r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800342c:	2b00      	cmp	r3, #0
 800342e:	dce9      	bgt.n	8003404 <prvUnlockQueue+0x60>
 8003430:	e000      	b.n	8003434 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003432:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	22ff      	movs	r2, #255	; 0xff
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800343c:	f001 fd3a 	bl	8004eb4 <vPortExitCritical>
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003450:	f001 fd00 	bl	8004e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e001      	b.n	8003466 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003466:	f001 fd25 	bl	8004eb4 <vPortExitCritical>

	return xReturn;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800347c:	f001 fcea 	bl	8004e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	429a      	cmp	r2, r3
 800348a:	d102      	bne.n	8003492 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e001      	b.n	8003496 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003496:	f001 fd0d 	bl	8004eb4 <vPortExitCritical>

	return xReturn;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e014      	b.n	80034de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034b4:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <vQueueAddToRegistry+0x50>)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034c0:	490c      	ldr	r1, [pc, #48]	; (80034f4 <vQueueAddToRegistry+0x50>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <vQueueAddToRegistry+0x50>)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034d6:	e006      	b.n	80034e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d9e7      	bls.n	80034b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	24000870 	.word	0x24000870

080034f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003508:	f001 fca4 	bl	8004e54 <vPortEnterCritical>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003512:	b25b      	sxtb	r3, r3
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003518:	d103      	bne.n	8003522 <vQueueWaitForMessageRestricted+0x2a>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003528:	b25b      	sxtb	r3, r3
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352e:	d103      	bne.n	8003538 <vQueueWaitForMessageRestricted+0x40>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003538:	f001 fcbc 	bl	8004eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fd39 	bl	8003fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff26 	bl	80033a4 <prvUnlockQueue>
	}
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af04      	add	r7, sp, #16
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	623b      	str	r3, [r7, #32]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	61fb      	str	r3, [r7, #28]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035a6:	23bc      	movs	r3, #188	; 0xbc
 80035a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2bbc      	cmp	r3, #188	; 0xbc
 80035ae:	d00a      	beq.n	80035c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61bb      	str	r3, [r7, #24]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <xTaskCreateStatic+0xac>
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01b      	beq.n	800360c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035e6:	2300      	movs	r3, #0
 80035e8:	9303      	str	r3, [sp, #12]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	9302      	str	r3, [sp, #8]
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f850 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003606:	f000 f8f3 	bl	80037f0 <prvAddNewTaskToReadyList>
 800360a:	e001      	b.n	8003610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003610:	697b      	ldr	r3, [r7, #20]
	}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08c      	sub	sp, #48	; 0x30
 800361e:	af04      	add	r7, sp, #16
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fd32 	bl	8005098 <pvPortMalloc>
 8003634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800363c:	20bc      	movs	r0, #188	; 0xbc
 800363e:	f001 fd2b 	bl	8005098 <pvPortMalloc>
 8003642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	e005      	b.n	800365e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f001 fdec 	bl	8005230 <vPortFree>
 8003658:	e001      	b.n	800365e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	2300      	movs	r3, #0
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f80e 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003688:	69f8      	ldr	r0, [r7, #28]
 800368a:	f000 f8b1 	bl	80037f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e002      	b.n	800369a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800369a:	69bb      	ldr	r3, [r7, #24]
	}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	461a      	mov	r2, r3
 80036bc:	21a5      	movs	r1, #165	; 0xa5
 80036be:	f001 ff4d 	bl	800555c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80036cc:	440b      	add	r3, r1
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	617b      	str	r3, [r7, #20]
}
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01f      	beq.n	8003742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e012      	b.n	800372e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	7819      	ldrb	r1, [r3, #0]
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	3334      	adds	r3, #52	; 0x34
 8003718:	460a      	mov	r2, r1
 800371a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d006      	beq.n	8003736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	3301      	adds	r3, #1
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d9e9      	bls.n	8003708 <prvInitialiseNewTask+0x64>
 8003734:	e000      	b.n	8003738 <prvInitialiseNewTask+0x94>
			{
				break;
 8003736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003740:	e003      	b.n	800374a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	2b37      	cmp	r3, #55	; 0x37
 800374e:	d901      	bls.n	8003754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003750:	2337      	movs	r3, #55	; 0x37
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	3304      	adds	r3, #4
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f978 	bl	8002a60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	3318      	adds	r3, #24
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f973 	bl	8002a60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	3354      	adds	r3, #84	; 0x54
 80037a4:	2260      	movs	r2, #96	; 0x60
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fed7 	bl	800555c <memset>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <prvInitialiseNewTask+0x140>)
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <prvInitialiseNewTask+0x144>)
 80037b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <prvInitialiseNewTask+0x148>)
 80037be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	69b8      	ldr	r0, [r7, #24]
 80037c6:	f001 fa19 	bl	8004bfc <pxPortInitialiseStack>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08005998 	.word	0x08005998
 80037e8:	080059b8 	.word	0x080059b8
 80037ec:	08005978 	.word	0x08005978

080037f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037f8:	f001 fb2c 	bl	8004e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <prvAddNewTaskToReadyList+0xc4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <prvAddNewTaskToReadyList+0xc4>)
 8003804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <prvAddNewTaskToReadyList+0xc8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800380e:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <prvAddNewTaskToReadyList+0xc8>)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <prvAddNewTaskToReadyList+0xc4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d110      	bne.n	800383e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800381c:	f000 fcfe 	bl	800421c <prvInitialiseTaskLists>
 8003820:	e00d      	b.n	800383e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <prvAddNewTaskToReadyList+0xcc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <prvAddNewTaskToReadyList+0xc8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	429a      	cmp	r2, r3
 8003836:	d802      	bhi.n	800383e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <prvAddNewTaskToReadyList+0xc8>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <prvAddNewTaskToReadyList+0xd0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <prvAddNewTaskToReadyList+0xd0>)
 8003846:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <prvAddNewTaskToReadyList+0xd0>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <prvAddNewTaskToReadyList+0xd4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d903      	bls.n	8003864 <prvAddNewTaskToReadyList+0x74>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <prvAddNewTaskToReadyList+0xd4>)
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <prvAddNewTaskToReadyList+0xd8>)
 8003872:	441a      	add	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f7ff f8fd 	bl	8002a7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003880:	f001 fb18 	bl	8004eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <prvAddNewTaskToReadyList+0xcc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <prvAddNewTaskToReadyList+0xc8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	429a      	cmp	r2, r3
 8003898:	d207      	bcs.n	80038aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <prvAddNewTaskToReadyList+0xdc>)
 800389c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	24000d84 	.word	0x24000d84
 80038b8:	240008b0 	.word	0x240008b0
 80038bc:	24000d90 	.word	0x24000d90
 80038c0:	24000da0 	.word	0x24000da0
 80038c4:	24000d8c 	.word	0x24000d8c
 80038c8:	240008b4 	.word	0x240008b4
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80038d8:	f001 fabc 	bl	8004e54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <vTaskDelete+0x18>
 80038e2:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <vTaskDelete+0xc4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e000      	b.n	80038ea <vTaskDelete+0x1a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f91f 	bl	8002b34 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3318      	adds	r3, #24
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f916 	bl	8002b34 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <vTaskDelete+0xc8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <vTaskDelete+0xc8>)
 8003910:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <vTaskDelete+0xc4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d10b      	bne.n	8003934 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	481e      	ldr	r0, [pc, #120]	; (800399c <vTaskDelete+0xcc>)
 8003924:	f7ff f8a9 	bl	8002a7a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <vTaskDelete+0xd0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <vTaskDelete+0xd0>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e009      	b.n	8003948 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <vTaskDelete+0xd4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3b01      	subs	r3, #1
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <vTaskDelete+0xd4>)
 800393c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fcda 	bl	80042f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003944:	f000 fd0c 	bl	8004360 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003948:	f001 fab4 	bl	8004eb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <vTaskDelete+0xd8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <vTaskDelete+0xc4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	429a      	cmp	r2, r3
 800395c:	d116      	bne.n	800398c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <vTaskDelete+0xdc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <vTaskDelete+0xac>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	60bb      	str	r3, [r7, #8]
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <vTaskDelete+0xe0>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	240008b0 	.word	0x240008b0
 8003998:	24000da0 	.word	0x24000da0
 800399c:	24000d58 	.word	0x24000d58
 80039a0:	24000d6c 	.word	0x24000d6c
 80039a4:	24000d84 	.word	0x24000d84
 80039a8:	24000d90 	.word	0x24000d90
 80039ac:	24000dac 	.word	0x24000dac
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <vTaskDelay+0x60>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <vTaskDelay+0x30>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	60bb      	str	r3, [r7, #8]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039e4:	f000 f8f0 	bl	8003bc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039e8:	2100      	movs	r1, #0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fd64 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039f0:	f000 f8f8 	bl	8003be4 <xTaskResumeAll>
 80039f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <vTaskDelay+0x64>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	24000dac 	.word	0x24000dac
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <eTaskGetState+0x28>
	__asm volatile
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	60bb      	str	r3, [r7, #8]
}
 8003a40:	bf00      	nop
 8003a42:	e7fe      	b.n	8003a42 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003a44:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <eTaskGetState+0xb8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d102      	bne.n	8003a54 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e03a      	b.n	8003aca <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8003a54:	f001 f9fe 	bl	8004e54 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <eTaskGetState+0xbc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <eTaskGetState+0xc0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003a6a:	f001 fa23 	bl	8004eb4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d003      	beq.n	8003a7e <eTaskGetState+0x62>
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d102      	bne.n	8003a84 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e022      	b.n	8003aca <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <eTaskGetState+0xc4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d112      	bne.n	8003ab2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e011      	b.n	8003aca <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e00e      	b.n	8003aca <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003aac:	2302      	movs	r3, #2
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e00b      	b.n	8003aca <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <eTaskGetState+0xc8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d002      	beq.n	8003ac0 <eTaskGetState+0xa4>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e001      	b.n	8003aca <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003aca:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003acc:	4618      	mov	r0, r3
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	240008b0 	.word	0x240008b0
 8003ad8:	24000d3c 	.word	0x24000d3c
 8003adc:	24000d40 	.word	0x24000d40
 8003ae0:	24000d70 	.word	0x24000d70
 8003ae4:	24000d58 	.word	0x24000d58

08003ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003af6:	463a      	mov	r2, r7
 8003af8:	1d39      	adds	r1, r7, #4
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe ff5a 	bl	80029b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	9202      	str	r2, [sp, #8]
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2300      	movs	r3, #0
 8003b14:	460a      	mov	r2, r1
 8003b16:	4924      	ldr	r1, [pc, #144]	; (8003ba8 <vTaskStartScheduler+0xc0>)
 8003b18:	4824      	ldr	r0, [pc, #144]	; (8003bac <vTaskStartScheduler+0xc4>)
 8003b1a:	f7ff fd21 	bl	8003560 <xTaskCreateStatic>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <vTaskStartScheduler+0xc8>)
 8003b22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b24:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <vTaskStartScheduler+0xc8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e001      	b.n	8003b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d102      	bne.n	8003b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b3c:	f000 fd10 	bl	8004560 <xTimerCreateTimerTask>
 8003b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d11b      	bne.n	8003b80 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
}
 8003b5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <vTaskStartScheduler+0xcc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3354      	adds	r3, #84	; 0x54
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <vTaskStartScheduler+0xd0>)
 8003b64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <vTaskStartScheduler+0xd4>)
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <vTaskStartScheduler+0xd8>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <vTaskStartScheduler+0xdc>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b7a:	f001 f8c9 	bl	8004d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b7e:	e00e      	b.n	8003b9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b86:	d10a      	bne.n	8003b9e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	60fb      	str	r3, [r7, #12]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <vTaskStartScheduler+0xb4>
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	080058f0 	.word	0x080058f0
 8003bac:	080041ed 	.word	0x080041ed
 8003bb0:	24000da8 	.word	0x24000da8
 8003bb4:	240008b0 	.word	0x240008b0
 8003bb8:	24000018 	.word	0x24000018
 8003bbc:	24000da4 	.word	0x24000da4
 8003bc0:	24000d90 	.word	0x24000d90
 8003bc4:	24000d88 	.word	0x24000d88

08003bc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <vTaskSuspendAll+0x18>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <vTaskSuspendAll+0x18>)
 8003bd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	24000dac 	.word	0x24000dac

08003be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bf2:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <xTaskResumeAll+0x118>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c10:	f001 f920 	bl	8004e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c14:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <xTaskResumeAll+0x118>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	4a38      	ldr	r2, [pc, #224]	; (8003cfc <xTaskResumeAll+0x118>)
 8003c1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <xTaskResumeAll+0x118>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d162      	bne.n	8003cec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <xTaskResumeAll+0x11c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d05e      	beq.n	8003cec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c2e:	e02f      	b.n	8003c90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c30:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <xTaskResumeAll+0x120>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe ff79 	bl	8002b34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe ff74 	bl	8002b34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <xTaskResumeAll+0x124>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d903      	bls.n	8003c60 <xTaskResumeAll+0x7c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <xTaskResumeAll+0x124>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <xTaskResumeAll+0x128>)
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe feff 	bl	8002a7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <xTaskResumeAll+0x130>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c90:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <xTaskResumeAll+0x120>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1cb      	bne.n	8003c30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c9e:	f000 fb5f 	bl	8004360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <xTaskResumeAll+0x134>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cae:	f000 f847 	bl	8003d40 <xTaskIncrementTick>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <xTaskResumeAll+0x130>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f1      	bne.n	8003cae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003cca:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <xTaskResumeAll+0x134>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <xTaskResumeAll+0x130>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <xTaskResumeAll+0x138>)
 8003cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cec:	f001 f8e2 	bl	8004eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	24000dac 	.word	0x24000dac
 8003d00:	24000d84 	.word	0x24000d84
 8003d04:	24000d44 	.word	0x24000d44
 8003d08:	24000d8c 	.word	0x24000d8c
 8003d0c:	240008b4 	.word	0x240008b4
 8003d10:	240008b0 	.word	0x240008b0
 8003d14:	24000d98 	.word	0x24000d98
 8003d18:	24000d94 	.word	0x24000d94
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <xTaskGetTickCount+0x1c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d2c:	687b      	ldr	r3, [r7, #4]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	24000d88 	.word	0x24000d88

08003d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4a:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <xTaskIncrementTick+0x148>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 808f 	bne.w	8003e72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d54:	4b4d      	ldr	r3, [pc, #308]	; (8003e8c <xTaskIncrementTick+0x14c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d5c:	4a4b      	ldr	r2, [pc, #300]	; (8003e8c <xTaskIncrementTick+0x14c>)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d120      	bne.n	8003daa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d68:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <xTaskIncrementTick+0x150>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	603b      	str	r3, [r7, #0]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskIncrementTick+0x46>
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <xTaskIncrementTick+0x150>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <xTaskIncrementTick+0x154>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <xTaskIncrementTick+0x150>)
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <xTaskIncrementTick+0x154>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <xTaskIncrementTick+0x158>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	4a3d      	ldr	r2, [pc, #244]	; (8003e98 <xTaskIncrementTick+0x158>)
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	f000 fadb 	bl	8004360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003daa:	4b3c      	ldr	r3, [pc, #240]	; (8003e9c <xTaskIncrementTick+0x15c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d349      	bcc.n	8003e48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <xTaskIncrementTick+0x150>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <xTaskIncrementTick+0x15c>)
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc4:	601a      	str	r2, [r3, #0]
					break;
 8003dc6:	e03f      	b.n	8003e48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <xTaskIncrementTick+0x150>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d203      	bcs.n	8003de8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003de0:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <xTaskIncrementTick+0x15c>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de6:	e02f      	b.n	8003e48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fea1 	bl	8002b34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3318      	adds	r3, #24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fe98 	bl	8002b34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <xTaskIncrementTick+0x160>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d903      	bls.n	8003e18 <xTaskIncrementTick+0xd8>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <xTaskIncrementTick+0x160>)
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <xTaskIncrementTick+0x164>)
 8003e26:	441a      	add	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f7fe fe23 	bl	8002a7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <xTaskIncrementTick+0x168>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3b8      	bcc.n	8003db4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e46:	e7b5      	b.n	8003db4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <xTaskIncrementTick+0x168>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	4915      	ldr	r1, [pc, #84]	; (8003ea4 <xTaskIncrementTick+0x164>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d901      	bls.n	8003e64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <xTaskIncrementTick+0x16c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e004      	b.n	8003e7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <xTaskIncrementTick+0x170>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <xTaskIncrementTick+0x170>)
 8003e7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e7c:	697b      	ldr	r3, [r7, #20]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	24000dac 	.word	0x24000dac
 8003e8c:	24000d88 	.word	0x24000d88
 8003e90:	24000d3c 	.word	0x24000d3c
 8003e94:	24000d40 	.word	0x24000d40
 8003e98:	24000d9c 	.word	0x24000d9c
 8003e9c:	24000da4 	.word	0x24000da4
 8003ea0:	24000d8c 	.word	0x24000d8c
 8003ea4:	240008b4 	.word	0x240008b4
 8003ea8:	240008b0 	.word	0x240008b0
 8003eac:	24000d98 	.word	0x24000d98
 8003eb0:	24000d94 	.word	0x24000d94

08003eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eba:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <vTaskSwitchContext+0xb0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <vTaskSwitchContext+0xb4>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec8:	e046      	b.n	8003f58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <vTaskSwitchContext+0xb4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed0:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <vTaskSwitchContext+0xb8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e010      	b.n	8003efa <vTaskSwitchContext+0x46>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <vTaskSwitchContext+0x3e>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	491d      	ldr	r1, [pc, #116]	; (8003f70 <vTaskSwitchContext+0xbc>)
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0e4      	beq.n	8003ed8 <vTaskSwitchContext+0x24>
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <vTaskSwitchContext+0xbc>)
 8003f1a:	4413      	add	r3, r2
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d104      	bne.n	8003f3e <vTaskSwitchContext+0x8a>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <vTaskSwitchContext+0xc0>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <vTaskSwitchContext+0xb8>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <vTaskSwitchContext+0xc0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3354      	adds	r3, #84	; 0x54
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <vTaskSwitchContext+0xc4>)
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	24000dac 	.word	0x24000dac
 8003f68:	24000d98 	.word	0x24000d98
 8003f6c:	24000d8c 	.word	0x24000d8c
 8003f70:	240008b4 	.word	0x240008b4
 8003f74:	240008b0 	.word	0x240008b0
 8003f78:	24000018 	.word	0x24000018

08003f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <vTaskPlaceOnEventList+0x44>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3318      	adds	r3, #24
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fe fd89 	bl	8002ac2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f000 fa80 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	240008b0 	.word	0x240008b0

08003fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	617b      	str	r3, [r7, #20]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7fe fd40 	bl	8002a7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68b8      	ldr	r0, [r7, #8]
 800400a:	f000 fa55 	bl	80044b8 <prvAddCurrentTaskToDelayedList>
	}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	240008b0 	.word	0x240008b0

0800401c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	60fb      	str	r3, [r7, #12]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3318      	adds	r3, #24
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fd71 	bl	8002b34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <xTaskRemoveFromEventList+0xb0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11d      	bne.n	8004096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fd68 	bl	8002b34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <xTaskRemoveFromEventList+0xb4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d903      	bls.n	8004078 <xTaskRemoveFromEventList+0x5c>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <xTaskRemoveFromEventList+0xb4>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <xTaskRemoveFromEventList+0xb8>)
 8004086:	441a      	add	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f7fe fcf3 	bl	8002a7a <vListInsertEnd>
 8004094:	e005      	b.n	80040a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3318      	adds	r3, #24
 800409a:	4619      	mov	r1, r3
 800409c:	480e      	ldr	r0, [pc, #56]	; (80040d8 <xTaskRemoveFromEventList+0xbc>)
 800409e:	f7fe fcec 	bl	8002a7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <xTaskRemoveFromEventList+0xc0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d905      	bls.n	80040bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <xTaskRemoveFromEventList+0xc4>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e001      	b.n	80040c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040c0:	697b      	ldr	r3, [r7, #20]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	24000dac 	.word	0x24000dac
 80040d0:	24000d8c 	.word	0x24000d8c
 80040d4:	240008b4 	.word	0x240008b4
 80040d8:	24000d44 	.word	0x24000d44
 80040dc:	240008b0 	.word	0x240008b0
 80040e0:	24000d98 	.word	0x24000d98

080040e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <vTaskInternalSetTimeOutState+0x24>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <vTaskInternalSetTimeOutState+0x28>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	605a      	str	r2, [r3, #4]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	24000d9c 	.word	0x24000d9c
 800410c:	24000d88 	.word	0x24000d88

08004110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004152:	f000 fe7f 	bl	8004e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <xTaskCheckForTimeOut+0xbc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800416e:	d102      	bne.n	8004176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	e023      	b.n	80041be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <xTaskCheckForTimeOut+0xc0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d007      	beq.n	8004192 <xTaskCheckForTimeOut+0x82>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e015      	b.n	80041be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	d20b      	bcs.n	80041b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff9b 	bl	80040e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e004      	b.n	80041be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041be:	f000 fe79 	bl	8004eb4 <vPortExitCritical>

	return xReturn;
 80041c2:	69fb      	ldr	r3, [r7, #28]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	24000d88 	.word	0x24000d88
 80041d0:	24000d9c 	.word	0x24000d9c

080041d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <vTaskMissedYield+0x14>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	24000d98 	.word	0x24000d98

080041ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041f4:	f000 f852 	bl	800429c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <prvIdleTask+0x28>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d9f9      	bls.n	80041f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <prvIdleTask+0x2c>)
 8004202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004210:	e7f0      	b.n	80041f4 <prvIdleTask+0x8>
 8004212:	bf00      	nop
 8004214:	240008b4 	.word	0x240008b4
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	e00c      	b.n	8004242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <prvInitialiseTaskLists+0x60>)
 8004234:	4413      	add	r3, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fbf2 	bl	8002a20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3301      	adds	r3, #1
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b37      	cmp	r3, #55	; 0x37
 8004246:	d9ef      	bls.n	8004228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004248:	480d      	ldr	r0, [pc, #52]	; (8004280 <prvInitialiseTaskLists+0x64>)
 800424a:	f7fe fbe9 	bl	8002a20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800424e:	480d      	ldr	r0, [pc, #52]	; (8004284 <prvInitialiseTaskLists+0x68>)
 8004250:	f7fe fbe6 	bl	8002a20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004254:	480c      	ldr	r0, [pc, #48]	; (8004288 <prvInitialiseTaskLists+0x6c>)
 8004256:	f7fe fbe3 	bl	8002a20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800425a:	480c      	ldr	r0, [pc, #48]	; (800428c <prvInitialiseTaskLists+0x70>)
 800425c:	f7fe fbe0 	bl	8002a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004260:	480b      	ldr	r0, [pc, #44]	; (8004290 <prvInitialiseTaskLists+0x74>)
 8004262:	f7fe fbdd 	bl	8002a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <prvInitialiseTaskLists+0x78>)
 8004268:	4a05      	ldr	r2, [pc, #20]	; (8004280 <prvInitialiseTaskLists+0x64>)
 800426a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <prvInitialiseTaskLists+0x7c>)
 800426e:	4a05      	ldr	r2, [pc, #20]	; (8004284 <prvInitialiseTaskLists+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	240008b4 	.word	0x240008b4
 8004280:	24000d14 	.word	0x24000d14
 8004284:	24000d28 	.word	0x24000d28
 8004288:	24000d44 	.word	0x24000d44
 800428c:	24000d58 	.word	0x24000d58
 8004290:	24000d70 	.word	0x24000d70
 8004294:	24000d3c 	.word	0x24000d3c
 8004298:	24000d40 	.word	0x24000d40

0800429c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042a2:	e019      	b.n	80042d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042a4:	f000 fdd6 	bl	8004e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <prvCheckTasksWaitingTermination+0x50>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe fc3d 	bl	8002b34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <prvCheckTasksWaitingTermination+0x54>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <prvCheckTasksWaitingTermination+0x54>)
 80042c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <prvCheckTasksWaitingTermination+0x58>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <prvCheckTasksWaitingTermination+0x58>)
 80042cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ce:	f000 fdf1 	bl	8004eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f810 	bl	80042f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <prvCheckTasksWaitingTermination+0x58>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e1      	bne.n	80042a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	24000d58 	.word	0x24000d58
 80042f0:	24000d84 	.word	0x24000d84
 80042f4:	24000d6c 	.word	0x24000d6c

080042f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3354      	adds	r3, #84	; 0x54
 8004304:	4618      	mov	r0, r3
 8004306:	f001 fa1f 	bl	8005748 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	4618      	mov	r0, r3
 800431a:	f000 ff89 	bl	8005230 <vPortFree>
				vPortFree( pxTCB );
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 ff86 	bl	8005230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004324:	e018      	b.n	8004358 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800432c:	2b01      	cmp	r3, #1
 800432e:	d103      	bne.n	8004338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 ff7d 	bl	8005230 <vPortFree>
	}
 8004336:	e00f      	b.n	8004358 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800433e:	2b02      	cmp	r3, #2
 8004340:	d00a      	beq.n	8004358 <prvDeleteTCB+0x60>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60fb      	str	r3, [r7, #12]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <prvDeleteTCB+0x5e>
	}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <prvResetNextTaskUnblockTime+0x38>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvResetNextTaskUnblockTime+0x3c>)
 8004372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004378:	e008      	b.n	800438c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <prvResetNextTaskUnblockTime+0x38>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <prvResetNextTaskUnblockTime+0x3c>)
 800438a:	6013      	str	r3, [r2, #0]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	24000d3c 	.word	0x24000d3c
 800439c:	24000da4 	.word	0x24000da4

080043a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <xTaskGetSchedulerState+0x34>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ae:	2301      	movs	r3, #1
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	e008      	b.n	80043c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <xTaskGetSchedulerState+0x38>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043bc:	2302      	movs	r3, #2
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	e001      	b.n	80043c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043c6:	687b      	ldr	r3, [r7, #4]
	}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	24000d90 	.word	0x24000d90
 80043d8:	24000dac 	.word	0x24000dac

080043dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d056      	beq.n	80044a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <xTaskPriorityDisinherit+0xd0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d00a      	beq.n	8004412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60fb      	str	r3, [r7, #12]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	429a      	cmp	r2, r3
 8004444:	d02c      	beq.n	80044a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444a:	2b00      	cmp	r3, #0
 800444c:	d128      	bne.n	80044a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fb6e 	bl	8002b34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <xTaskPriorityDisinherit+0xd4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <xTaskPriorityDisinherit+0xa4>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <xTaskPriorityDisinherit+0xd4>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <xTaskPriorityDisinherit+0xd8>)
 800448e:	441a      	add	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7fe faef 	bl	8002a7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044a0:	697b      	ldr	r3, [r7, #20]
	}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	240008b0 	.word	0x240008b0
 80044b0:	24000d8c 	.word	0x24000d8c
 80044b4:	240008b4 	.word	0x240008b4

080044b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044c2:	4b21      	ldr	r3, [pc, #132]	; (8004548 <prvAddCurrentTaskToDelayedList+0x90>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <prvAddCurrentTaskToDelayedList+0x94>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fb30 	bl	8002b34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044da:	d10a      	bne.n	80044f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <prvAddCurrentTaskToDelayedList+0x94>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4819      	ldr	r0, [pc, #100]	; (8004550 <prvAddCurrentTaskToDelayedList+0x98>)
 80044ec:	f7fe fac5 	bl	8002a7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044f0:	e026      	b.n	8004540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <prvAddCurrentTaskToDelayedList+0x94>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	429a      	cmp	r2, r3
 8004508:	d209      	bcs.n	800451e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <prvAddCurrentTaskToDelayedList+0x94>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7fe fad3 	bl	8002ac2 <vListInsert>
}
 800451c:	e010      	b.n	8004540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <prvAddCurrentTaskToDelayedList+0x94>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7fe fac9 	bl	8002ac2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d202      	bcs.n	8004540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <prvAddCurrentTaskToDelayedList+0xa4>)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	24000d88 	.word	0x24000d88
 800454c:	240008b0 	.word	0x240008b0
 8004550:	24000d70 	.word	0x24000d70
 8004554:	24000d40 	.word	0x24000d40
 8004558:	24000d3c 	.word	0x24000d3c
 800455c:	24000da4 	.word	0x24000da4

08004560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800456a:	f000 fb07 	bl	8004b7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <xTimerCreateTimerTask+0x80>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d021      	beq.n	80045ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800457e:	1d3a      	adds	r2, r7, #4
 8004580:	f107 0108 	add.w	r1, r7, #8
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fa2f 	bl	80029ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	9202      	str	r2, [sp, #8]
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	2302      	movs	r3, #2
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	2300      	movs	r3, #0
 800459e:	460a      	mov	r2, r1
 80045a0:	4910      	ldr	r1, [pc, #64]	; (80045e4 <xTimerCreateTimerTask+0x84>)
 80045a2:	4811      	ldr	r0, [pc, #68]	; (80045e8 <xTimerCreateTimerTask+0x88>)
 80045a4:	f7fe ffdc 	bl	8003560 <xTaskCreateStatic>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <xTimerCreateTimerTask+0x8c>)
 80045ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <xTimerCreateTimerTask+0x8c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045b6:	2301      	movs	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	24000de0 	.word	0x24000de0
 80045e4:	080058f8 	.word	0x080058f8
 80045e8:	08004725 	.word	0x08004725
 80045ec:	24000de4 	.word	0x24000de4

080045f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	623b      	str	r3, [r7, #32]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800461e:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <xTimerGenericCommand+0x98>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02a      	beq.n	800467c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b05      	cmp	r3, #5
 8004636:	dc18      	bgt.n	800466a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004638:	f7ff feb2 	bl	80043a0 <xTaskGetSchedulerState>
 800463c:	4603      	mov	r3, r0
 800463e:	2b02      	cmp	r3, #2
 8004640:	d109      	bne.n	8004656 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <xTimerGenericCommand+0x98>)
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	f107 0110 	add.w	r1, r7, #16
 800464a:	2300      	movs	r3, #0
 800464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464e:	f7fe fb9f 	bl	8002d90 <xQueueGenericSend>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24
 8004654:	e012      	b.n	800467c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <xTimerGenericCommand+0x98>)
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	f107 0110 	add.w	r1, r7, #16
 800465e:	2300      	movs	r3, #0
 8004660:	2200      	movs	r2, #0
 8004662:	f7fe fb95 	bl	8002d90 <xQueueGenericSend>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24
 8004668:	e008      	b.n	800467c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <xTimerGenericCommand+0x98>)
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	f107 0110 	add.w	r1, r7, #16
 8004672:	2300      	movs	r3, #0
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	f7fe fc89 	bl	8002f8c <xQueueGenericSendFromISR>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800467e:	4618      	mov	r0, r3
 8004680:	3728      	adds	r7, #40	; 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	24000de0 	.word	0x24000de0

0800468c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <prvProcessExpiredTimer+0x94>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe fa45 	bl	8002b34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d022      	beq.n	80046fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	18d1      	adds	r1, r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	6978      	ldr	r0, [r7, #20]
 80046c6:	f000 f8d1 	bl	800486c <prvInsertTimerInActiveList>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01f      	beq.n	8004710 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046d0:	2300      	movs	r3, #0
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	2100      	movs	r1, #0
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f7ff ff88 	bl	80045f0 <xTimerGenericCommand>
 80046e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	4798      	blx	r3
}
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	24000dd8 	.word	0x24000dd8

08004724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800472c:	f107 0308 	add.w	r3, r7, #8
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f857 	bl	80047e4 <prvGetNextExpireTime>
 8004736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4619      	mov	r1, r3
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f803 	bl	8004748 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004742:	f000 f8d5 	bl	80048f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004746:	e7f1      	b.n	800472c <prvTimerTask+0x8>

08004748 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004752:	f7ff fa39 	bl	8003bc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f866 	bl	800482c <prvSampleTimeNow>
 8004760:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d130      	bne.n	80047ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <prvProcessTimerOrBlockTask+0x3c>
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	429a      	cmp	r2, r3
 8004774:	d806      	bhi.n	8004784 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004776:	f7ff fa35 	bl	8003be4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff85 	bl	800468c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004782:	e024      	b.n	80047ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <prvProcessTimerOrBlockTask+0x90>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <prvProcessTimerOrBlockTask+0x50>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <prvProcessTimerOrBlockTask+0x52>
 8004798:	2300      	movs	r3, #0
 800479a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <prvProcessTimerOrBlockTask+0x94>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7fe fea5 	bl	80034f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047ae:	f7ff fa19 	bl	8003be4 <xTaskResumeAll>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <prvProcessTimerOrBlockTask+0x98>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
}
 80047c8:	e001      	b.n	80047ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047ca:	f7ff fa0b 	bl	8003be4 <xTaskResumeAll>
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	24000ddc 	.word	0x24000ddc
 80047dc:	24000de0 	.word	0x24000de0
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <prvGetNextExpireTime+0x44>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <prvGetNextExpireTime+0x16>
 80047f6:	2201      	movs	r2, #1
 80047f8:	e000      	b.n	80047fc <prvGetNextExpireTime+0x18>
 80047fa:	2200      	movs	r2, #0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <prvGetNextExpireTime+0x44>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e001      	b.n	8004818 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004818:	68fb      	ldr	r3, [r7, #12]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	24000dd8 	.word	0x24000dd8

0800482c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004834:	f7ff fa74 	bl	8003d20 <xTaskGetTickCount>
 8004838:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <prvSampleTimeNow+0x3c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	429a      	cmp	r2, r3
 8004842:	d205      	bcs.n	8004850 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004844:	f000 f936 	bl	8004ab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e002      	b.n	8004856 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004856:	4a04      	ldr	r2, [pc, #16]	; (8004868 <prvSampleTimeNow+0x3c>)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	24000de8 	.word	0x24000de8

0800486c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d812      	bhi.n	80048b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	1ad2      	subs	r2, r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e01b      	b.n	80048de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <prvInsertTimerInActiveList+0x7c>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7fe f906 	bl	8002ac2 <vListInsert>
 80048b6:	e012      	b.n	80048de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d206      	bcs.n	80048ce <prvInsertTimerInActiveList+0x62>
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e007      	b.n	80048de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <prvInsertTimerInActiveList+0x80>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f7fe f8f2 	bl	8002ac2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	24000ddc 	.word	0x24000ddc
 80048ec:	24000dd8 	.word	0x24000dd8

080048f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08e      	sub	sp, #56	; 0x38
 80048f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048f6:	e0ca      	b.n	8004a8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da18      	bge.n	8004930 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	3304      	adds	r3, #4
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61fb      	str	r3, [r7, #28]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004926:	6850      	ldr	r0, [r2, #4]
 8004928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492a:	6892      	ldr	r2, [r2, #8]
 800492c:	4611      	mov	r1, r2
 800492e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f2c0 80aa 	blt.w	8004a8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe f8f3 	bl	8002b34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800494e:	463b      	mov	r3, r7
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff6b 	bl	800482c <prvSampleTimeNow>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b09      	cmp	r3, #9
 800495c:	f200 8097 	bhi.w	8004a8e <prvProcessReceivedCommands+0x19e>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <prvProcessReceivedCommands+0x78>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004991 	.word	0x08004991
 800496c:	08004991 	.word	0x08004991
 8004970:	08004991 	.word	0x08004991
 8004974:	08004a05 	.word	0x08004a05
 8004978:	08004a19 	.word	0x08004a19
 800497c:	08004a63 	.word	0x08004a63
 8004980:	08004991 	.word	0x08004991
 8004984:	08004991 	.word	0x08004991
 8004988:	08004a05 	.word	0x08004a05
 800498c:	08004a19 	.word	0x08004a19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	18d1      	adds	r1, r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f7ff ff5c 	bl	800486c <prvInsertTimerInActiveList>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d069      	beq.n	8004a8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d05e      	beq.n	8004a8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	441a      	add	r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2300      	movs	r3, #0
 80049de:	2100      	movs	r1, #0
 80049e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e2:	f7ff fe05 	bl	80045f0 <xTimerGenericCommand>
 80049e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d14f      	bne.n	8004a8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	61bb      	str	r3, [r7, #24]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a16:	e03a      	b.n	8004a8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	617b      	str	r3, [r7, #20]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	18d1      	adds	r1, r2, r3
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5c:	f7ff ff06 	bl	800486c <prvInsertTimerInActiveList>
					break;
 8004a60:	e015      	b.n	8004a8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a72:	f000 fbdd 	bl	8005230 <vPortFree>
 8004a76:	e00a      	b.n	8004a8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a8a:	e000      	b.n	8004a8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <prvProcessReceivedCommands+0x1c0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1d39      	adds	r1, r7, #4
 8004a94:	2200      	movs	r2, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fb14 	bl	80030c4 <xQueueReceive>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f47f af2a 	bne.w	80048f8 <prvProcessReceivedCommands+0x8>
	}
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3730      	adds	r7, #48	; 0x30
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	24000de0 	.word	0x24000de0

08004ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aba:	e048      	b.n	8004b4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004abc:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <prvSwitchTimerLists+0xc0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac6:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <prvSwitchTimerLists+0xc0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe f82d 	bl	8002b34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02e      	beq.n	8004b4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90e      	bls.n	8004b20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0e:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <prvSwitchTimerLists+0xc0>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f7fd ffd2 	bl	8002ac2 <vListInsert>
 8004b1e:	e016      	b.n	8004b4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	2100      	movs	r1, #0
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff fd60 	bl	80045f0 <xTimerGenericCommand>
 8004b30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	603b      	str	r3, [r7, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <prvSwitchTimerLists+0xc0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1b1      	bne.n	8004abc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <prvSwitchTimerLists+0xc0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <prvSwitchTimerLists+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <prvSwitchTimerLists+0xc0>)
 8004b64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <prvSwitchTimerLists+0xc4>)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	6013      	str	r3, [r2, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	24000dd8 	.word	0x24000dd8
 8004b78:	24000ddc 	.word	0x24000ddc

08004b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b82:	f000 f967 	bl	8004e54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d120      	bne.n	8004bd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b8e:	4814      	ldr	r0, [pc, #80]	; (8004be0 <prvCheckForValidListAndQueue+0x64>)
 8004b90:	f7fd ff46 	bl	8002a20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b94:	4813      	ldr	r0, [pc, #76]	; (8004be4 <prvCheckForValidListAndQueue+0x68>)
 8004b96:	f7fd ff43 	bl	8002a20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <prvCheckForValidListAndQueue+0x6c>)
 8004b9c:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <prvCheckForValidListAndQueue+0x64>)
 8004b9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <prvCheckForValidListAndQueue+0x70>)
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <prvCheckForValidListAndQueue+0x68>)
 8004ba4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <prvCheckForValidListAndQueue+0x74>)
 8004bac:	4a11      	ldr	r2, [pc, #68]	; (8004bf4 <prvCheckForValidListAndQueue+0x78>)
 8004bae:	2110      	movs	r1, #16
 8004bb0:	200a      	movs	r0, #10
 8004bb2:	f7fe f851 	bl	8002c58 <xQueueGenericCreateStatic>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004bba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <prvCheckForValidListAndQueue+0x60>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	490b      	ldr	r1, [pc, #44]	; (8004bf8 <prvCheckForValidListAndQueue+0x7c>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fc6a 	bl	80034a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bd0:	f000 f970 	bl	8004eb4 <vPortExitCritical>
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	24000de0 	.word	0x24000de0
 8004be0:	24000db0 	.word	0x24000db0
 8004be4:	24000dc4 	.word	0x24000dc4
 8004be8:	24000dd8 	.word	0x24000dd8
 8004bec:	24000ddc 	.word	0x24000ddc
 8004bf0:	24000e8c 	.word	0x24000e8c
 8004bf4:	24000dec 	.word	0x24000dec
 8004bf8:	08005900 	.word	0x08005900

08004bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3b04      	subs	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c2c:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <pxPortInitialiseStack+0x64>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b14      	subs	r3, #20
 8004c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b04      	subs	r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f06f 0202 	mvn.w	r2, #2
 8004c4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3b20      	subs	r3, #32
 8004c50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	08004c65 	.word	0x08004c65

08004c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <prvTaskExitError+0x54>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c76:	d00a      	beq.n	8004c8e <prvTaskExitError+0x2a>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	60fb      	str	r3, [r7, #12]
}
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <prvTaskExitError+0x28>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60bb      	str	r3, [r7, #8]
}
 8004ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ca2:	bf00      	nop
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0fc      	beq.n	8004ca4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	24000010 	.word	0x24000010
 8004cbc:	00000000 	.word	0x00000000

08004cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <pxCurrentTCBConst2>)
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	6808      	ldr	r0, [r1, #0]
 8004cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cca:	f380 8809 	msr	PSP, r0
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f380 8811 	msr	BASEPRI, r0
 8004cda:	4770      	bx	lr
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst2>:
 8004ce0:	240008b0 	.word	0x240008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ce8:	4808      	ldr	r0, [pc, #32]	; (8004d0c <prvPortStartFirstTask+0x24>)
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	6800      	ldr	r0, [r0, #0]
 8004cee:	f380 8808 	msr	MSP, r0
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8814 	msr	CONTROL, r0
 8004cfa:	b662      	cpsie	i
 8004cfc:	b661      	cpsie	f
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	df00      	svc	0
 8004d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed08 	.word	0xe000ed08

08004d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <xPortStartScheduler+0x120>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a46      	ldr	r2, [pc, #280]	; (8004e34 <xPortStartScheduler+0x124>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10a      	bne.n	8004d36 <xPortStartScheduler+0x26>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	613b      	str	r3, [r7, #16]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d36:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <xPortStartScheduler+0x120>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <xPortStartScheduler+0x128>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10a      	bne.n	8004d56 <xPortStartScheduler+0x46>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <xPortStartScheduler+0x12c>)
 8004d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <xPortStartScheduler+0x130>)
 8004d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <xPortStartScheduler+0x134>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d84:	e009      	b.n	8004d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d86:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <xPortStartScheduler+0x134>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <xPortStartScheduler+0x134>)
 8004d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d0ef      	beq.n	8004d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004da6:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <xPortStartScheduler+0x134>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1c3 0307 	rsb	r3, r3, #7
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00a      	beq.n	8004dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <xPortStartScheduler+0x134>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <xPortStartScheduler+0x134>)
 8004dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <xPortStartScheduler+0x134>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <xPortStartScheduler+0x134>)
 8004ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004de6:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <xPortStartScheduler+0x138>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <xPortStartScheduler+0x138>)
 8004dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <xPortStartScheduler+0x138>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <xPortStartScheduler+0x138>)
 8004df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dfe:	f000 f8dd 	bl	8004fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <xPortStartScheduler+0x13c>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e08:	f000 f8fc 	bl	8005004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e0c:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <xPortStartScheduler+0x140>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <xPortStartScheduler+0x140>)
 8004e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e18:	f7ff ff66 	bl	8004ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e1c:	f7ff f84a 	bl	8003eb4 <vTaskSwitchContext>
	prvTaskExitError();
 8004e20:	f7ff ff20 	bl	8004c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	e000ed00 	.word	0xe000ed00
 8004e34:	410fc271 	.word	0x410fc271
 8004e38:	410fc270 	.word	0x410fc270
 8004e3c:	e000e400 	.word	0xe000e400
 8004e40:	24000edc 	.word	0x24000edc
 8004e44:	24000ee0 	.word	0x24000ee0
 8004e48:	e000ed20 	.word	0xe000ed20
 8004e4c:	24000010 	.word	0x24000010
 8004e50:	e000ef34 	.word	0xe000ef34

08004e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	607b      	str	r3, [r7, #4]
}
 8004e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <vPortEnterCritical+0x58>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <vPortEnterCritical+0x58>)
 8004e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <vPortEnterCritical+0x58>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10f      	bne.n	8004ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <vPortEnterCritical+0x5c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	603b      	str	r3, [r7, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <vPortEnterCritical+0x4a>
	}
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	24000010 	.word	0x24000010
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <vPortExitCritical+0x50>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <vPortExitCritical+0x24>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	607b      	str	r3, [r7, #4]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <vPortExitCritical+0x50>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <vPortExitCritical+0x50>)
 8004ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <vPortExitCritical+0x50>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <vPortExitCritical+0x42>
 8004eea:	2300      	movs	r3, #0
 8004eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f383 8811 	msr	BASEPRI, r3
}
 8004ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	24000010 	.word	0x24000010
	...

08004f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <pxCurrentTCBConst>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f01e 0f10 	tst.w	lr, #16
 8004f20:	bf08      	it	eq
 8004f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f34:	f380 8811 	msr	BASEPRI, r0
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f7fe ffb8 	bl	8003eb4 <vTaskSwitchContext>
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f380 8811 	msr	BASEPRI, r0
 8004f4c:	bc09      	pop	{r0, r3}
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	6808      	ldr	r0, [r1, #0]
 8004f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f56:	f01e 0f10 	tst.w	lr, #16
 8004f5a:	bf08      	it	eq
 8004f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f60:	f380 8809 	msr	PSP, r0
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst>:
 8004f70:	240008b0 	.word	0x240008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f92:	f7fe fed5 	bl	8003d40 <xTaskIncrementTick>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <xPortSysTickHandler+0x40>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f383 8811 	msr	BASEPRI, r3
}
 8004fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <vPortSetupTimerInterrupt+0x34>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <vPortSetupTimerInterrupt+0x38>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <vPortSetupTimerInterrupt+0x3c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <vPortSetupTimerInterrupt+0x40>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	099b      	lsrs	r3, r3, #6
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <vPortSetupTimerInterrupt+0x44>)
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <vPortSetupTimerInterrupt+0x34>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e000e010 	.word	0xe000e010
 8004ff4:	e000e018 	.word	0xe000e018
 8004ff8:	24000000 	.word	0x24000000
 8004ffc:	10624dd3 	.word	0x10624dd3
 8005000:	e000e014 	.word	0xe000e014

08005004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005014 <vPortEnableVFP+0x10>
 8005008:	6801      	ldr	r1, [r0, #0]
 800500a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800500e:	6001      	str	r1, [r0, #0]
 8005010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005012:	bf00      	nop
 8005014:	e000ed88 	.word	0xe000ed88

08005018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800501e:	f3ef 8305 	mrs	r3, IPSR
 8005022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d914      	bls.n	8005054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <vPortValidateInterruptPriority+0x70>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <vPortValidateInterruptPriority+0x74>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	7afa      	ldrb	r2, [r7, #11]
 800503a:	429a      	cmp	r2, r3
 800503c:	d20a      	bcs.n	8005054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <vPortValidateInterruptPriority+0x78>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800505c:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <vPortValidateInterruptPriority+0x7c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d90a      	bls.n	800507a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	603b      	str	r3, [r7, #0]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <vPortValidateInterruptPriority+0x60>
	}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000e3f0 	.word	0xe000e3f0
 800508c:	24000edc 	.word	0x24000edc
 8005090:	e000ed0c 	.word	0xe000ed0c
 8005094:	24000ee0 	.word	0x24000ee0

08005098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050a4:	f7fe fd90 	bl	8003bc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050a8:	4b5b      	ldr	r3, [pc, #364]	; (8005218 <pvPortMalloc+0x180>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050b0:	f000 f920 	bl	80052f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050b4:	4b59      	ldr	r3, [pc, #356]	; (800521c <pvPortMalloc+0x184>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 8093 	bne.w	80051e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01d      	beq.n	8005104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050c8:	2208      	movs	r2, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d014      	beq.n	8005104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f023 0307 	bic.w	r3, r3, #7
 80050e0:	3308      	adds	r3, #8
 80050e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <pvPortMalloc+0x6c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	617b      	str	r3, [r7, #20]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d06e      	beq.n	80051e8 <pvPortMalloc+0x150>
 800510a:	4b45      	ldr	r3, [pc, #276]	; (8005220 <pvPortMalloc+0x188>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d869      	bhi.n	80051e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <pvPortMalloc+0x18c>)
 8005116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <pvPortMalloc+0x18c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800511e:	e004      	b.n	800512a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d903      	bls.n	800513c <pvPortMalloc+0xa4>
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f1      	bne.n	8005120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800513c:	4b36      	ldr	r3, [pc, #216]	; (8005218 <pvPortMalloc+0x180>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	429a      	cmp	r2, r3
 8005144:	d050      	beq.n	80051e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2208      	movs	r2, #8
 800514c:	4413      	add	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	2308      	movs	r3, #8
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	429a      	cmp	r2, r3
 8005166:	d91f      	bls.n	80051a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <pvPortMalloc+0xf8>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	613b      	str	r3, [r7, #16]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051a2:	69b8      	ldr	r0, [r7, #24]
 80051a4:	f000 f908 	bl	80053b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051a8:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <pvPortMalloc+0x188>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <pvPortMalloc+0x188>)
 80051b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <pvPortMalloc+0x188>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <pvPortMalloc+0x190>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d203      	bcs.n	80051ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <pvPortMalloc+0x188>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <pvPortMalloc+0x190>)
 80051c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <pvPortMalloc+0x184>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <pvPortMalloc+0x194>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <pvPortMalloc+0x194>)
 80051e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051e8:	f7fe fcfc 	bl	8003be4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <pvPortMalloc+0x174>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	60fb      	str	r3, [r7, #12]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <pvPortMalloc+0x172>
	return pvReturn;
 800520c:	69fb      	ldr	r3, [r7, #28]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3728      	adds	r7, #40	; 0x28
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	24004aec 	.word	0x24004aec
 800521c:	24004b00 	.word	0x24004b00
 8005220:	24004af0 	.word	0x24004af0
 8005224:	24004ae4 	.word	0x24004ae4
 8005228:	24004af4 	.word	0x24004af4
 800522c:	24004af8 	.word	0x24004af8

08005230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04d      	beq.n	80052de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005242:	2308      	movs	r3, #8
 8005244:	425b      	negs	r3, r3
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <vPortFree+0xb8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <vPortFree+0x44>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60fb      	str	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <vPortFree+0x62>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60bb      	str	r3, [r7, #8]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <vPortFree+0xb8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01e      	beq.n	80052de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11a      	bne.n	80052de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <vPortFree+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052b8:	f7fe fc86 	bl	8003bc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <vPortFree+0xbc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	4a09      	ldr	r2, [pc, #36]	; (80052ec <vPortFree+0xbc>)
 80052c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ca:	6938      	ldr	r0, [r7, #16]
 80052cc:	f000 f874 	bl	80053b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <vPortFree+0xc0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <vPortFree+0xc0>)
 80052d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052da:	f7fe fc83 	bl	8003be4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	24004b00 	.word	0x24004b00
 80052ec:	24004af0 	.word	0x24004af0
 80052f0:	24004afc 	.word	0x24004afc

080052f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <prvHeapInit+0xac>)
 8005302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3307      	adds	r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <prvHeapInit+0xac>)
 8005324:	4413      	add	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <prvHeapInit+0xb0>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <prvHeapInit+0xb0>)
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005340:	2208      	movs	r2, #8
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0307 	bic.w	r3, r3, #7
 800534e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <prvHeapInit+0xb4>)
 8005354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <prvHeapInit+0xb4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <prvHeapInit+0xb4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <prvHeapInit+0xb4>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <prvHeapInit+0xb8>)
 8005382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <prvHeapInit+0xbc>)
 800538a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <prvHeapInit+0xc0>)
 800538e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	24000ee4 	.word	0x24000ee4
 80053a4:	24004ae4 	.word	0x24004ae4
 80053a8:	24004aec 	.word	0x24004aec
 80053ac:	24004af4 	.word	0x24004af4
 80053b0:	24004af0 	.word	0x24004af0
 80053b4:	24004b00 	.word	0x24004b00

080053b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <prvInsertBlockIntoFreeList+0xac>)
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e002      	b.n	80053cc <prvInsertBlockIntoFreeList+0x14>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d8f7      	bhi.n	80053c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4413      	add	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d108      	bne.n	80053fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d118      	bne.n	8005440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b15      	ldr	r3, [pc, #84]	; (8005468 <prvInsertBlockIntoFreeList+0xb0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d00d      	beq.n	8005436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e008      	b.n	8005448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <prvInsertBlockIntoFreeList+0xb0>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e003      	b.n	8005448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d002      	beq.n	8005456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	24004ae4 	.word	0x24004ae4
 8005468:	24004aec 	.word	0x24004aec

0800546c <_Znwj>:
 800546c:	2801      	cmp	r0, #1
 800546e:	bf38      	it	cc
 8005470:	2001      	movcc	r0, #1
 8005472:	b510      	push	{r4, lr}
 8005474:	4604      	mov	r4, r0
 8005476:	4620      	mov	r0, r4
 8005478:	f000 f85a 	bl	8005530 <malloc>
 800547c:	b930      	cbnz	r0, 800548c <_Znwj+0x20>
 800547e:	f000 f81b 	bl	80054b8 <_ZSt15get_new_handlerv>
 8005482:	b908      	cbnz	r0, 8005488 <_Znwj+0x1c>
 8005484:	f000 f820 	bl	80054c8 <abort>
 8005488:	4780      	blx	r0
 800548a:	e7f4      	b.n	8005476 <_Znwj+0xa>
 800548c:	bd10      	pop	{r4, pc}

0800548e <__cxa_pure_virtual>:
 800548e:	b508      	push	{r3, lr}
 8005490:	f000 f80c 	bl	80054ac <_ZSt9terminatev>

08005494 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005494:	b508      	push	{r3, lr}
 8005496:	4780      	blx	r0
 8005498:	f000 f816 	bl	80054c8 <abort>

0800549c <_ZSt13get_terminatev>:
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <_ZSt13get_terminatev+0xc>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	f3bf 8f5b 	dmb	ish
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	24000014 	.word	0x24000014

080054ac <_ZSt9terminatev>:
 80054ac:	b508      	push	{r3, lr}
 80054ae:	f7ff fff5 	bl	800549c <_ZSt13get_terminatev>
 80054b2:	f7ff ffef 	bl	8005494 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080054b8 <_ZSt15get_new_handlerv>:
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <_ZSt15get_new_handlerv+0xc>)
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	f3bf 8f5b 	dmb	ish
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	24004b04 	.word	0x24004b04

080054c8 <abort>:
 80054c8:	b508      	push	{r3, lr}
 80054ca:	2006      	movs	r0, #6
 80054cc:	f000 f9d0 	bl	8005870 <raise>
 80054d0:	2001      	movs	r0, #1
 80054d2:	f7fb fa95 	bl	8000a00 <_exit>
	...

080054d8 <__errno>:
 80054d8:	4b01      	ldr	r3, [pc, #4]	; (80054e0 <__errno+0x8>)
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	24000018 	.word	0x24000018

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f9e2 	bl	80058c0 <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	080059d8 	.word	0x080059d8
 8005520:	080059d8 	.word	0x080059d8
 8005524:	080059d8 	.word	0x080059d8
 8005528:	080059dc 	.word	0x080059dc

0800552c <__retarget_lock_acquire_recursive>:
 800552c:	4770      	bx	lr

0800552e <__retarget_lock_release_recursive>:
 800552e:	4770      	bx	lr

08005530 <malloc>:
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <malloc+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f000 b885 	b.w	8005644 <_malloc_r>
 800553a:	bf00      	nop
 800553c:	24000018 	.word	0x24000018

08005540 <memcpy>:
 8005540:	440a      	add	r2, r1
 8005542:	4291      	cmp	r1, r2
 8005544:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005548:	d100      	bne.n	800554c <memcpy+0xc>
 800554a:	4770      	bx	lr
 800554c:	b510      	push	{r4, lr}
 800554e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005556:	4291      	cmp	r1, r2
 8005558:	d1f9      	bne.n	800554e <memcpy+0xe>
 800555a:	bd10      	pop	{r4, pc}

0800555c <memset>:
 800555c:	4402      	add	r2, r0
 800555e:	4603      	mov	r3, r0
 8005560:	4293      	cmp	r3, r2
 8005562:	d100      	bne.n	8005566 <memset+0xa>
 8005564:	4770      	bx	lr
 8005566:	f803 1b01 	strb.w	r1, [r3], #1
 800556a:	e7f9      	b.n	8005560 <memset+0x4>

0800556c <_free_r>:
 800556c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800556e:	2900      	cmp	r1, #0
 8005570:	d044      	beq.n	80055fc <_free_r+0x90>
 8005572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005576:	9001      	str	r0, [sp, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f1a1 0404 	sub.w	r4, r1, #4
 800557e:	bfb8      	it	lt
 8005580:	18e4      	addlt	r4, r4, r3
 8005582:	f000 f991 	bl	80058a8 <__malloc_lock>
 8005586:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <_free_r+0x94>)
 8005588:	9801      	ldr	r0, [sp, #4]
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	b933      	cbnz	r3, 800559c <_free_r+0x30>
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	6014      	str	r4, [r2, #0]
 8005592:	b003      	add	sp, #12
 8005594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005598:	f000 b98c 	b.w	80058b4 <__malloc_unlock>
 800559c:	42a3      	cmp	r3, r4
 800559e:	d908      	bls.n	80055b2 <_free_r+0x46>
 80055a0:	6825      	ldr	r5, [r4, #0]
 80055a2:	1961      	adds	r1, r4, r5
 80055a4:	428b      	cmp	r3, r1
 80055a6:	bf01      	itttt	eq
 80055a8:	6819      	ldreq	r1, [r3, #0]
 80055aa:	685b      	ldreq	r3, [r3, #4]
 80055ac:	1949      	addeq	r1, r1, r5
 80055ae:	6021      	streq	r1, [r4, #0]
 80055b0:	e7ed      	b.n	800558e <_free_r+0x22>
 80055b2:	461a      	mov	r2, r3
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b10b      	cbz	r3, 80055bc <_free_r+0x50>
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	d9fa      	bls.n	80055b2 <_free_r+0x46>
 80055bc:	6811      	ldr	r1, [r2, #0]
 80055be:	1855      	adds	r5, r2, r1
 80055c0:	42a5      	cmp	r5, r4
 80055c2:	d10b      	bne.n	80055dc <_free_r+0x70>
 80055c4:	6824      	ldr	r4, [r4, #0]
 80055c6:	4421      	add	r1, r4
 80055c8:	1854      	adds	r4, r2, r1
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	d1e0      	bne.n	8005592 <_free_r+0x26>
 80055d0:	681c      	ldr	r4, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	6053      	str	r3, [r2, #4]
 80055d6:	4421      	add	r1, r4
 80055d8:	6011      	str	r1, [r2, #0]
 80055da:	e7da      	b.n	8005592 <_free_r+0x26>
 80055dc:	d902      	bls.n	80055e4 <_free_r+0x78>
 80055de:	230c      	movs	r3, #12
 80055e0:	6003      	str	r3, [r0, #0]
 80055e2:	e7d6      	b.n	8005592 <_free_r+0x26>
 80055e4:	6825      	ldr	r5, [r4, #0]
 80055e6:	1961      	adds	r1, r4, r5
 80055e8:	428b      	cmp	r3, r1
 80055ea:	bf04      	itt	eq
 80055ec:	6819      	ldreq	r1, [r3, #0]
 80055ee:	685b      	ldreq	r3, [r3, #4]
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	bf04      	itt	eq
 80055f4:	1949      	addeq	r1, r1, r5
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	6054      	str	r4, [r2, #4]
 80055fa:	e7ca      	b.n	8005592 <_free_r+0x26>
 80055fc:	b003      	add	sp, #12
 80055fe:	bd30      	pop	{r4, r5, pc}
 8005600:	24004b0c 	.word	0x24004b0c

08005604 <sbrk_aligned>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	4e0e      	ldr	r6, [pc, #56]	; (8005640 <sbrk_aligned+0x3c>)
 8005608:	460c      	mov	r4, r1
 800560a:	6831      	ldr	r1, [r6, #0]
 800560c:	4605      	mov	r5, r0
 800560e:	b911      	cbnz	r1, 8005616 <sbrk_aligned+0x12>
 8005610:	f000 f8f6 	bl	8005800 <_sbrk_r>
 8005614:	6030      	str	r0, [r6, #0]
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f8f1 	bl	8005800 <_sbrk_r>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d00a      	beq.n	8005638 <sbrk_aligned+0x34>
 8005622:	1cc4      	adds	r4, r0, #3
 8005624:	f024 0403 	bic.w	r4, r4, #3
 8005628:	42a0      	cmp	r0, r4
 800562a:	d007      	beq.n	800563c <sbrk_aligned+0x38>
 800562c:	1a21      	subs	r1, r4, r0
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f8e6 	bl	8005800 <_sbrk_r>
 8005634:	3001      	adds	r0, #1
 8005636:	d101      	bne.n	800563c <sbrk_aligned+0x38>
 8005638:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800563c:	4620      	mov	r0, r4
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	24004b10 	.word	0x24004b10

08005644 <_malloc_r>:
 8005644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005648:	1ccd      	adds	r5, r1, #3
 800564a:	f025 0503 	bic.w	r5, r5, #3
 800564e:	3508      	adds	r5, #8
 8005650:	2d0c      	cmp	r5, #12
 8005652:	bf38      	it	cc
 8005654:	250c      	movcc	r5, #12
 8005656:	2d00      	cmp	r5, #0
 8005658:	4607      	mov	r7, r0
 800565a:	db01      	blt.n	8005660 <_malloc_r+0x1c>
 800565c:	42a9      	cmp	r1, r5
 800565e:	d905      	bls.n	800566c <_malloc_r+0x28>
 8005660:	230c      	movs	r3, #12
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	2600      	movs	r6, #0
 8005666:	4630      	mov	r0, r6
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566c:	4e2e      	ldr	r6, [pc, #184]	; (8005728 <_malloc_r+0xe4>)
 800566e:	f000 f91b 	bl	80058a8 <__malloc_lock>
 8005672:	6833      	ldr	r3, [r6, #0]
 8005674:	461c      	mov	r4, r3
 8005676:	bb34      	cbnz	r4, 80056c6 <_malloc_r+0x82>
 8005678:	4629      	mov	r1, r5
 800567a:	4638      	mov	r0, r7
 800567c:	f7ff ffc2 	bl	8005604 <sbrk_aligned>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	4604      	mov	r4, r0
 8005684:	d14d      	bne.n	8005722 <_malloc_r+0xde>
 8005686:	6834      	ldr	r4, [r6, #0]
 8005688:	4626      	mov	r6, r4
 800568a:	2e00      	cmp	r6, #0
 800568c:	d140      	bne.n	8005710 <_malloc_r+0xcc>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	4631      	mov	r1, r6
 8005692:	4638      	mov	r0, r7
 8005694:	eb04 0803 	add.w	r8, r4, r3
 8005698:	f000 f8b2 	bl	8005800 <_sbrk_r>
 800569c:	4580      	cmp	r8, r0
 800569e:	d13a      	bne.n	8005716 <_malloc_r+0xd2>
 80056a0:	6821      	ldr	r1, [r4, #0]
 80056a2:	3503      	adds	r5, #3
 80056a4:	1a6d      	subs	r5, r5, r1
 80056a6:	f025 0503 	bic.w	r5, r5, #3
 80056aa:	3508      	adds	r5, #8
 80056ac:	2d0c      	cmp	r5, #12
 80056ae:	bf38      	it	cc
 80056b0:	250c      	movcc	r5, #12
 80056b2:	4629      	mov	r1, r5
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff ffa5 	bl	8005604 <sbrk_aligned>
 80056ba:	3001      	adds	r0, #1
 80056bc:	d02b      	beq.n	8005716 <_malloc_r+0xd2>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	442b      	add	r3, r5
 80056c2:	6023      	str	r3, [r4, #0]
 80056c4:	e00e      	b.n	80056e4 <_malloc_r+0xa0>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	1b52      	subs	r2, r2, r5
 80056ca:	d41e      	bmi.n	800570a <_malloc_r+0xc6>
 80056cc:	2a0b      	cmp	r2, #11
 80056ce:	d916      	bls.n	80056fe <_malloc_r+0xba>
 80056d0:	1961      	adds	r1, r4, r5
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	6025      	str	r5, [r4, #0]
 80056d6:	bf18      	it	ne
 80056d8:	6059      	strne	r1, [r3, #4]
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	bf08      	it	eq
 80056de:	6031      	streq	r1, [r6, #0]
 80056e0:	5162      	str	r2, [r4, r5]
 80056e2:	604b      	str	r3, [r1, #4]
 80056e4:	4638      	mov	r0, r7
 80056e6:	f104 060b 	add.w	r6, r4, #11
 80056ea:	f000 f8e3 	bl	80058b4 <__malloc_unlock>
 80056ee:	f026 0607 	bic.w	r6, r6, #7
 80056f2:	1d23      	adds	r3, r4, #4
 80056f4:	1af2      	subs	r2, r6, r3
 80056f6:	d0b6      	beq.n	8005666 <_malloc_r+0x22>
 80056f8:	1b9b      	subs	r3, r3, r6
 80056fa:	50a3      	str	r3, [r4, r2]
 80056fc:	e7b3      	b.n	8005666 <_malloc_r+0x22>
 80056fe:	6862      	ldr	r2, [r4, #4]
 8005700:	42a3      	cmp	r3, r4
 8005702:	bf0c      	ite	eq
 8005704:	6032      	streq	r2, [r6, #0]
 8005706:	605a      	strne	r2, [r3, #4]
 8005708:	e7ec      	b.n	80056e4 <_malloc_r+0xa0>
 800570a:	4623      	mov	r3, r4
 800570c:	6864      	ldr	r4, [r4, #4]
 800570e:	e7b2      	b.n	8005676 <_malloc_r+0x32>
 8005710:	4634      	mov	r4, r6
 8005712:	6876      	ldr	r6, [r6, #4]
 8005714:	e7b9      	b.n	800568a <_malloc_r+0x46>
 8005716:	230c      	movs	r3, #12
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4638      	mov	r0, r7
 800571c:	f000 f8ca 	bl	80058b4 <__malloc_unlock>
 8005720:	e7a1      	b.n	8005666 <_malloc_r+0x22>
 8005722:	6025      	str	r5, [r4, #0]
 8005724:	e7de      	b.n	80056e4 <_malloc_r+0xa0>
 8005726:	bf00      	nop
 8005728:	24004b0c 	.word	0x24004b0c

0800572c <cleanup_glue>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	460c      	mov	r4, r1
 8005730:	6809      	ldr	r1, [r1, #0]
 8005732:	4605      	mov	r5, r0
 8005734:	b109      	cbz	r1, 800573a <cleanup_glue+0xe>
 8005736:	f7ff fff9 	bl	800572c <cleanup_glue>
 800573a:	4621      	mov	r1, r4
 800573c:	4628      	mov	r0, r5
 800573e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005742:	f7ff bf13 	b.w	800556c <_free_r>
	...

08005748 <_reclaim_reent>:
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <_reclaim_reent+0xb4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4283      	cmp	r3, r0
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	d051      	beq.n	80057f8 <_reclaim_reent+0xb0>
 8005754:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005756:	b143      	cbz	r3, 800576a <_reclaim_reent+0x22>
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d14a      	bne.n	80057f4 <_reclaim_reent+0xac>
 800575e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	b111      	cbz	r1, 800576a <_reclaim_reent+0x22>
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ff01 	bl	800556c <_free_r>
 800576a:	6961      	ldr	r1, [r4, #20]
 800576c:	b111      	cbz	r1, 8005774 <_reclaim_reent+0x2c>
 800576e:	4620      	mov	r0, r4
 8005770:	f7ff fefc 	bl	800556c <_free_r>
 8005774:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005776:	b111      	cbz	r1, 800577e <_reclaim_reent+0x36>
 8005778:	4620      	mov	r0, r4
 800577a:	f7ff fef7 	bl	800556c <_free_r>
 800577e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005780:	b111      	cbz	r1, 8005788 <_reclaim_reent+0x40>
 8005782:	4620      	mov	r0, r4
 8005784:	f7ff fef2 	bl	800556c <_free_r>
 8005788:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800578a:	b111      	cbz	r1, 8005792 <_reclaim_reent+0x4a>
 800578c:	4620      	mov	r0, r4
 800578e:	f7ff feed 	bl	800556c <_free_r>
 8005792:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005794:	b111      	cbz	r1, 800579c <_reclaim_reent+0x54>
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff fee8 	bl	800556c <_free_r>
 800579c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800579e:	b111      	cbz	r1, 80057a6 <_reclaim_reent+0x5e>
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7ff fee3 	bl	800556c <_free_r>
 80057a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80057a8:	b111      	cbz	r1, 80057b0 <_reclaim_reent+0x68>
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7ff fede 	bl	800556c <_free_r>
 80057b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b2:	b111      	cbz	r1, 80057ba <_reclaim_reent+0x72>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff fed9 	bl	800556c <_free_r>
 80057ba:	69a3      	ldr	r3, [r4, #24]
 80057bc:	b1e3      	cbz	r3, 80057f8 <_reclaim_reent+0xb0>
 80057be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057c0:	4620      	mov	r0, r4
 80057c2:	4798      	blx	r3
 80057c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057c6:	b1b9      	cbz	r1, 80057f8 <_reclaim_reent+0xb0>
 80057c8:	4620      	mov	r0, r4
 80057ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057ce:	f7ff bfad 	b.w	800572c <cleanup_glue>
 80057d2:	5949      	ldr	r1, [r1, r5]
 80057d4:	b941      	cbnz	r1, 80057e8 <_reclaim_reent+0xa0>
 80057d6:	3504      	adds	r5, #4
 80057d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057da:	2d80      	cmp	r5, #128	; 0x80
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	d1f8      	bne.n	80057d2 <_reclaim_reent+0x8a>
 80057e0:	4620      	mov	r0, r4
 80057e2:	f7ff fec3 	bl	800556c <_free_r>
 80057e6:	e7ba      	b.n	800575e <_reclaim_reent+0x16>
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff febe 	bl	800556c <_free_r>
 80057f0:	4631      	mov	r1, r6
 80057f2:	e7ef      	b.n	80057d4 <_reclaim_reent+0x8c>
 80057f4:	2500      	movs	r5, #0
 80057f6:	e7ef      	b.n	80057d8 <_reclaim_reent+0x90>
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
 80057fa:	bf00      	nop
 80057fc:	24000018 	.word	0x24000018

08005800 <_sbrk_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d06      	ldr	r5, [pc, #24]	; (800581c <_sbrk_r+0x1c>)
 8005804:	2300      	movs	r3, #0
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	f7fb f902 	bl	8000a14 <_sbrk>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_sbrk_r+0x1a>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_sbrk_r+0x1a>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	24004b14 	.word	0x24004b14

08005820 <_raise_r>:
 8005820:	291f      	cmp	r1, #31
 8005822:	b538      	push	{r3, r4, r5, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	460d      	mov	r5, r1
 8005828:	d904      	bls.n	8005834 <_raise_r+0x14>
 800582a:	2316      	movs	r3, #22
 800582c:	6003      	str	r3, [r0, #0]
 800582e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005836:	b112      	cbz	r2, 800583e <_raise_r+0x1e>
 8005838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800583c:	b94b      	cbnz	r3, 8005852 <_raise_r+0x32>
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f830 	bl	80058a4 <_getpid_r>
 8005844:	462a      	mov	r2, r5
 8005846:	4601      	mov	r1, r0
 8005848:	4620      	mov	r0, r4
 800584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800584e:	f000 b817 	b.w	8005880 <_kill_r>
 8005852:	2b01      	cmp	r3, #1
 8005854:	d00a      	beq.n	800586c <_raise_r+0x4c>
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	d103      	bne.n	8005862 <_raise_r+0x42>
 800585a:	2316      	movs	r3, #22
 800585c:	6003      	str	r3, [r0, #0]
 800585e:	2001      	movs	r0, #1
 8005860:	e7e7      	b.n	8005832 <_raise_r+0x12>
 8005862:	2400      	movs	r4, #0
 8005864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005868:	4628      	mov	r0, r5
 800586a:	4798      	blx	r3
 800586c:	2000      	movs	r0, #0
 800586e:	e7e0      	b.n	8005832 <_raise_r+0x12>

08005870 <raise>:
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <raise+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f7ff bfd3 	b.w	8005820 <_raise_r>
 800587a:	bf00      	nop
 800587c:	24000018 	.word	0x24000018

08005880 <_kill_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d07      	ldr	r5, [pc, #28]	; (80058a0 <_kill_r+0x20>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f7fb f8a7 	bl	80009e0 <_kill>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_kill_r+0x1c>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	b103      	cbz	r3, 800589c <_kill_r+0x1c>
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	24004b14 	.word	0x24004b14

080058a4 <_getpid_r>:
 80058a4:	f7fb b894 	b.w	80009d0 <_getpid>

080058a8 <__malloc_lock>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__malloc_lock+0x8>)
 80058aa:	f7ff be3f 	b.w	800552c <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	24004b08 	.word	0x24004b08

080058b4 <__malloc_unlock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__malloc_unlock+0x8>)
 80058b6:	f7ff be3a 	b.w	800552e <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	24004b08 	.word	0x24004b08

080058c0 <_init>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr

080058cc <_fini>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr
