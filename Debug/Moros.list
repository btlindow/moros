
Moros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005528  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08005a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004ab0  2400007c  08005a98  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004b2c  08005a98  00024b2c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029b9b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004ce3  00000000  00000000  00049c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015f0  00000000  00000000  0004e928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001418  00000000  00000000  0004ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003717b  00000000  00000000  00051330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d67b  00000000  00000000  000884ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001535b6  00000000  00000000  000a5b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f90dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005f60  00000000  00000000  001f912c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080057e0 	.word	0x080057e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	080057e0 	.word	0x080057e0

08000310 <_Z9MorosInitPv>:
static MorosUARTTrigger* trigger_uart;

static void on_trigger(void);

void MorosInit(void*)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	trigger_gps = new MorosGPSTrigger(on_trigger);
 8000318:	2014      	movs	r0, #20
 800031a:	f005 f837 	bl	800538c <_Znwj>
 800031e:	4603      	mov	r3, r0
 8000320:	461c      	mov	r4, r3
 8000322:	4920      	ldr	r1, [pc, #128]	; (80003a4 <_Z9MorosInitPv+0x94>)
 8000324:	4620      	mov	r0, r4
 8000326:	f000 f853 	bl	80003d0 <_ZN15MorosGPSTriggerC1EPFvvE>
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <_Z9MorosInitPv+0x98>)
 800032c:	601c      	str	r4, [r3, #0]
	trigger_imu = new MorosIMUTrigger(on_trigger);
 800032e:	2014      	movs	r0, #20
 8000330:	f005 f82c 	bl	800538c <_Znwj>
 8000334:	4603      	mov	r3, r0
 8000336:	461c      	mov	r4, r3
 8000338:	491a      	ldr	r1, [pc, #104]	; (80003a4 <_Z9MorosInitPv+0x94>)
 800033a:	4620      	mov	r0, r4
 800033c:	f000 f86c 	bl	8000418 <_ZN15MorosIMUTriggerC1EPFvvE>
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <_Z9MorosInitPv+0x9c>)
 8000342:	601c      	str	r4, [r3, #0]
	trigger_lidar = new MorosLIDARTrigger(on_trigger);
 8000344:	2014      	movs	r0, #20
 8000346:	f005 f821 	bl	800538c <_Znwj>
 800034a:	4603      	mov	r3, r0
 800034c:	461c      	mov	r4, r3
 800034e:	4915      	ldr	r1, [pc, #84]	; (80003a4 <_Z9MorosInitPv+0x94>)
 8000350:	4620      	mov	r0, r4
 8000352:	f000 f885 	bl	8000460 <_ZN17MorosLIDARTriggerC1EPFvvE>
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <_Z9MorosInitPv+0xa0>)
 8000358:	601c      	str	r4, [r3, #0]
	trigger_sw = new MorosSWTrigger(on_trigger);
 800035a:	2014      	movs	r0, #20
 800035c:	f005 f816 	bl	800538c <_Znwj>
 8000360:	4603      	mov	r3, r0
 8000362:	461c      	mov	r4, r3
 8000364:	490f      	ldr	r1, [pc, #60]	; (80003a4 <_Z9MorosInitPv+0x94>)
 8000366:	4620      	mov	r0, r4
 8000368:	f000 f89e 	bl	80004a8 <_ZN14MorosSWTriggerC1EPFvvE>
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <_Z9MorosInitPv+0xa4>)
 800036e:	601c      	str	r4, [r3, #0]
	trigger_tim = new MorosTIMTrigger(on_trigger);
 8000370:	2014      	movs	r0, #20
 8000372:	f005 f80b 	bl	800538c <_Znwj>
 8000376:	4603      	mov	r3, r0
 8000378:	461c      	mov	r4, r3
 800037a:	490a      	ldr	r1, [pc, #40]	; (80003a4 <_Z9MorosInitPv+0x94>)
 800037c:	4620      	mov	r0, r4
 800037e:	f000 f8b7 	bl	80004f0 <_ZN15MorosTIMTriggerC1EPFvvE>
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <_Z9MorosInitPv+0xa8>)
 8000384:	601c      	str	r4, [r3, #0]
	trigger_uart = new MorosUARTTrigger(on_trigger);
 8000386:	2014      	movs	r0, #20
 8000388:	f005 f800 	bl	800538c <_Znwj>
 800038c:	4603      	mov	r3, r0
 800038e:	461c      	mov	r4, r3
 8000390:	4904      	ldr	r1, [pc, #16]	; (80003a4 <_Z9MorosInitPv+0x94>)
 8000392:	4620      	mov	r0, r4
 8000394:	f000 f8e8 	bl	8000568 <_ZN16MorosUARTTriggerC1EPFvvE>
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <_Z9MorosInitPv+0xac>)
 800039a:	601c      	str	r4, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	080003c1 	.word	0x080003c1
 80003a8:	24000098 	.word	0x24000098
 80003ac:	2400009c 	.word	0x2400009c
 80003b0:	240000a0 	.word	0x240000a0
 80003b4:	240000a4 	.word	0x240000a4
 80003b8:	240000a8 	.word	0x240000a8
 80003bc:	240000ac 	.word	0x240000ac

080003c0 <_ZL10on_triggerv>:

static void on_trigger(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <_ZN15MorosGPSTriggerC1EPFvvE>:
  .name = "mts_gps",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosGPSTrigger::MorosGPSTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6839      	ldr	r1, [r7, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f8aa 	bl	8000538 <_ZN19MorosTriggerServiceC1EPFvvE>
 80003e4:	4a05      	ldr	r2, [pc, #20]	; (80003fc <_ZN15MorosGPSTriggerC1EPFvvE+0x2c>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <_ZN15MorosGPSTriggerC1EPFvvE+0x30>)
 80003ee:	60da      	str	r2, [r3, #12]
}
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4618      	mov	r0, r3
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	08005880 	.word	0x08005880
 8000400:	08005854 	.word	0x08005854

08000404 <_ZN15MorosGPSTrigger5_taskEv>:

void MorosGPSTrigger::_task(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <_ZN15MorosIMUTriggerC1EPFvvE>:
  .name = "mts_imu",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosIMUTrigger::MorosIMUTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6839      	ldr	r1, [r7, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f886 	bl	8000538 <_ZN19MorosTriggerServiceC1EPFvvE>
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <_ZN15MorosIMUTriggerC1EPFvvE+0x2c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <_ZN15MorosIMUTriggerC1EPFvvE+0x30>)
 8000436:	60da      	str	r2, [r3, #12]
}
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	080058b0 	.word	0x080058b0
 8000448:	08005884 	.word	0x08005884

0800044c <_ZN15MorosIMUTrigger5_taskEv>:

void MorosIMUTrigger::_task(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <_ZN17MorosLIDARTriggerC1EPFvvE>:
  .name = "mts_lidar",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosLIDARTrigger::MorosLIDARTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6839      	ldr	r1, [r7, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f862 	bl	8000538 <_ZN19MorosTriggerServiceC1EPFvvE>
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <_ZN17MorosLIDARTriggerC1EPFvvE+0x2c>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <_ZN17MorosLIDARTriggerC1EPFvvE+0x30>)
 800047e:	60da      	str	r2, [r3, #12]
}
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4618      	mov	r0, r3
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	080058e0 	.word	0x080058e0
 8000490:	080058b4 	.word	0x080058b4

08000494 <_ZN17MorosLIDARTrigger5_taskEv>:

void MorosLIDARTrigger::_task(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]

}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <_ZN14MorosSWTriggerC1EPFvvE>:
  .name = "mts_sw",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosSWTrigger::MorosSWTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6839      	ldr	r1, [r7, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f83e 	bl	8000538 <_ZN19MorosTriggerServiceC1EPFvvE>
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <_ZN14MorosSWTriggerC1EPFvvE+0x2c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <_ZN14MorosSWTriggerC1EPFvvE+0x30>)
 80004c6:	60da      	str	r2, [r3, #12]
}
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	08005910 	.word	0x08005910
 80004d8:	080058e4 	.word	0x080058e4

080004dc <_ZN14MorosSWTrigger5_taskEv>:

void MorosSWTrigger::_task(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <_ZN15MorosTIMTriggerC1EPFvvE>:
  .name = "mts_tim",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosTIMTrigger::MorosTIMTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6839      	ldr	r1, [r7, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f81a 	bl	8000538 <_ZN19MorosTriggerServiceC1EPFvvE>
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <_ZN15MorosTIMTriggerC1EPFvvE+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <_ZN15MorosTIMTriggerC1EPFvvE+0x30>)
 800050e:	60da      	str	r2, [r3, #12]
}
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	08005940 	.word	0x08005940
 8000520:	08005914 	.word	0x08005914

08000524 <_ZN15MorosTIMTrigger5_taskEv>:

void MorosTIMTrigger::_task(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <_ZN19MorosTriggerServiceC1EPFvvE>:
 *      Author: ben
 */

#include "MorosTriggerService.hpp"

MorosTriggerService::MorosTriggerService(void(*_on_trigger)(void))
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <_ZN19MorosTriggerServiceC1EPFvvE+0x2c>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	741a      	strb	r2, [r3, #16]
{
	this->_on_trigger = _on_trigger;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	605a      	str	r2, [r3, #4]
}
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	0800594c 	.word	0x0800594c

08000568 <_ZN16MorosUARTTriggerC1EPFvvE>:
  .name = "mts_uart",
  .stack_size = 512,
  .priority = (osPriority_t) osPriorityNormal,
};

MorosUARTTrigger::MorosUARTTrigger(void(*_on_trigger)(void)) : MorosTriggerService(_on_trigger)
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6839      	ldr	r1, [r7, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ffde 	bl	8000538 <_ZN19MorosTriggerServiceC1EPFvvE>
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <_ZN16MorosUARTTriggerC1EPFvvE+0x2c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
{
	this->_thread_attr = &thread_attr;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <_ZN16MorosUARTTriggerC1EPFvvE+0x30>)
 8000586:	60da      	str	r2, [r3, #12]
}
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	0800597c 	.word	0x0800597c
 8000598:	08005950 	.word	0x08005950

0800059c <_ZN16MorosUARTTrigger5_taskEv>:

void MorosUARTTrigger::_task(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fb98 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f816 	bl	80005e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f894 	bl	80006e8 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f002 f968 	bl	8002894 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <main+0x2c>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0x30>)
 80005ca:	f002 f9ad 	bl	8002928 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <main+0x34>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f002 f982 	bl	80028dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x28>
 80005da:	bf00      	nop
 80005dc:	08005980 	.word	0x08005980
 80005e0:	0800096d 	.word	0x0800096d
 80005e4:	240000b0 	.word	0x240000b0

080005e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	; 0x70
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	224c      	movs	r2, #76	; 0x4c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 ff40 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2220      	movs	r2, #32
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 ff3a 	bl	800547c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fe6b 	bl	80012e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061a:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 800061c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800063a:	bf14      	ite	ne
 800063c:	2301      	movne	r3, #1
 800063e:	2300      	moveq	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <_Z18SystemClock_Configv+0x60>
 8000646:	e7f2      	b.n	800062e <_Z18SystemClock_Configv+0x46>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800064c:	2301      	movs	r3, #1
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2340      	movs	r3, #64	; 0x40
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000660:	230c      	movs	r3, #12
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000670:	230c      	movs	r3, #12
 8000672:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000674:	2300      	movs	r3, #0
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fe69 	bl	8001358 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000696:	f000 f987 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	233f      	movs	r3, #63	; 0x3f
 800069c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006a6:	2308      	movs	r3, #8
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006aa:	2340      	movs	r3, #64	; 0x40
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2101      	movs	r1, #1
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f9f7 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80006d6:	f000 f967 	bl	80009a8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3770      	adds	r7, #112	; 0x70
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	58024800 	.word	0x58024800

080006e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b94      	ldr	r3, [pc, #592]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	4a92      	ldr	r2, [pc, #584]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070e:	4b90      	ldr	r3, [pc, #576]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071c:	4b8c      	ldr	r3, [pc, #560]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	4a8b      	ldr	r2, [pc, #556]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072c:	4b88      	ldr	r3, [pc, #544]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b85      	ldr	r3, [pc, #532]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a83      	ldr	r2, [pc, #524]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b81      	ldr	r3, [pc, #516]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	4a7c      	ldr	r2, [pc, #496]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000768:	4b79      	ldr	r3, [pc, #484]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b76      	ldr	r3, [pc, #472]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	4a74      	ldr	r2, [pc, #464]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000786:	4b72      	ldr	r3, [pc, #456]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000794:	4b6e      	ldr	r3, [pc, #440]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	4a6d      	ldr	r2, [pc, #436]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a4:	4b6a      	ldr	r3, [pc, #424]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	4b67      	ldr	r3, [pc, #412]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	4a65      	ldr	r2, [pc, #404]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c2:	4b63      	ldr	r3, [pc, #396]	; (8000950 <_ZL12MX_GPIO_Initv+0x268>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f244 0101 	movw	r1, #16385	; 0x4001
 80007d6:	485f      	ldr	r0, [pc, #380]	; (8000954 <_ZL12MX_GPIO_Initv+0x26c>)
 80007d8:	f000 fd6a 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e2:	485d      	ldr	r0, [pc, #372]	; (8000958 <_ZL12MX_GPIO_Initv+0x270>)
 80007e4:	f000 fd64 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	485b      	ldr	r0, [pc, #364]	; (800095c <_ZL12MX_GPIO_Initv+0x274>)
 80007ee:	f000 fd5f 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4856      	ldr	r0, [pc, #344]	; (8000960 <_ZL12MX_GPIO_Initv+0x278>)
 8000808:	f000 fbaa 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800080c:	2332      	movs	r3, #50	; 0x32
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081c:	230b      	movs	r3, #11
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	484e      	ldr	r0, [pc, #312]	; (8000960 <_ZL12MX_GPIO_Initv+0x278>)
 8000828:	f000 fb9a 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800082c:	2386      	movs	r3, #134	; 0x86
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800083c:	230b      	movs	r3, #11
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4847      	ldr	r0, [pc, #284]	; (8000964 <_ZL12MX_GPIO_Initv+0x27c>)
 8000848:	f000 fb8a 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800084c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483b      	ldr	r0, [pc, #236]	; (8000954 <_ZL12MX_GPIO_Initv+0x26c>)
 8000866:	f000 fb7b 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800086a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4833      	ldr	r0, [pc, #204]	; (8000954 <_ZL12MX_GPIO_Initv+0x26c>)
 8000888:	f000 fb6a 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800088c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800089e:	2307      	movs	r3, #7
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	482b      	ldr	r0, [pc, #172]	; (8000958 <_ZL12MX_GPIO_Initv+0x270>)
 80008aa:	f000 fb59 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4824      	ldr	r0, [pc, #144]	; (8000958 <_ZL12MX_GPIO_Initv+0x270>)
 80008c8:	f000 fb4a 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4821      	ldr	r0, [pc, #132]	; (8000968 <_ZL12MX_GPIO_Initv+0x280>)
 80008e2:	f000 fb3d 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80008f8:	230a      	movs	r3, #10
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4818      	ldr	r0, [pc, #96]	; (8000964 <_ZL12MX_GPIO_Initv+0x27c>)
 8000904:	f000 fb2c 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000908:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091a:	230b      	movs	r3, #11
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <_ZL12MX_GPIO_Initv+0x280>)
 8000926:	f000 fb1b 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <_ZL12MX_GPIO_Initv+0x274>)
 8000942:	f000 fb0d 	bl	8000f60 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	58024400 	.word	0x58024400
 8000954:	58020400 	.word	0x58020400
 8000958:	58020c00 	.word	0x58020c00
 800095c:	58021000 	.word	0x58021000
 8000960:	58020800 	.word	0x58020800
 8000964:	58020000 	.word	0x58020000
 8000968:	58021800 	.word	0x58021800

0800096c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  MorosInit(NULL);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fccb 	bl	8000310 <_Z9MorosInitPv>
  for(;;)
  {
    osDelay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f002 f866 	bl	8002a4c <osDelay>
 8000980:	e7fb      	b.n	800097a <_Z16StartDefaultTaskPv+0xe>
	...

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f9e3 	bl	8000d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010000 	.word	0x40010000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_MspInit+0x38>)
 80009bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x38>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x38>)
 80009cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	210f      	movs	r1, #15
 80009dc:	f06f 0001 	mvn.w	r0, #1
 80009e0:	f000 fa96 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58024400 	.word	0x58024400

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	d844      	bhi.n	8000a88 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80009fe:	2200      	movs	r2, #0
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	2019      	movs	r0, #25
 8000a04:	f000 fa84 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a08:	2019      	movs	r0, #25
 8000a0a:	f000 fa9b 	bl	8000f44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <HAL_InitTick+0xb0>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <HAL_InitTick+0xb4>)
 8000a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_InitTick+0xb4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_InitTick+0xb4>)
 8000a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a32:	f107 020c 	add.w	r2, r7, #12
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fbaf 	bl	80021a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a42:	f001 fb97 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8000a46:	4603      	mov	r3, r0
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <HAL_InitTick+0xb8>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	0c9b      	lsrs	r3, r3, #18
 8000a56:	3b01      	subs	r3, #1
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_InitTick+0xbc>)
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_InitTick+0xc0>)
 8000a5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0xbc>)
 8000a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_InitTick+0xbc>)
 8000a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_InitTick+0xbc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_InitTick+0xbc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <HAL_InitTick+0xbc>)
 8000a7c:	f001 fbd2 	bl	8002224 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d107      	bne.n	8000a96 <HAL_InitTick+0xa6>
 8000a86:	e001      	b.n	8000a8c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e005      	b.n	8000a98 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <HAL_InitTick+0xbc>)
 8000a8e:	f001 fc2b 	bl	80022e8 <HAL_TIM_Base_Start_IT>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3738      	adds	r7, #56	; 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	24000008 	.word	0x24000008
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	431bde83 	.word	0x431bde83
 8000aac:	240000b4 	.word	0x240000b4
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM1_UP_IRQHandler+0x10>)
 8000ae6:	f001 fc85 	bl	80023f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	240000b4 	.word	0x240000b4

08000af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_kill>:

int _kill(int pid, int sig)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b0e:	f004 fc73 	bl	80053f8 <__errno>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2216      	movs	r2, #22
 8000b16:	601a      	str	r2, [r3, #0]
	return -1;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_exit>:

void _exit (int status)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ffe7 	bl	8000b04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b36:	e7fe      	b.n	8000b36 <_exit+0x12>

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f004 fc46 	bl	80053f8 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24050000 	.word	0x24050000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	24000100 	.word	0x24000100
 8000ba0:	24004b30 	.word	0x24004b30

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <SystemInit+0xd0>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <SystemInit+0xd0>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <SystemInit+0xd4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <SystemInit+0xd4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <SystemInit+0xd4>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <SystemInit+0xd8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <SystemInit+0xd8>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <SystemInit+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <SystemInit+0xd8>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4924      	ldr	r1, [pc, #144]	; (8000c7c <SystemInit+0xd8>)
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <SystemInit+0xdc>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <SystemInit+0xd4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <SystemInit+0xd4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <SystemInit+0xd4>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <SystemInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <SystemInit+0xd8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <SystemInit+0xd8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <SystemInit+0xd8>)
 8000c22:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <SystemInit+0xe0>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <SystemInit+0xd8>)
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <SystemInit+0xe4>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <SystemInit+0xd8>)
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <SystemInit+0xe8>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <SystemInit+0xd8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <SystemInit+0xd8>)
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <SystemInit+0xe8>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SystemInit+0xd8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <SystemInit+0xd8>)
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <SystemInit+0xe8>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <SystemInit+0xd8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SystemInit+0xd8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <SystemInit+0xd8>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <SystemInit+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <SystemInit+0xec>)
 8000c64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	52002000 	.word	0x52002000
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c84:	02020200 	.word	0x02020200
 8000c88:	01ff0000 	.word	0x01ff0000
 8000c8c:	01010280 	.word	0x01010280
 8000c90:	52004000 	.word	0x52004000

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f7ff ff84 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f004 fb9f 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc73 	bl	80005b0 <main>
  bx  lr
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000cd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8000cd8:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8000cdc:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8000ce0:	24004b2c 	.word	0x24004b2c

08000ce4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC3_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 f903 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf4:	f001 f894 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_Init+0x68>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	4913      	ldr	r1, [pc, #76]	; (8000d54 <HAL_Init+0x6c>)
 8000d06:	5ccb      	ldrb	r3, [r1, r3]
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_Init+0x68>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_Init+0x6c>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_Init+0x70>)
 8000d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_Init+0x74>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	200f      	movs	r0, #15
 8000d34:	f7ff fe5c 	bl	80009f0 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e002      	b.n	8000d48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d42:	f7ff fe37 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	58024400 	.word	0x58024400
 8000d54:	080059a4 	.word	0x080059a4
 8000d58:	24000004 	.word	0x24000004
 8000d5c:	24000000 	.word	0x24000000

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	24000104 	.word	0x24000104

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	24000104 	.word	0x24000104

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	05fa0000 	.word	0x05fa0000

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1e:	f7ff ff63 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff ffb3 	bl	8000e94 <NVIC_EncodePriority>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff82 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff56 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f6e:	4b86      	ldr	r3, [pc, #536]	; (8001188 <HAL_GPIO_Init+0x228>)
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f72:	e18c      	b.n	800128e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 817e 	beq.w	8001288 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_Init+0x44>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d130      	bne.n	8001006 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 0201 	and.w	r2, r3, #1
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80d8 	beq.w	8001288 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_GPIO_Init+0x22c>)
 80010da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010de:	4a2b      	ldr	r2, [pc, #172]	; (800118c <HAL_GPIO_Init+0x22c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x22c>)
 80010ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x230>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x234>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d04a      	beq.n	80011b8 <HAL_GPIO_Init+0x258>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x238>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x222>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_GPIO_Init+0x23c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x21e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x240>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x21a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_GPIO_Init+0x244>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x216>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x248>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x212>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_GPIO_Init+0x24c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x20e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_GPIO_Init+0x250>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x20a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <HAL_GPIO_Init+0x254>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x206>
 8001162:	2309      	movs	r3, #9
 8001164:	e029      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001166:	230a      	movs	r3, #10
 8001168:	e027      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800116a:	2307      	movs	r3, #7
 800116c:	e025      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800116e:	2306      	movs	r3, #6
 8001170:	e023      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001172:	2305      	movs	r3, #5
 8001174:	e021      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001176:	2304      	movs	r3, #4
 8001178:	e01f      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800117a:	2303      	movs	r3, #3
 800117c:	e01d      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800117e:	2302      	movs	r3, #2
 8001180:	e01b      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001182:	2301      	movs	r3, #1
 8001184:	e019      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001186:	bf00      	nop
 8001188:	58000080 	.word	0x58000080
 800118c:	58024400 	.word	0x58024400
 8001190:	58000400 	.word	0x58000400
 8001194:	58020000 	.word	0x58020000
 8001198:	58020400 	.word	0x58020400
 800119c:	58020800 	.word	0x58020800
 80011a0:	58020c00 	.word	0x58020c00
 80011a4:	58021000 	.word	0x58021000
 80011a8:	58021400 	.word	0x58021400
 80011ac:	58021800 	.word	0x58021800
 80011b0:	58021c00 	.word	0x58021c00
 80011b4:	58022400 	.word	0x58022400
 80011b8:	2300      	movs	r3, #0
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	4093      	lsls	r3, r2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ca:	4938      	ldr	r1, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x34c>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800122c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	3301      	adds	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f ae6b 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	58000400 	.word	0x58000400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d00a      	beq.n	800130e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e01f      	b.n	800134a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e01d      	b.n	800134a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f023 0207 	bic.w	r2, r3, #7
 8001316:	490f      	ldr	r1, [pc, #60]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800131e:	f7ff fd33 	bl	8000d88 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001324:	e009      	b.n	800133a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001326:	f7ff fd2f 	bl	8000d88 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001334:	d901      	bls.n	800133a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e007      	b.n	800134a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001346:	d1ee      	bne.n	8001326 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	58024800 	.word	0x58024800

08001358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e39d      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001382:	4b86      	ldr	r3, [pc, #536]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	2b10      	cmp	r3, #16
 800138c:	d007      	beq.n	800139e <HAL_RCC_OscConfig+0x46>
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	2b18      	cmp	r3, #24
 8001392:	d110      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d10b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <HAL_RCC_OscConfig+0x12c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d168      	bne.n	8001484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e377      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x76>
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a75      	ldr	r2, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6d      	ldr	r2, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0xbc>
 80013fa:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a67      	ldr	r2, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a64      	ldr	r2, [pc, #400]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 8001414:	4b61      	ldr	r3, [pc, #388]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a60      	ldr	r2, [pc, #384]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5d      	ldr	r2, [pc, #372]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fca8 	bl	8000d88 <HAL_GetTick>
 8001438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fca4 	bl	8000d88 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e32b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe4>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc94 	bl	8000d88 <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc90 	bl	8000d88 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e317      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x10c>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 808c 	beq.w	80015ac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800149c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <HAL_RCC_OscConfig+0x162>
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2b18      	cmp	r3, #24
 80014ae:	d137      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c8>
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d132      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e2e9      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014d2:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0219 	bic.w	r2, r3, #25
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	492f      	ldr	r1, [pc, #188]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014e4:	f7ff fc50 	bl	8000d88 <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc4c 	bl	8000d88 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2d3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	4920      	ldr	r1, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151e:	e045      	b.n	80015ac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d026      	beq.n	8001576 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 0219 	bic.w	r2, r3, #25
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4919      	ldr	r1, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fc25 	bl	8000d88 <HAL_GetTick>
 800153e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fc21 	bl	8000d88 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e2a8      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	490b      	ldr	r1, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e01a      	b.n	80015ac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fc01 	bl	8000d88 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fbfd 	bl	8000d88 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d903      	bls.n	80015a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e284      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
 800159c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a0:	4b96      	ldr	r3, [pc, #600]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ee      	bne.n	800158a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d06a      	beq.n	800168e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4b90      	ldr	r3, [pc, #576]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c2:	4b8e      	ldr	r3, [pc, #568]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d007      	beq.n	80015de <HAL_RCC_OscConfig+0x286>
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b18      	cmp	r3, #24
 80015d2:	d11b      	bne.n	800160c <HAL_RCC_OscConfig+0x2b4>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015de:	4b87      	ldr	r3, [pc, #540]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x29e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b80      	cmp	r3, #128	; 0x80
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e257      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	061b      	lsls	r3, r3, #24
 8001604:	497d      	ldr	r1, [pc, #500]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800160a:	e040      	b.n	800168e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a78      	ldr	r2, [pc, #480]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800161a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fbb2 	bl	8000d88 <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001628:	f7ff fbae 	bl	8000d88 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e235      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800163a:	4b70      	ldr	r3, [pc, #448]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001646:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	4969      	ldr	r1, [pc, #420]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	60cb      	str	r3, [r1, #12]
 800165a:	e018      	b.n	800168e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800165c:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a66      	ldr	r2, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb8e 	bl	8000d88 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001670:	f7ff fb8a 	bl	8000d88 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e211      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001682:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d036      	beq.n	8001708 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d019      	beq.n	80016d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	4a55      	ldr	r2, [pc, #340]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb6b 	bl	8000d88 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb67 	bl	8000d88 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1ee      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016c8:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x35e>
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016da:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb51 	bl	8000d88 <HAL_GetTick>
 80016e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb4d 	bl	8000d88 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1d4      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016fc:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d036      	beq.n	8001782 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a36      	ldr	r2, [pc, #216]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001726:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001728:	f7ff fb2e 	bl	8000d88 <HAL_GetTick>
 800172c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001730:	f7ff fb2a 	bl	8000d88 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1b1      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x3d8>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800175a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800175c:	f7ff fb14 	bl	8000d88 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001764:	f7ff fb10 	bl	8000d88 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e197      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8086 	beq.w	800189c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x4a8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_RCC_OscConfig+0x4a8>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800179c:	f7ff faf4 	bl	8000d88 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017a4:	f7ff faf0 	bl	8000d88 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e177      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x4a8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d106      	bne.n	80017d8 <HAL_RCC_OscConfig+0x480>
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	e032      	b.n	800183e <HAL_RCC_OscConfig+0x4e6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0x4ac>
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a02      	ldr	r2, [pc, #8]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
 80017f8:	e021      	b.n	800183e <HAL_RCC_OscConfig+0x4e6>
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	58024800 	.word	0x58024800
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x4ce>
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a82      	ldr	r2, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x4e6>
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a7c      	ldr	r2, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a79      	ldr	r2, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa9f 	bl	8000d88 <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fa9b 	bl	8000d88 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e120      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ee      	beq.n	800184e <HAL_RCC_OscConfig+0x4f6>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fa89 	bl	8000d88 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fa85 	bl	8000d88 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e10a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ff 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ae:	2b18      	cmp	r3, #24
 80018b0:	f000 80ba 	beq.w	8001a28 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 8095 	bne.w	80019e8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fa5d 	bl	8000d88 <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fa59 	bl	8000d88 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0e0      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f4:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x6c8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	430a      	orrs	r2, r1
 8001904:	4945      	ldr	r1, [pc, #276]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	628b      	str	r3, [r1, #40]	; 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	3b01      	subs	r3, #1
 8001910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	3b01      	subs	r3, #1
 800191a:	025b      	lsls	r3, r3, #9
 800191c:	b29b      	uxth	r3, r3
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	3b01      	subs	r3, #1
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	3b01      	subs	r3, #1
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800193a:	4938      	ldr	r1, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	4a35      	ldr	r2, [pc, #212]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800194e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x6cc>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001958:	00d2      	lsls	r2, r2, #3
 800195a:	4930      	ldr	r1, [pc, #192]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	f023 020c 	bic.w	r2, r3, #12
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	492b      	ldr	r1, [pc, #172]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f023 0202 	bic.w	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f9e2 	bl	8000d88 <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9de 	bl	8000d88 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e065      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x670>
 80019e6:	e05d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f9c8 	bl	8000d88 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f9c4 	bl	8000d88 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e04b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a4>
 8001a1a:	e043      	b.n	8001aa4 <HAL_RCC_OscConfig+0x74c>
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	fffffc0c 	.word	0xfffffc0c
 8001a24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x758>)
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x758>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d031      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d12a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d122      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d11a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0a5b      	lsrs	r3, r3, #9
 8001a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d111      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0e1b      	lsrs	r3, r3, #24
 8001a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3730      	adds	r7, #48	; 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	58024400 	.word	0x58024400

08001ab4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e19c      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b8a      	ldr	r3, [pc, #552]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b87      	ldr	r3, [pc, #540]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 020f 	bic.w	r2, r3, #15
 8001ade:	4985      	ldr	r1, [pc, #532]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e184      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d908      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b14:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4975      	ldr	r1, [pc, #468]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d010      	beq.n	8001b54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d908      	bls.n	8001b54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	496a      	ldr	r1, [pc, #424]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d908      	bls.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b70:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	495e      	ldr	r1, [pc, #376]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b9e:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4953      	ldr	r1, [pc, #332]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d908      	bls.n	8001bde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f023 020f 	bic.w	r2, r3, #15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4947      	ldr	r1, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d055      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4940      	ldr	r1, [pc, #256]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c04:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d121      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0f6      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0ea      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0de      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d6      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4925      	ldr	r1, [pc, #148]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f88f 	bl	8000d88 <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f88b 	bl	8000d88 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0be      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d1eb      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d208      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d214      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 020f 	bic.w	r2, r3, #15
 8001cda:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e086      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
 8001cf4:	52002000 	.word	0x52002000
 8001cf8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d208      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d18:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4939      	ldr	r1, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d208      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	492e      	ldr	r1, [pc, #184]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d208      	bcs.n	8001d86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d010      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d208      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4917      	ldr	r1, [pc, #92]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001db4:	f000 f834 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x35c>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_RCC_ClockConfig+0x35c>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x360>)
 8001dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x364>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x368>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fdfa 	bl	80009f0 <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	080059a4 	.word	0x080059a4
 8001e14:	24000004 	.word	0x24000004
 8001e18:	24000000 	.word	0x24000000
 8001e1c:	24000008 	.word	0x24000008

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e26:	4bb3      	ldr	r3, [pc, #716]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e2e:	2b18      	cmp	r3, #24
 8001e30:	f200 8155 	bhi.w	80020de <HAL_RCC_GetSysClockFreq+0x2be>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001ea1 	.word	0x08001ea1
 8001e40:	080020df 	.word	0x080020df
 8001e44:	080020df 	.word	0x080020df
 8001e48:	080020df 	.word	0x080020df
 8001e4c:	080020df 	.word	0x080020df
 8001e50:	080020df 	.word	0x080020df
 8001e54:	080020df 	.word	0x080020df
 8001e58:	080020df 	.word	0x080020df
 8001e5c:	08001ec7 	.word	0x08001ec7
 8001e60:	080020df 	.word	0x080020df
 8001e64:	080020df 	.word	0x080020df
 8001e68:	080020df 	.word	0x080020df
 8001e6c:	080020df 	.word	0x080020df
 8001e70:	080020df 	.word	0x080020df
 8001e74:	080020df 	.word	0x080020df
 8001e78:	080020df 	.word	0x080020df
 8001e7c:	08001ecd 	.word	0x08001ecd
 8001e80:	080020df 	.word	0x080020df
 8001e84:	080020df 	.word	0x080020df
 8001e88:	080020df 	.word	0x080020df
 8001e8c:	080020df 	.word	0x080020df
 8001e90:	080020df 	.word	0x080020df
 8001e94:	080020df 	.word	0x080020df
 8001e98:	080020df 	.word	0x080020df
 8001e9c:	08001ed3 	.word	0x08001ed3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea0:	4b94      	ldr	r3, [pc, #592]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001eac:	4b91      	ldr	r3, [pc, #580]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	4a90      	ldr	r2, [pc, #576]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001ebe:	e111      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ec0:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec2:	61bb      	str	r3, [r7, #24]
    break;
 8001ec4:	e10e      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ec8:	61bb      	str	r3, [r7, #24]
    break;
 8001eca:	e10b      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ece:	61bb      	str	r3, [r7, #24]
    break;
 8001ed0:	e108      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001edc:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ee8:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80e1 	beq.w	80020d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f000 8083 	beq.w	8002024 <HAL_RCC_GetSysClockFreq+0x204>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	f200 80a1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x248>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x114>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d056      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f32:	e099      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f40:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f9a:	e087      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fde:	e065      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800210c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	ed97 6a02 	vldr	s12, [r7, #8]
 8002006:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002022:	e043      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002110 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002046:	ed97 6a02 	vldr	s12, [r7, #8]
 800204a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 800204e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800205a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002066:	e021      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002072:	eddf 6a26 	vldr	s13, [pc, #152]	; 800210c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208a:	ed97 6a02 	vldr	s12, [r7, #8]
 800208e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800209e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	0a5b      	lsrs	r3, r3, #9
 80020b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d0:	ee17 3a90 	vmov	r3, s15
 80020d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    break;
 80020dc:	e002      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020e0:	61bb      	str	r3, [r7, #24]
    break;
 80020e2:	bf00      	nop
  }

  return sysclockfreq;
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	58024400 	.word	0x58024400
 80020f8:	03d09000 	.word	0x03d09000
 80020fc:	003d0900 	.word	0x003d0900
 8002100:	007a1200 	.word	0x007a1200
 8002104:	46000000 	.word	0x46000000
 8002108:	4c742400 	.word	0x4c742400
 800210c:	4a742400 	.word	0x4a742400
 8002110:	4af42400 	.word	0x4af42400

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800211a:	f7ff fe81 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_GetHCLKFreq+0x50>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490f      	ldr	r1, [pc, #60]	; (8002168 <HAL_RCC_GetHCLKFreq+0x54>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_GetHCLKFreq+0x50>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_GetHCLKFreq+0x54>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_RCC_GetHCLKFreq+0x58>)
 8002150:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_GetHCLKFreq+0x58>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	58024400 	.word	0x58024400
 8002168:	080059a4 	.word	0x080059a4
 800216c:	24000004 	.word	0x24000004
 8002170:	24000000 	.word	0x24000000

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002178:	f7ff ffcc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_RCC_GetPCLK2Freq+0x28>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400
 800219c:	080059a4 	.word	0x080059a4

080021a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f003 0207 	and.w	r2, r3, #7
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 020f 	and.w	r2, r3, #15
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_GetClockConfig+0x7c>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetClockConfig+0x80>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 020f 	and.w	r2, r3, #15
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	601a      	str	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	58024400 	.word	0x58024400
 8002220:	52002000 	.word	0x52002000

08002224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e049      	b.n	80022ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f841 	bl	80022d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f000 fa0e 	bl	8002684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d001      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e05e      	b.n	80023be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_TIM_Base_Start_IT+0xe4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d02c      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d027      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d022      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_TIM_Base_Start_IT+0xec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d01d      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <HAL_TIM_Base_Start_IT+0xf0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d018      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_TIM_Base_Start_IT+0xf4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00e      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_TIM_Base_Start_IT+0xfc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_TIM_Base_Start_IT+0x100>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x94>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_TIM_Base_Start_IT+0x104>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d115      	bne.n	80023a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_TIM_Base_Start_IT+0x108>)
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d015      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0xd2>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d011      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	e008      	b.n	80023ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e000      	b.n	80023bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40010400 	.word	0x40010400
 80023e0:	40001800 	.word	0x40001800
 80023e4:	40014000 	.word	0x40014000
 80023e8:	4000e000 	.word	0x4000e000
 80023ec:	4000e400 	.word	0x4000e400
 80023f0:	00010007 	.word	0x00010007

080023f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0202 	mvn.w	r2, #2
 8002420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f905 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f8f7 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f908 	bl	800265a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0204 	mvn.w	r2, #4
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8db 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8cd 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f8de 	bl	800265a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0208 	mvn.w	r2, #8
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2204      	movs	r2, #4
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8b1 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8a3 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8b4 	bl	800265a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b10      	cmp	r3, #16
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0210 	mvn.w	r2, #16
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2208      	movs	r2, #8
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f887 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f879 	bl	8002632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f88a 	bl	800265a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0201 	mvn.w	r2, #1
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fa06 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f920 	bl	80027e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b2:	d10e      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f913 	bl	80027f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d10e      	bne.n	80025fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f838 	bl	800266e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d10e      	bne.n	800262a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b20      	cmp	r3, #32
 8002618:	d107      	bne.n	800262a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f06f 0220 	mvn.w	r2, #32
 8002622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f8d3 	bl	80027d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <TIM_Base_SetConfig+0x124>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <TIM_Base_SetConfig+0x40>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a2:	d00f      	beq.n	80026c4 <TIM_Base_SetConfig+0x40>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a41      	ldr	r2, [pc, #260]	; (80027ac <TIM_Base_SetConfig+0x128>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00b      	beq.n	80026c4 <TIM_Base_SetConfig+0x40>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a40      	ldr	r2, [pc, #256]	; (80027b0 <TIM_Base_SetConfig+0x12c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <TIM_Base_SetConfig+0x40>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <TIM_Base_SetConfig+0x130>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <TIM_Base_SetConfig+0x40>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <TIM_Base_SetConfig+0x134>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d108      	bne.n	80026d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <TIM_Base_SetConfig+0x124>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d027      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d023      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a30      	ldr	r2, [pc, #192]	; (80027ac <TIM_Base_SetConfig+0x128>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <TIM_Base_SetConfig+0x12c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01b      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a2e      	ldr	r2, [pc, #184]	; (80027b4 <TIM_Base_SetConfig+0x130>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d017      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <TIM_Base_SetConfig+0x134>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <TIM_Base_SetConfig+0x138>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <TIM_Base_SetConfig+0x13c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <TIM_Base_SetConfig+0x140>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <TIM_Base_SetConfig+0x144>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <TIM_Base_SetConfig+0x148>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <TIM_Base_SetConfig+0x124>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00f      	beq.n	800278c <TIM_Base_SetConfig+0x108>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <TIM_Base_SetConfig+0x134>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00b      	beq.n	800278c <TIM_Base_SetConfig+0x108>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <TIM_Base_SetConfig+0x138>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <TIM_Base_SetConfig+0x108>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <TIM_Base_SetConfig+0x13c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <TIM_Base_SetConfig+0x140>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d103      	bne.n	8002794 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	615a      	str	r2, [r3, #20]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00
 80027b8:	40010400 	.word	0x40010400
 80027bc:	40014000 	.word	0x40014000
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800
 80027c8:	4000e000 	.word	0x4000e000
 80027cc:	4000e400 	.word	0x4000e400

080027d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <__NVIC_SetPriority>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <__NVIC_SetPriority+0x50>)
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Handler+0x1c>)
 8002866:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002868:	f001 fd28 	bl	80042bc <xTaskGetSchedulerState>
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002872:	f002 fb11 	bl	8004e98 <xPortSysTickHandler>
  }
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002884:	2100      	movs	r1, #0
 8002886:	f06f 0004 	mvn.w	r0, #4
 800288a:	f7ff ffbf 	bl	800280c <__NVIC_SetPriority>
#endif
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800289a:	f3ef 8305 	mrs	r3, IPSR
 800289e:	603b      	str	r3, [r7, #0]
  return(result);
 80028a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028a6:	f06f 0305 	mvn.w	r3, #5
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	e00c      	b.n	80028c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <osKernelInitialize+0x44>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <osKernelInitialize+0x44>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	e002      	b.n	80028c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	24000108 	.word	0x24000108

080028dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028e2:	f3ef 8305 	mrs	r3, IPSR
 80028e6:	603b      	str	r3, [r7, #0]
  return(result);
 80028e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028ee:	f06f 0305 	mvn.w	r3, #5
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	e010      	b.n	8002918 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <osKernelStart+0x48>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d109      	bne.n	8002912 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028fe:	f7ff ffbf 	bl	8002880 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <osKernelStart+0x48>)
 8002904:	2202      	movs	r2, #2
 8002906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002908:	f001 f87c 	bl	8003a04 <vTaskStartScheduler>
      stat = osOK;
 800290c:	2300      	movs	r3, #0
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	e002      	b.n	8002918 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002918:	687b      	ldr	r3, [r7, #4]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	24000108 	.word	0x24000108

08002928 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b08e      	sub	sp, #56	; 0x38
 800292c:	af04      	add	r7, sp, #16
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002938:	f3ef 8305 	mrs	r3, IPSR
 800293c:	617b      	str	r3, [r7, #20]
  return(result);
 800293e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002940:	2b00      	cmp	r3, #0
 8002942:	d17e      	bne.n	8002a42 <osThreadNew+0x11a>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d07b      	beq.n	8002a42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800294e:	2318      	movs	r3, #24
 8002950:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800295a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d045      	beq.n	80029ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <osThreadNew+0x48>
        name = attr->name;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <osThreadNew+0x6e>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b38      	cmp	r3, #56	; 0x38
 8002988:	d805      	bhi.n	8002996 <osThreadNew+0x6e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <osThreadNew+0x72>
        return (NULL);
 8002996:	2300      	movs	r3, #0
 8002998:	e054      	b.n	8002a44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00e      	beq.n	80029d0 <osThreadNew+0xa8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2bbb      	cmp	r3, #187	; 0xbb
 80029b8:	d90a      	bls.n	80029d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <osThreadNew+0xa8>
        mem = 1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e010      	b.n	80029f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10c      	bne.n	80029f2 <osThreadNew+0xca>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <osThreadNew+0xca>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <osThreadNew+0xca>
          mem = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e001      	b.n	80029f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d110      	bne.n	8002a1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a00:	9202      	str	r2, [sp, #8]
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fe0c 	bl	800362c <xTaskCreateStatic>
 8002a14:	4603      	mov	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e013      	b.n	8002a42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d110      	bne.n	8002a42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fe57 	bl	80036e6 <xTaskCreate>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <osThreadNew+0x11a>
            hTask = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a42:	693b      	ldr	r3, [r7, #16]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a54:	f3ef 8305 	mrs	r3, IPSR
 8002a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <osDelay+0x1c>
    stat = osErrorISR;
 8002a60:	f06f 0305 	mvn.w	r3, #5
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e007      	b.n	8002a78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 ff92 	bl	800399c <vTaskDelay>
    }
  }

  return (stat);
 8002a78:	68fb      	ldr	r3, [r7, #12]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8002a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	2400010c 	.word	0x2400010c
 8002ab4:	240001c8 	.word	0x240001c8

08002ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8002ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	240003c8 	.word	0x240003c8
 8002ae8:	24000484 	.word	0x24000484

08002aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f103 0208 	add.w	r2, r3, #8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0208 	add.w	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f103 0208 	add.w	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba4:	d103      	bne.n	8002bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e00c      	b.n	8002bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e002      	b.n	8002bbc <vListInsert+0x2e>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d2f6      	bcs.n	8002bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	601a      	str	r2, [r3, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d103      	bne.n	8002c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c7e:	f002 f879 	bl	8004d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	68f9      	ldr	r1, [r7, #12]
 8002c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	441a      	add	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d114      	bne.n	8002cfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01a      	beq.n	8002d12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3310      	adds	r3, #16
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 f929 	bl	8003f38 <xTaskRemoveFromEventList>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <xQueueGenericReset+0xcc>)
 8002cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	e009      	b.n	8002d12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3310      	adds	r3, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fef2 	bl	8002aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff feed 	bl	8002aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d12:	f002 f85f 	bl	8004dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	e000ed04 	.word	0xe000ed04

08002d24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	; 0x38
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <xQueueGenericCreateStatic+0x52>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <xQueueGenericCreateStatic+0x56>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <xQueueGenericCreateStatic+0x58>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	623b      	str	r3, [r7, #32]
}
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <xQueueGenericCreateStatic+0x7e>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <xQueueGenericCreateStatic+0x82>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueGenericCreateStatic+0x84>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	61fb      	str	r3, [r7, #28]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dc2:	2350      	movs	r3, #80	; 0x50
 8002dc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d00a      	beq.n	8002de2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	61bb      	str	r3, [r7, #24]
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002de2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002df6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f805 	bl	8002e14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3730      	adds	r7, #48	; 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e002      	b.n	8002e36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e42:	2101      	movs	r1, #1
 8002e44:	69b8      	ldr	r0, [r7, #24]
 8002e46:	f7ff ff05 	bl	8002c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	; 0x38
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericSend+0x32>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSend+0x40>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <xQueueGenericSend+0x44>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <xQueueGenericSend+0x46>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xQueueGenericSend+0x60>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <xQueueGenericSend+0x6e>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericSend+0x72>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericSend+0x74>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericSend+0x8e>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eea:	f001 f9e7 	bl	80042bc <xTaskGetSchedulerState>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <xQueueGenericSend+0x9e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <xQueueGenericSend+0xa2>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <xQueueGenericSend+0xa4>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericSend+0xbe>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	61fb      	str	r3, [r7, #28]
}
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f1a:	f001 ff2b 	bl	8004d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <xQueueGenericSend+0xd4>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d129      	bne.n	8002f84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f36:	f000 fa0b 	bl	8003350 <prvCopyDataToQueue>
 8002f3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	3324      	adds	r3, #36	; 0x24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fff5 	bl	8003f38 <xTaskRemoveFromEventList>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <xQueueGenericSend+0x1f8>)
 8002f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	e00a      	b.n	8002f7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f6c:	4b39      	ldr	r3, [pc, #228]	; (8003054 <xQueueGenericSend+0x1f8>)
 8002f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f7c:	f001 ff2a 	bl	8004dd4 <vPortExitCritical>
				return pdPASS;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e063      	b.n	800304c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f8a:	f001 ff23 	bl	8004dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e05c      	b.n	800304c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f82f 	bl	8004000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fa6:	f001 ff15 	bl	8004dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002faa:	f000 fd9b 	bl	8003ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fae:	f001 fee1 	bl	8004d74 <vPortEnterCritical>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbe:	d103      	bne.n	8002fc8 <xQueueGenericSend+0x16c>
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSend+0x182>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fde:	f001 fef9 	bl	8004dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fe2:	1d3a      	adds	r2, r7, #4
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 f81e 	bl	800402c <xTaskCheckForTimeOut>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d124      	bne.n	8003040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff8:	f000 faa2 	bl	8003540 <prvIsQueueFull>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	3310      	adds	r3, #16
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ff44 	bl	8003e98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003012:	f000 fa2d 	bl	8003470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003016:	f000 fd73 	bl	8003b00 <xTaskResumeAll>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f af7c 	bne.w	8002f1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <xQueueGenericSend+0x1f8>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	e772      	b.n	8002f1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003036:	f000 fa1b 	bl	8003470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800303a:	f000 fd61 	bl	8003b00 <xTaskResumeAll>
 800303e:	e76c      	b.n	8002f1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003042:	f000 fa15 	bl	8003470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003046:	f000 fd5b 	bl	8003b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800304a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800304c:	4618      	mov	r0, r3
 800304e:	3738      	adds	r7, #56	; 0x38
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b090      	sub	sp, #64	; 0x40
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <xQueueGenericSendFromISR+0x3c>
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <xQueueGenericSendFromISR+0x40>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <xQueueGenericSendFromISR+0x42>
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d103      	bne.n	80030c2 <xQueueGenericSendFromISR+0x6a>
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <xQueueGenericSendFromISR+0x6e>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueGenericSendFromISR+0x70>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	623b      	str	r3, [r7, #32]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e2:	f001 ff29 	bl	8004f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e6:	f3ef 8211 	mrs	r2, BASEPRI
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	61fa      	str	r2, [r7, #28]
 80030fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <xQueueGenericSendFromISR+0xbc>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d12f      	bne.n	8003174 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800312a:	f000 f911 	bl	8003350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800312e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003136:	d112      	bne.n	800315e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	3324      	adds	r3, #36	; 0x24
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fef7 	bl	8003f38 <xTaskRemoveFromEventList>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e007      	b.n	800316e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800315e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003162:	3301      	adds	r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	b25a      	sxtb	r2, r3
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800316e:	2301      	movs	r3, #1
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003172:	e001      	b.n	8003178 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003174:	2300      	movs	r3, #0
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003182:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003186:	4618      	mov	r0, r3
 8003188:	3740      	adds	r7, #64	; 0x40
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <xQueueReceive+0x30>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	623b      	str	r3, [r7, #32]
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <xQueueReceive+0x3e>
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <xQueueReceive+0x42>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <xQueueReceive+0x44>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <xQueueReceive+0x5e>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	61fb      	str	r3, [r7, #28]
}
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ee:	f001 f865 	bl	80042bc <xTaskGetSchedulerState>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <xQueueReceive+0x6e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <xQueueReceive+0x72>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueReceive+0x74>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueReceive+0x8e>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	61bb      	str	r3, [r7, #24]
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800321e:	f001 fda9 	bl	8004d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01f      	beq.n	800326e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003232:	f000 f8f7 	bl	8003424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00f      	beq.n	8003266 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	3310      	adds	r3, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe74 	bl	8003f38 <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003256:	4b3d      	ldr	r3, [pc, #244]	; (800334c <xQueueReceive+0x1bc>)
 8003258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003266:	f001 fdb5 	bl	8004dd4 <vPortExitCritical>
				return pdPASS;
 800326a:	2301      	movs	r3, #1
 800326c:	e069      	b.n	8003342 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d103      	bne.n	800327c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003274:	f001 fdae 	bl	8004dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003278:	2300      	movs	r3, #0
 800327a:	e062      	b.n	8003342 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003282:	f107 0310 	add.w	r3, r7, #16
 8003286:	4618      	mov	r0, r3
 8003288:	f000 feba 	bl	8004000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003290:	f001 fda0 	bl	8004dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003294:	f000 fc26 	bl	8003ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003298:	f001 fd6c 	bl	8004d74 <vPortEnterCritical>
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d103      	bne.n	80032b2 <xQueueReceive+0x122>
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032be:	d103      	bne.n	80032c8 <xQueueReceive+0x138>
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c8:	f001 fd84 	bl	8004dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032cc:	1d3a      	adds	r2, r7, #4
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fea9 	bl	800402c <xTaskCheckForTimeOut>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d123      	bne.n	8003328 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e2:	f000 f917 	bl	8003514 <prvIsQueueEmpty>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d017      	beq.n	800331c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	3324      	adds	r3, #36	; 0x24
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fdcf 	bl	8003e98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032fc:	f000 f8b8 	bl	8003470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003300:	f000 fbfe 	bl	8003b00 <xTaskResumeAll>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d189      	bne.n	800321e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <xQueueReceive+0x1bc>)
 800330c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	e780      	b.n	800321e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800331c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331e:	f000 f8a7 	bl	8003470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003322:	f000 fbed 	bl	8003b00 <xTaskResumeAll>
 8003326:	e77a      	b.n	800321e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332a:	f000 f8a1 	bl	8003470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800332e:	f000 fbe7 	bl	8003b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003334:	f000 f8ee 	bl	8003514 <prvIsQueueEmpty>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f43f af6f 	beq.w	800321e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003342:	4618      	mov	r0, r3
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d14d      	bne.n	8003412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 ffbc 	bl	80042f8 <xTaskPriorityDisinherit>
 8003380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e043      	b.n	8003412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d119      	bne.n	80033c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6858      	ldr	r0, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	461a      	mov	r2, r3
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	f002 f860 	bl	8005460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	441a      	add	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d32b      	bcc.n	8003412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	e026      	b.n	8003412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68d8      	ldr	r0, [r3, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	461a      	mov	r2, r3
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	f002 f846 	bl	8005460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	425b      	negs	r3, r3
 80033de:	441a      	add	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d207      	bcs.n	8003400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	425b      	negs	r3, r3
 80033fa:	441a      	add	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d105      	bne.n	8003412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3b01      	subs	r3, #1
 8003410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800341a:	697b      	ldr	r3, [r7, #20]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d018      	beq.n	8003468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	441a      	add	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d303      	bcc.n	8003458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68d9      	ldr	r1, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	461a      	mov	r2, r3
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	f001 fffc 	bl	8005460 <memcpy>
	}
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003478:	f001 fc7c 	bl	8004d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003484:	e011      	b.n	80034aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d012      	beq.n	80034b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3324      	adds	r3, #36	; 0x24
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fd50 	bl	8003f38 <xTaskRemoveFromEventList>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800349e:	f000 fe27 	bl	80040f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	dce9      	bgt.n	8003486 <prvUnlockQueue+0x16>
 80034b2:	e000      	b.n	80034b6 <prvUnlockQueue+0x46>
					break;
 80034b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	22ff      	movs	r2, #255	; 0xff
 80034ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034be:	f001 fc89 	bl	8004dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034c2:	f001 fc57 	bl	8004d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ce:	e011      	b.n	80034f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d012      	beq.n	80034fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3310      	adds	r3, #16
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd2b 	bl	8003f38 <xTaskRemoveFromEventList>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e8:	f000 fe02 	bl	80040f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034ec:	7bbb      	ldrb	r3, [r7, #14]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	dce9      	bgt.n	80034d0 <prvUnlockQueue+0x60>
 80034fc:	e000      	b.n	8003500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	22ff      	movs	r2, #255	; 0xff
 8003504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003508:	f001 fc64 	bl	8004dd4 <vPortExitCritical>
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800351c:	f001 fc2a 	bl	8004d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003528:	2301      	movs	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e001      	b.n	8003532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003532:	f001 fc4f 	bl	8004dd4 <vPortExitCritical>

	return xReturn;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003548:	f001 fc14 	bl	8004d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	429a      	cmp	r2, r3
 8003556:	d102      	bne.n	800355e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e001      	b.n	8003562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003562:	f001 fc37 	bl	8004dd4 <vPortExitCritical>

	return xReturn;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e014      	b.n	80035aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <vQueueAddToRegistry+0x50>)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800358c:	490c      	ldr	r1, [pc, #48]	; (80035c0 <vQueueAddToRegistry+0x50>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <vQueueAddToRegistry+0x50>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035a2:	e006      	b.n	80035b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b07      	cmp	r3, #7
 80035ae:	d9e7      	bls.n	8003580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	24000884 	.word	0x24000884

080035c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035d4:	f001 fbce 	bl	8004d74 <vPortEnterCritical>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e4:	d103      	bne.n	80035ee <vQueueWaitForMessageRestricted+0x2a>
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fa:	d103      	bne.n	8003604 <vQueueWaitForMessageRestricted+0x40>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003604:	f001 fbe6 	bl	8004dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3324      	adds	r3, #36	; 0x24
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fc61 	bl	8003ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f7ff ff26 	bl	8003470 <prvUnlockQueue>
	}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	; 0x38
 8003630:	af04      	add	r7, sp, #16
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	623b      	str	r3, [r7, #32]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xTaskCreateStatic+0x46>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	61fb      	str	r3, [r7, #28]
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003672:	23bc      	movs	r3, #188	; 0xbc
 8003674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2bbc      	cmp	r3, #188	; 0xbc
 800367a:	d00a      	beq.n	8003692 <xTaskCreateStatic+0x66>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61bb      	str	r3, [r7, #24]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003692:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01e      	beq.n	80036d8 <xTaskCreateStatic+0xac>
 800369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036b2:	2300      	movs	r3, #0
 80036b4:	9303      	str	r3, [sp, #12]
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f850 	bl	8003770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d2:	f000 f8f3 	bl	80038bc <prvAddNewTaskToReadyList>
 80036d6:	e001      	b.n	80036dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036dc:	697b      	ldr	r3, [r7, #20]
	}
 80036de:	4618      	mov	r0, r3
 80036e0:	3728      	adds	r7, #40	; 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08c      	sub	sp, #48	; 0x30
 80036ea:	af04      	add	r7, sp, #16
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fc5c 	bl	8004fb8 <pvPortMalloc>
 8003700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003708:	20bc      	movs	r0, #188	; 0xbc
 800370a:	f001 fc55 	bl	8004fb8 <pvPortMalloc>
 800370e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
 800371c:	e005      	b.n	800372a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f001 fd16 	bl	8005150 <vPortFree>
 8003724:	e001      	b.n	800372a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d017      	beq.n	8003760 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	2300      	movs	r3, #0
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f80e 	bl	8003770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003754:	69f8      	ldr	r0, [r7, #28]
 8003756:	f000 f8b1 	bl	80038bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800375a:	2301      	movs	r3, #1
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e002      	b.n	8003766 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003766:	69bb      	ldr	r3, [r7, #24]
	}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	21a5      	movs	r1, #165	; 0xa5
 800378a:	f001 fe77 	bl	800547c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003798:	440b      	add	r3, r1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	617b      	str	r3, [r7, #20]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01f      	beq.n	800380e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e012      	b.n	80037fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	7819      	ldrb	r1, [r3, #0]
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	3334      	adds	r3, #52	; 0x34
 80037e4:	460a      	mov	r2, r1
 80037e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d9e9      	bls.n	80037d4 <prvInitialiseNewTask+0x64>
 8003800:	e000      	b.n	8003804 <prvInitialiseNewTask+0x94>
			{
				break;
 8003802:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800380c:	e003      	b.n	8003816 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	2b37      	cmp	r3, #55	; 0x37
 800381a:	d901      	bls.n	8003820 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800381c:	2337      	movs	r3, #55	; 0x37
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	2200      	movs	r2, #0
 8003830:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	3304      	adds	r3, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f978 	bl	8002b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	3318      	adds	r3, #24
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f973 	bl	8002b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2200      	movs	r2, #0
 8003868:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	3354      	adds	r3, #84	; 0x54
 8003870:	2260      	movs	r2, #96	; 0x60
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fe01 	bl	800547c <memset>
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <prvInitialiseNewTask+0x140>)
 800387e:	659a      	str	r2, [r3, #88]	; 0x58
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <prvInitialiseNewTask+0x144>)
 8003884:	65da      	str	r2, [r3, #92]	; 0x5c
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <prvInitialiseNewTask+0x148>)
 800388a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	69b8      	ldr	r0, [r7, #24]
 8003892:	f001 f941 	bl	8004b18 <pxPortInitialiseStack>
 8003896:	4602      	mov	r2, r0
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038a8:	bf00      	nop
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	080059d4 	.word	0x080059d4
 80038b4:	080059f4 	.word	0x080059f4
 80038b8:	080059b4 	.word	0x080059b4

080038bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038c4:	f001 fa56 	bl	8004d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <prvAddNewTaskToReadyList+0xc4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <prvAddNewTaskToReadyList+0xc4>)
 80038d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038d2:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <prvAddNewTaskToReadyList+0xc8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038da:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <prvAddNewTaskToReadyList+0xc8>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <prvAddNewTaskToReadyList+0xc4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d110      	bne.n	800390a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038e8:	f000 fc26 	bl	8004138 <prvInitialiseTaskLists>
 80038ec:	e00d      	b.n	800390a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <prvAddNewTaskToReadyList+0xcc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038f6:	4b23      	ldr	r3, [pc, #140]	; (8003984 <prvAddNewTaskToReadyList+0xc8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	429a      	cmp	r2, r3
 8003902:	d802      	bhi.n	800390a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003904:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <prvAddNewTaskToReadyList+0xc8>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <prvAddNewTaskToReadyList+0xd0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <prvAddNewTaskToReadyList+0xd0>)
 8003912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003914:	4b1d      	ldr	r3, [pc, #116]	; (800398c <prvAddNewTaskToReadyList+0xd0>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <prvAddNewTaskToReadyList+0xd4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d903      	bls.n	8003930 <prvAddNewTaskToReadyList+0x74>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <prvAddNewTaskToReadyList+0xd4>)
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <prvAddNewTaskToReadyList+0xd8>)
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7ff f8fd 	bl	8002b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800394c:	f001 fa42 	bl	8004dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003950:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <prvAddNewTaskToReadyList+0xcc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <prvAddNewTaskToReadyList+0xc8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	429a      	cmp	r2, r3
 8003964:	d207      	bcs.n	8003976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <prvAddNewTaskToReadyList+0xdc>)
 8003968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	24000d98 	.word	0x24000d98
 8003984:	240008c4 	.word	0x240008c4
 8003988:	24000da4 	.word	0x24000da4
 800398c:	24000db4 	.word	0x24000db4
 8003990:	24000da0 	.word	0x24000da0
 8003994:	240008c8 	.word	0x240008c8
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d017      	beq.n	80039de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <vTaskDelay+0x60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <vTaskDelay+0x30>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60bb      	str	r3, [r7, #8]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039cc:	f000 f88a 	bl	8003ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039d0:	2100      	movs	r1, #0
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fcfe 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039d8:	f000 f892 	bl	8003b00 <xTaskResumeAll>
 80039dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <vTaskDelay+0x64>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	24000dc0 	.word	0x24000dc0
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	; 0x28
 8003a08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a12:	463a      	mov	r2, r7
 8003a14:	1d39      	adds	r1, r7, #4
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f832 	bl	8002a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	9202      	str	r2, [sp, #8]
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	460a      	mov	r2, r1
 8003a32:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <vTaskStartScheduler+0xc0>)
 8003a34:	4824      	ldr	r0, [pc, #144]	; (8003ac8 <vTaskStartScheduler+0xc4>)
 8003a36:	f7ff fdf9 	bl	800362c <xTaskCreateStatic>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <vTaskStartScheduler+0xc8>)
 8003a3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <vTaskStartScheduler+0xc8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e001      	b.n	8003a52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a58:	f000 fd10 	bl	800447c <xTimerCreateTimerTask>
 8003a5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11b      	bne.n	8003a9c <vTaskStartScheduler+0x98>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	613b      	str	r3, [r7, #16]
}
 8003a76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <vTaskStartScheduler+0xcc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3354      	adds	r3, #84	; 0x54
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <vTaskStartScheduler+0xd0>)
 8003a80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <vTaskStartScheduler+0xd4>)
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <vTaskStartScheduler+0xd8>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <vTaskStartScheduler+0xdc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a96:	f001 f8cb 	bl	8004c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a9a:	e00e      	b.n	8003aba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa2:	d10a      	bne.n	8003aba <vTaskStartScheduler+0xb6>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60fb      	str	r3, [r7, #12]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <vTaskStartScheduler+0xb4>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0800583c 	.word	0x0800583c
 8003ac8:	08004109 	.word	0x08004109
 8003acc:	24000dbc 	.word	0x24000dbc
 8003ad0:	240008c4 	.word	0x240008c4
 8003ad4:	24000018 	.word	0x24000018
 8003ad8:	24000db8 	.word	0x24000db8
 8003adc:	24000da4 	.word	0x24000da4
 8003ae0:	24000d9c 	.word	0x24000d9c

08003ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <vTaskSuspendAll+0x18>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	4a03      	ldr	r2, [pc, #12]	; (8003afc <vTaskSuspendAll+0x18>)
 8003af0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	24000dc0 	.word	0x24000dc0

08003b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b0e:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <xTaskResumeAll+0x118>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <xTaskResumeAll+0x2c>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	603b      	str	r3, [r7, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b2c:	f001 f922 	bl	8004d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <xTaskResumeAll+0x118>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <xTaskResumeAll+0x118>)
 8003b38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <xTaskResumeAll+0x118>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d162      	bne.n	8003c08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <xTaskResumeAll+0x11c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d05e      	beq.n	8003c08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b4a:	e02f      	b.n	8003bac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4c:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <xTaskResumeAll+0x120>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3318      	adds	r3, #24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f851 	bl	8002c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f84c 	bl	8002c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <xTaskResumeAll+0x124>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <xTaskResumeAll+0x7c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <xTaskResumeAll+0x124>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <xTaskResumeAll+0x128>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe ffd7 	bl	8002b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <xTaskResumeAll+0x12c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <xTaskResumeAll+0x130>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <xTaskResumeAll+0x120>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1cb      	bne.n	8003b4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bba:	f000 fb5f 	bl	800427c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <xTaskResumeAll+0x134>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bca:	f000 f847 	bl	8003c5c <xTaskIncrementTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bd4:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <xTaskResumeAll+0x130>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f1      	bne.n	8003bca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <xTaskResumeAll+0x134>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <xTaskResumeAll+0x130>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <xTaskResumeAll+0x138>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c08:	f001 f8e4 	bl	8004dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	24000dc0 	.word	0x24000dc0
 8003c1c:	24000d98 	.word	0x24000d98
 8003c20:	24000d58 	.word	0x24000d58
 8003c24:	24000da0 	.word	0x24000da0
 8003c28:	240008c8 	.word	0x240008c8
 8003c2c:	240008c4 	.word	0x240008c4
 8003c30:	24000dac 	.word	0x24000dac
 8003c34:	24000da8 	.word	0x24000da8
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <xTaskGetTickCount+0x1c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c48:	687b      	ldr	r3, [r7, #4]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	24000d9c 	.word	0x24000d9c

08003c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c66:	4b4f      	ldr	r3, [pc, #316]	; (8003da4 <xTaskIncrementTick+0x148>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 808f 	bne.w	8003d8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c70:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <xTaskIncrementTick+0x14c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <xTaskIncrementTick+0x14c>)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d120      	bne.n	8003cc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <xTaskIncrementTick+0x150>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	603b      	str	r3, [r7, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <xTaskIncrementTick+0x46>
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <xTaskIncrementTick+0x150>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <xTaskIncrementTick+0x154>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3f      	ldr	r2, [pc, #252]	; (8003dac <xTaskIncrementTick+0x150>)
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <xTaskIncrementTick+0x154>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <xTaskIncrementTick+0x158>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a3d      	ldr	r2, [pc, #244]	; (8003db4 <xTaskIncrementTick+0x158>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	f000 fadb 	bl	800427c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <xTaskIncrementTick+0x15c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d349      	bcc.n	8003d64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd0:	4b36      	ldr	r3, [pc, #216]	; (8003dac <xTaskIncrementTick+0x150>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <xTaskIncrementTick+0x15c>)
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce0:	601a      	str	r2, [r3, #0]
					break;
 8003ce2:	e03f      	b.n	8003d64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <xTaskIncrementTick+0x150>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d203      	bcs.n	8003d04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	; (8003db8 <xTaskIncrementTick+0x15c>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d02:	e02f      	b.n	8003d64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe ff79 	bl	8002c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3318      	adds	r3, #24
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe ff70 	bl	8002c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d903      	bls.n	8003d34 <xTaskIncrementTick+0xd8>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <xTaskIncrementTick+0x160>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <xTaskIncrementTick+0x164>)
 8003d42:	441a      	add	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7fe fefb 	bl	8002b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <xTaskIncrementTick+0x168>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3b8      	bcc.n	8003cd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d62:	e7b5      	b.n	8003cd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <xTaskIncrementTick+0x168>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	4915      	ldr	r1, [pc, #84]	; (8003dc0 <xTaskIncrementTick+0x164>)
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d901      	bls.n	8003d80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <xTaskIncrementTick+0x16c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e004      	b.n	8003d98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <xTaskIncrementTick+0x170>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <xTaskIncrementTick+0x170>)
 8003d96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d98:	697b      	ldr	r3, [r7, #20]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	24000dc0 	.word	0x24000dc0
 8003da8:	24000d9c 	.word	0x24000d9c
 8003dac:	24000d50 	.word	0x24000d50
 8003db0:	24000d54 	.word	0x24000d54
 8003db4:	24000db0 	.word	0x24000db0
 8003db8:	24000db8 	.word	0x24000db8
 8003dbc:	24000da0 	.word	0x24000da0
 8003dc0:	240008c8 	.word	0x240008c8
 8003dc4:	240008c4 	.word	0x240008c4
 8003dc8:	24000dac 	.word	0x24000dac
 8003dcc:	24000da8 	.word	0x24000da8

08003dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <vTaskSwitchContext+0xb0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <vTaskSwitchContext+0xb4>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003de4:	e046      	b.n	8003e74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003de6:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <vTaskSwitchContext+0xb4>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <vTaskSwitchContext+0xb8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e010      	b.n	8003e16 <vTaskSwitchContext+0x46>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <vTaskSwitchContext+0x40>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	607b      	str	r3, [r7, #4]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <vTaskSwitchContext+0x3e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	491d      	ldr	r1, [pc, #116]	; (8003e8c <vTaskSwitchContext+0xbc>)
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0e4      	beq.n	8003df4 <vTaskSwitchContext+0x24>
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <vTaskSwitchContext+0xbc>)
 8003e36:	4413      	add	r3, r2
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d104      	bne.n	8003e5a <vTaskSwitchContext+0x8a>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <vTaskSwitchContext+0xc0>)
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <vTaskSwitchContext+0xb8>)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <vTaskSwitchContext+0xc0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3354      	adds	r3, #84	; 0x54
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <vTaskSwitchContext+0xc4>)
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	24000dc0 	.word	0x24000dc0
 8003e84:	24000dac 	.word	0x24000dac
 8003e88:	24000da0 	.word	0x24000da0
 8003e8c:	240008c8 	.word	0x240008c8
 8003e90:	240008c4 	.word	0x240008c4
 8003e94:	24000018 	.word	0x24000018

08003e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	60fb      	str	r3, [r7, #12]
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <vTaskPlaceOnEventList+0x44>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe fe61 	bl	8002b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ecc:	2101      	movs	r1, #1
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f000 fa80 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	240008c4 	.word	0x240008c4

08003ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	617b      	str	r3, [r7, #20]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3318      	adds	r3, #24
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7fe fe18 	bl	8002b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	68b8      	ldr	r0, [r7, #8]
 8003f26:	f000 fa55 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
	}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	240008c4 	.word	0x240008c4

08003f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	60fb      	str	r3, [r7, #12]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3318      	adds	r3, #24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fe49 	bl	8002c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <xTaskRemoveFromEventList+0xb0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11d      	bne.n	8003fb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fe40 	bl	8002c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <xTaskRemoveFromEventList+0xb4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d903      	bls.n	8003f94 <xTaskRemoveFromEventList+0x5c>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	4a16      	ldr	r2, [pc, #88]	; (8003fec <xTaskRemoveFromEventList+0xb4>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <xTaskRemoveFromEventList+0xb8>)
 8003fa2:	441a      	add	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f7fe fdcb 	bl	8002b46 <vListInsertEnd>
 8003fb0:	e005      	b.n	8003fbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	480e      	ldr	r0, [pc, #56]	; (8003ff4 <xTaskRemoveFromEventList+0xbc>)
 8003fba:	f7fe fdc4 	bl	8002b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <xTaskRemoveFromEventList+0xc0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d905      	bls.n	8003fd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <xTaskRemoveFromEventList+0xc4>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e001      	b.n	8003fdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fdc:	697b      	ldr	r3, [r7, #20]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	24000dc0 	.word	0x24000dc0
 8003fec:	24000da0 	.word	0x24000da0
 8003ff0:	240008c8 	.word	0x240008c8
 8003ff4:	24000d58 	.word	0x24000d58
 8003ff8:	240008c4 	.word	0x240008c4
 8003ffc:	24000dac 	.word	0x24000dac

08004000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <vTaskInternalSetTimeOutState+0x24>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <vTaskInternalSetTimeOutState+0x28>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	605a      	str	r2, [r3, #4]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	24000db0 	.word	0x24000db0
 8004028:	24000d9c 	.word	0x24000d9c

0800402c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	613b      	str	r3, [r7, #16]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800406e:	f000 fe81 	bl	8004d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <xTaskCheckForTimeOut+0xbc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408a:	d102      	bne.n	8004092 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e023      	b.n	80040da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <xTaskCheckForTimeOut+0xc0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d007      	beq.n	80040ae <xTaskCheckForTimeOut+0x82>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d302      	bcc.n	80040ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e015      	b.n	80040da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d20b      	bcs.n	80040d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	1ad2      	subs	r2, r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff9b 	bl	8004000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	e004      	b.n	80040da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040da:	f000 fe7b 	bl	8004dd4 <vPortExitCritical>

	return xReturn;
 80040de:	69fb      	ldr	r3, [r7, #28]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	24000d9c 	.word	0x24000d9c
 80040ec:	24000db0 	.word	0x24000db0

080040f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <vTaskMissedYield+0x14>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	24000dac 	.word	0x24000dac

08004108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004110:	f000 f852 	bl	80041b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <prvIdleTask+0x28>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d9f9      	bls.n	8004110 <prvIdleTask+0x8>
			{
				taskYIELD();
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <prvIdleTask+0x2c>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800412c:	e7f0      	b.n	8004110 <prvIdleTask+0x8>
 800412e:	bf00      	nop
 8004130:	240008c8 	.word	0x240008c8
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	e00c      	b.n	800415e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <prvInitialiseTaskLists+0x60>)
 8004150:	4413      	add	r3, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fcca 	bl	8002aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3301      	adds	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b37      	cmp	r3, #55	; 0x37
 8004162:	d9ef      	bls.n	8004144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004164:	480d      	ldr	r0, [pc, #52]	; (800419c <prvInitialiseTaskLists+0x64>)
 8004166:	f7fe fcc1 	bl	8002aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800416a:	480d      	ldr	r0, [pc, #52]	; (80041a0 <prvInitialiseTaskLists+0x68>)
 800416c:	f7fe fcbe 	bl	8002aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004170:	480c      	ldr	r0, [pc, #48]	; (80041a4 <prvInitialiseTaskLists+0x6c>)
 8004172:	f7fe fcbb 	bl	8002aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004176:	480c      	ldr	r0, [pc, #48]	; (80041a8 <prvInitialiseTaskLists+0x70>)
 8004178:	f7fe fcb8 	bl	8002aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800417c:	480b      	ldr	r0, [pc, #44]	; (80041ac <prvInitialiseTaskLists+0x74>)
 800417e:	f7fe fcb5 	bl	8002aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <prvInitialiseTaskLists+0x78>)
 8004184:	4a05      	ldr	r2, [pc, #20]	; (800419c <prvInitialiseTaskLists+0x64>)
 8004186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <prvInitialiseTaskLists+0x7c>)
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <prvInitialiseTaskLists+0x68>)
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	240008c8 	.word	0x240008c8
 800419c:	24000d28 	.word	0x24000d28
 80041a0:	24000d3c 	.word	0x24000d3c
 80041a4:	24000d58 	.word	0x24000d58
 80041a8:	24000d6c 	.word	0x24000d6c
 80041ac:	24000d84 	.word	0x24000d84
 80041b0:	24000d50 	.word	0x24000d50
 80041b4:	24000d54 	.word	0x24000d54

080041b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041be:	e019      	b.n	80041f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041c0:	f000 fdd8 	bl	8004d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <prvCheckTasksWaitingTermination+0x50>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fd15 	bl	8002c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <prvCheckTasksWaitingTermination+0x54>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a0b      	ldr	r2, [pc, #44]	; (800420c <prvCheckTasksWaitingTermination+0x54>)
 80041de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <prvCheckTasksWaitingTermination+0x58>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <prvCheckTasksWaitingTermination+0x58>)
 80041e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041ea:	f000 fdf3 	bl	8004dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f810 	bl	8004214 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <prvCheckTasksWaitingTermination+0x58>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e1      	bne.n	80041c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	24000d6c 	.word	0x24000d6c
 800420c:	24000d98 	.word	0x24000d98
 8004210:	24000d80 	.word	0x24000d80

08004214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3354      	adds	r3, #84	; 0x54
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fa21 	bl	8005668 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	4618      	mov	r0, r3
 8004236:	f000 ff8b 	bl	8005150 <vPortFree>
				vPortFree( pxTCB );
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 ff88 	bl	8005150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004240:	e018      	b.n	8004274 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004248:	2b01      	cmp	r3, #1
 800424a:	d103      	bne.n	8004254 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 ff7f 	bl	8005150 <vPortFree>
	}
 8004252:	e00f      	b.n	8004274 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800425a:	2b02      	cmp	r3, #2
 800425c:	d00a      	beq.n	8004274 <prvDeleteTCB+0x60>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	60fb      	str	r3, [r7, #12]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <prvDeleteTCB+0x5e>
	}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <prvResetNextTaskUnblockTime+0x38>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <prvResetNextTaskUnblockTime+0x3c>)
 800428e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004294:	e008      	b.n	80042a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <prvResetNextTaskUnblockTime+0x38>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <prvResetNextTaskUnblockTime+0x3c>)
 80042a6:	6013      	str	r3, [r2, #0]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	24000d50 	.word	0x24000d50
 80042b8:	24000db8 	.word	0x24000db8

080042bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <xTaskGetSchedulerState+0x34>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ca:	2301      	movs	r3, #1
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e008      	b.n	80042e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <xTaskGetSchedulerState+0x38>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042d8:	2302      	movs	r3, #2
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	e001      	b.n	80042e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042e2:	687b      	ldr	r3, [r7, #4]
	}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	24000da4 	.word	0x24000da4
 80042f4:	24000dc0 	.word	0x24000dc0

080042f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d056      	beq.n	80043bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800430e:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <xTaskPriorityDisinherit+0xd0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	429a      	cmp	r2, r3
 8004316:	d00a      	beq.n	800432e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60fb      	str	r3, [r7, #12]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60bb      	str	r3, [r7, #8]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	429a      	cmp	r2, r3
 8004360:	d02c      	beq.n	80043bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d128      	bne.n	80043bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fc46 	bl	8002c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <xTaskPriorityDisinherit+0xd4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d903      	bls.n	800439c <xTaskPriorityDisinherit+0xa4>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <xTaskPriorityDisinherit+0xd4>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <xTaskPriorityDisinherit+0xd8>)
 80043aa:	441a      	add	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe fbc7 	bl	8002b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
	}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	240008c4 	.word	0x240008c4
 80043cc:	24000da0 	.word	0x24000da0
 80043d0:	240008c8 	.word	0x240008c8

080043d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <prvAddCurrentTaskToDelayedList+0x90>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e4:	4b20      	ldr	r3, [pc, #128]	; (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fc08 	bl	8002c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f6:	d10a      	bne.n	800440e <prvAddCurrentTaskToDelayedList+0x3a>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4819      	ldr	r0, [pc, #100]	; (800446c <prvAddCurrentTaskToDelayedList+0x98>)
 8004408:	f7fe fb9d 	bl	8002b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800440c:	e026      	b.n	800445c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	429a      	cmp	r2, r3
 8004424:	d209      	bcs.n	800443a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fbab 	bl	8002b8e <vListInsert>
}
 8004438:	e010      	b.n	800445c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <prvAddCurrentTaskToDelayedList+0xa0>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <prvAddCurrentTaskToDelayedList+0x94>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe fba1 	bl	8002b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <prvAddCurrentTaskToDelayedList+0xa4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	d202      	bcs.n	800445c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	24000d9c 	.word	0x24000d9c
 8004468:	240008c4 	.word	0x240008c4
 800446c:	24000d84 	.word	0x24000d84
 8004470:	24000d54 	.word	0x24000d54
 8004474:	24000d50 	.word	0x24000d50
 8004478:	24000db8 	.word	0x24000db8

0800447c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004486:	f000 fb07 	bl	8004a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <xTimerCreateTimerTask+0x80>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d021      	beq.n	80044d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800449a:	1d3a      	adds	r2, r7, #4
 800449c:	f107 0108 	add.w	r1, r7, #8
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fb07 	bl	8002ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	9202      	str	r2, [sp, #8]
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	2302      	movs	r3, #2
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	460a      	mov	r2, r1
 80044bc:	4910      	ldr	r1, [pc, #64]	; (8004500 <xTimerCreateTimerTask+0x84>)
 80044be:	4811      	ldr	r0, [pc, #68]	; (8004504 <xTimerCreateTimerTask+0x88>)
 80044c0:	f7ff f8b4 	bl	800362c <xTaskCreateStatic>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <xTimerCreateTimerTask+0x8c>)
 80044c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <xTimerCreateTimerTask+0x8c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044d2:	2301      	movs	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	613b      	str	r3, [r7, #16]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	24000df4 	.word	0x24000df4
 8004500:	08005844 	.word	0x08005844
 8004504:	08004641 	.word	0x08004641
 8004508:	24000df8 	.word	0x24000df8

0800450c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	623b      	str	r3, [r7, #32]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800453a:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <xTimerGenericCommand+0x98>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02a      	beq.n	8004598 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b05      	cmp	r3, #5
 8004552:	dc18      	bgt.n	8004586 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004554:	f7ff feb2 	bl	80042bc <xTaskGetSchedulerState>
 8004558:	4603      	mov	r3, r0
 800455a:	2b02      	cmp	r3, #2
 800455c:	d109      	bne.n	8004572 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <xTimerGenericCommand+0x98>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f107 0110 	add.w	r1, r7, #16
 8004566:	2300      	movs	r3, #0
 8004568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800456a:	f7fe fc77 	bl	8002e5c <xQueueGenericSend>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24
 8004570:	e012      	b.n	8004598 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <xTimerGenericCommand+0x98>)
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	f107 0110 	add.w	r1, r7, #16
 800457a:	2300      	movs	r3, #0
 800457c:	2200      	movs	r2, #0
 800457e:	f7fe fc6d 	bl	8002e5c <xQueueGenericSend>
 8004582:	6278      	str	r0, [r7, #36]	; 0x24
 8004584:	e008      	b.n	8004598 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <xTimerGenericCommand+0x98>)
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	f107 0110 	add.w	r1, r7, #16
 800458e:	2300      	movs	r3, #0
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	f7fe fd61 	bl	8003058 <xQueueGenericSendFromISR>
 8004596:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800459a:	4618      	mov	r0, r3
 800459c:	3728      	adds	r7, #40	; 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	24000df4 	.word	0x24000df4

080045a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b2:	4b22      	ldr	r3, [pc, #136]	; (800463c <prvProcessExpiredTimer+0x94>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fb1d 	bl	8002c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d022      	beq.n	800461a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	18d1      	adds	r1, r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f000 f8d1 	bl	8004788 <prvInsertTimerInActiveList>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01f      	beq.n	800462c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045ec:	2300      	movs	r3, #0
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	2100      	movs	r1, #0
 80045f6:	6978      	ldr	r0, [r7, #20]
 80045f8:	f7ff ff88 	bl	800450c <xTimerGenericCommand>
 80045fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60fb      	str	r3, [r7, #12]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	4798      	blx	r3
}
 8004634:	bf00      	nop
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	24000dec 	.word	0x24000dec

08004640 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004648:	f107 0308 	add.w	r3, r7, #8
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f857 	bl	8004700 <prvGetNextExpireTime>
 8004652:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4619      	mov	r1, r3
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f803 	bl	8004664 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800465e:	f000 f8d5 	bl	800480c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004662:	e7f1      	b.n	8004648 <prvTimerTask+0x8>

08004664 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800466e:	f7ff fa39 	bl	8003ae4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f866 	bl	8004748 <prvSampleTimeNow>
 800467c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d130      	bne.n	80046e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <prvProcessTimerOrBlockTask+0x3c>
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	429a      	cmp	r2, r3
 8004690:	d806      	bhi.n	80046a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004692:	f7ff fa35 	bl	8003b00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff85 	bl	80045a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800469e:	e024      	b.n	80046ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <prvProcessTimerOrBlockTask+0x90>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <prvProcessTimerOrBlockTask+0x50>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <prvProcessTimerOrBlockTask+0x52>
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <prvProcessTimerOrBlockTask+0x94>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4619      	mov	r1, r3
 80046c6:	f7fe ff7d 	bl	80035c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ca:	f7ff fa19 	bl	8003b00 <xTaskResumeAll>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10a      	bne.n	80046ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <prvProcessTimerOrBlockTask+0x98>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy
}
 80046e4:	e001      	b.n	80046ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046e6:	f7ff fa0b 	bl	8003b00 <xTaskResumeAll>
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	24000df0 	.word	0x24000df0
 80046f8:	24000df4 	.word	0x24000df4
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <prvGetNextExpireTime+0x44>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <prvGetNextExpireTime+0x16>
 8004712:	2201      	movs	r2, #1
 8004714:	e000      	b.n	8004718 <prvGetNextExpireTime+0x18>
 8004716:	2200      	movs	r2, #0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <prvGetNextExpireTime+0x44>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e001      	b.n	8004734 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	24000dec 	.word	0x24000dec

08004748 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004750:	f7ff fa74 	bl	8003c3c <xTaskGetTickCount>
 8004754:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <prvSampleTimeNow+0x3c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d205      	bcs.n	800476c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004760:	f000 f936 	bl	80049d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e002      	b.n	8004772 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <prvSampleTimeNow+0x3c>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004778:	68fb      	ldr	r3, [r7, #12]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	24000dfc 	.word	0x24000dfc

08004788 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d812      	bhi.n	80047d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad2      	subs	r2, r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e01b      	b.n	80047fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <prvInsertTimerInActiveList+0x7c>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f7fe f9de 	bl	8002b8e <vListInsert>
 80047d2:	e012      	b.n	80047fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d206      	bcs.n	80047ea <prvInsertTimerInActiveList+0x62>
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e007      	b.n	80047fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <prvInsertTimerInActiveList+0x80>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe f9ca 	bl	8002b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047fa:	697b      	ldr	r3, [r7, #20]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	24000df0 	.word	0x24000df0
 8004808:	24000dec 	.word	0x24000dec

0800480c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08e      	sub	sp, #56	; 0x38
 8004810:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004812:	e0ca      	b.n	80049aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	da18      	bge.n	800484c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	3304      	adds	r3, #4
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	61fb      	str	r3, [r7, #28]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004842:	6850      	ldr	r0, [r2, #4]
 8004844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	4611      	mov	r1, r2
 800484a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f2c0 80aa 	blt.w	80049a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe f9cb 	bl	8002c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800486a:	463b      	mov	r3, r7
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ff6b 	bl	8004748 <prvSampleTimeNow>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b09      	cmp	r3, #9
 8004878:	f200 8097 	bhi.w	80049aa <prvProcessReceivedCommands+0x19e>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <prvProcessReceivedCommands+0x78>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048ad 	.word	0x080048ad
 8004890:	08004921 	.word	0x08004921
 8004894:	08004935 	.word	0x08004935
 8004898:	0800497f 	.word	0x0800497f
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048ad 	.word	0x080048ad
 80048a4:	08004921 	.word	0x08004921
 80048a8:	08004935 	.word	0x08004935
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	18d1      	adds	r1, r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048cc:	f7ff ff5c 	bl	8004788 <prvInsertTimerInActiveList>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d069      	beq.n	80049aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05e      	beq.n	80049aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	441a      	add	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2300      	movs	r3, #0
 80048fa:	2100      	movs	r1, #0
 80048fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fe:	f7ff fe05 	bl	800450c <xTimerGenericCommand>
 8004902:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d14f      	bne.n	80049aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61bb      	str	r3, [r7, #24]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004932:	e03a      	b.n	80049aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	617b      	str	r3, [r7, #20]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	18d1      	adds	r1, r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004978:	f7ff ff06 	bl	8004788 <prvInsertTimerInActiveList>
					break;
 800497c:	e015      	b.n	80049aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800498c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498e:	f000 fbdf 	bl	8005150 <vPortFree>
 8004992:	e00a      	b.n	80049aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049a6:	e000      	b.n	80049aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <prvProcessReceivedCommands+0x1c0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1d39      	adds	r1, r7, #4
 80049b0:	2200      	movs	r2, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fbec 	bl	8003190 <xQueueReceive>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f47f af2a 	bne.w	8004814 <prvProcessReceivedCommands+0x8>
	}
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	3730      	adds	r7, #48	; 0x30
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	24000df4 	.word	0x24000df4

080049d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049d6:	e048      	b.n	8004a6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049d8:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe f905 	bl	8002c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02e      	beq.n	8004a6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90e      	bls.n	8004a3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a2a:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7fe f8aa 	bl	8002b8e <vListInsert>
 8004a3a:	e016      	b.n	8004a6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2300      	movs	r3, #0
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	2100      	movs	r1, #0
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fd60 	bl	800450c <xTimerGenericCommand>
 8004a4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	603b      	str	r3, [r7, #0]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1b1      	bne.n	80049d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <prvSwitchTimerLists+0xc4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <prvSwitchTimerLists+0xc0>)
 8004a80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a82:	4a04      	ldr	r2, [pc, #16]	; (8004a94 <prvSwitchTimerLists+0xc4>)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	6013      	str	r3, [r2, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	24000dec 	.word	0x24000dec
 8004a94:	24000df0 	.word	0x24000df0

08004a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a9e:	f000 f969 	bl	8004d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <prvCheckForValidListAndQueue+0x60>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d120      	bne.n	8004aec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aaa:	4814      	ldr	r0, [pc, #80]	; (8004afc <prvCheckForValidListAndQueue+0x64>)
 8004aac:	f7fe f81e 	bl	8002aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ab0:	4813      	ldr	r0, [pc, #76]	; (8004b00 <prvCheckForValidListAndQueue+0x68>)
 8004ab2:	f7fe f81b 	bl	8002aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <prvCheckForValidListAndQueue+0x6c>)
 8004ab8:	4a10      	ldr	r2, [pc, #64]	; (8004afc <prvCheckForValidListAndQueue+0x64>)
 8004aba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <prvCheckForValidListAndQueue+0x70>)
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <prvCheckForValidListAndQueue+0x68>)
 8004ac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <prvCheckForValidListAndQueue+0x74>)
 8004ac8:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <prvCheckForValidListAndQueue+0x78>)
 8004aca:	2110      	movs	r1, #16
 8004acc:	200a      	movs	r0, #10
 8004ace:	f7fe f929 	bl	8002d24 <xQueueGenericCreateStatic>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <prvCheckForValidListAndQueue+0x60>)
 8004ad6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <prvCheckForValidListAndQueue+0x60>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <prvCheckForValidListAndQueue+0x60>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	490b      	ldr	r1, [pc, #44]	; (8004b14 <prvCheckForValidListAndQueue+0x7c>)
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fd42 	bl	8003570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004aec:	f000 f972 	bl	8004dd4 <vPortExitCritical>
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	24000df4 	.word	0x24000df4
 8004afc:	24000dc4 	.word	0x24000dc4
 8004b00:	24000dd8 	.word	0x24000dd8
 8004b04:	24000dec 	.word	0x24000dec
 8004b08:	24000df0 	.word	0x24000df0
 8004b0c:	24000ea0 	.word	0x24000ea0
 8004b10:	24000e00 	.word	0x24000e00
 8004b14:	0800584c 	.word	0x0800584c

08004b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b48:	4a0c      	ldr	r2, [pc, #48]	; (8004b7c <pxPortInitialiseStack+0x64>)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b14      	subs	r3, #20
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b20      	subs	r3, #32
 8004b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	08004b81 	.word	0x08004b81

08004b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <prvTaskExitError+0x54>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b92:	d00a      	beq.n	8004baa <prvTaskExitError+0x2a>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <prvTaskExitError+0x28>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
}
 8004bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bbe:	bf00      	nop
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0fc      	beq.n	8004bc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	24000010 	.word	0x24000010
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	4770      	bx	lr
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst2>:
 8004c00:	240008c4 	.word	0x240008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c08:	4808      	ldr	r0, [pc, #32]	; (8004c2c <prvPortStartFirstTask+0x24>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8814 	msr	CONTROL, r0
 8004c1a:	b662      	cpsie	i
 8004c1c:	b661      	cpsie	f
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	df00      	svc	0
 8004c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c2a:	bf00      	nop
 8004c2c:	e000ed08 	.word	0xe000ed08

08004c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c36:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <xPortStartScheduler+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10a      	bne.n	8004c56 <xPortStartScheduler+0x26>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c56:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <xPortStartScheduler+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10a      	bne.n	8004c76 <xPortStartScheduler+0x46>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c76:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <xPortStartScheduler+0x130>)
 8004c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <xPortStartScheduler+0x134>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca4:	e009      	b.n	8004cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <xPortStartScheduler+0x134>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d0ef      	beq.n	8004ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cc6:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1c3 0307 	rsb	r3, r3, #7
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00a      	beq.n	8004ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60bb      	str	r3, [r7, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d1e:	f000 f8dd 	bl	8004edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <xPortStartScheduler+0x13c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d28:	f000 f8fc 	bl	8004f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d2c:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <xPortStartScheduler+0x140>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <xPortStartScheduler+0x140>)
 8004d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d38:	f7ff ff66 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d3c:	f7ff f848 	bl	8003dd0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d40:	f7ff ff1e 	bl	8004b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000ed00 	.word	0xe000ed00
 8004d54:	410fc271 	.word	0x410fc271
 8004d58:	410fc270 	.word	0x410fc270
 8004d5c:	e000e400 	.word	0xe000e400
 8004d60:	24000ef0 	.word	0x24000ef0
 8004d64:	24000ef4 	.word	0x24000ef4
 8004d68:	e000ed20 	.word	0xe000ed20
 8004d6c:	24000010 	.word	0x24000010
 8004d70:	e000ef34 	.word	0xe000ef34

08004d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
}
 8004d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10f      	bne.n	8004dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <vPortEnterCritical+0x5c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	603b      	str	r3, [r7, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <vPortEnterCritical+0x4a>
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	24000010 	.word	0x24000010
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <vPortExitCritical+0x50>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <vPortExitCritical+0x24>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	607b      	str	r3, [r7, #4]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <vPortExitCritical+0x50>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <vPortExitCritical+0x50>)
 8004e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <vPortExitCritical+0x42>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f383 8811 	msr	BASEPRI, r3
}
 8004e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	24000010 	.word	0x24000010
	...

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	f01e 0f10 	tst.w	lr, #16
 8004e40:	bf08      	it	eq
 8004e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	6010      	str	r0, [r2, #0]
 8004e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e54:	f380 8811 	msr	BASEPRI, r0
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f7fe ffb6 	bl	8003dd0 <vTaskSwitchContext>
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f380 8811 	msr	BASEPRI, r0
 8004e6c:	bc09      	pop	{r0, r3}
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	6808      	ldr	r0, [r1, #0]
 8004e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e76:	f01e 0f10 	tst.w	lr, #16
 8004e7a:	bf08      	it	eq
 8004e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e80:	f380 8809 	msr	PSP, r0
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w

08004e90 <pxCurrentTCBConst>:
 8004e90:	240008c4 	.word	0x240008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004eb2:	f7fe fed3 	bl	8003c5c <xTaskIncrementTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <xPortSysTickHandler+0x40>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <vPortSetupTimerInterrupt+0x38>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <vPortSetupTimerInterrupt+0x3c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <vPortSetupTimerInterrupt+0x40>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <vPortSetupTimerInterrupt+0x44>)
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004efe:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e010 	.word	0xe000e010
 8004f14:	e000e018 	.word	0xe000e018
 8004f18:	24000000 	.word	0x24000000
 8004f1c:	10624dd3 	.word	0x10624dd3
 8004f20:	e000e014 	.word	0xe000e014

08004f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f34 <vPortEnableVFP+0x10>
 8004f28:	6801      	ldr	r1, [r0, #0]
 8004f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f2e:	6001      	str	r1, [r0, #0]
 8004f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f32:	bf00      	nop
 8004f34:	e000ed88 	.word	0xe000ed88

08004f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f3e:	f3ef 8305 	mrs	r3, IPSR
 8004f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d914      	bls.n	8004f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <vPortValidateInterruptPriority+0x70>)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <vPortValidateInterruptPriority+0x74>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	7afa      	ldrb	r2, [r7, #11]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20a      	bcs.n	8004f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <vPortValidateInterruptPriority+0x78>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <vPortValidateInterruptPriority+0x7c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d90a      	bls.n	8004f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	603b      	str	r3, [r7, #0]
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <vPortValidateInterruptPriority+0x60>
	}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000e3f0 	.word	0xe000e3f0
 8004fac:	24000ef0 	.word	0x24000ef0
 8004fb0:	e000ed0c 	.word	0xe000ed0c
 8004fb4:	24000ef4 	.word	0x24000ef4

08004fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	; 0x28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fc4:	f7fe fd8e 	bl	8003ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fc8:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <pvPortMalloc+0x180>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fd0:	f000 f920 	bl	8005214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fd4:	4b59      	ldr	r3, [pc, #356]	; (800513c <pvPortMalloc+0x184>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8093 	bne.w	8005108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01d      	beq.n	8005024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fe8:	2208      	movs	r2, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	3308      	adds	r3, #8
 8005002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <pvPortMalloc+0x6c>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	617b      	str	r3, [r7, #20]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d06e      	beq.n	8005108 <pvPortMalloc+0x150>
 800502a:	4b45      	ldr	r3, [pc, #276]	; (8005140 <pvPortMalloc+0x188>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d869      	bhi.n	8005108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <pvPortMalloc+0x18c>)
 8005036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005038:	4b42      	ldr	r3, [pc, #264]	; (8005144 <pvPortMalloc+0x18c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800503e:	e004      	b.n	800504a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d903      	bls.n	800505c <pvPortMalloc+0xa4>
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f1      	bne.n	8005040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800505c:	4b36      	ldr	r3, [pc, #216]	; (8005138 <pvPortMalloc+0x180>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005062:	429a      	cmp	r2, r3
 8005064:	d050      	beq.n	8005108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2208      	movs	r2, #8
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	2308      	movs	r3, #8
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	429a      	cmp	r2, r3
 8005086:	d91f      	bls.n	80050c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <pvPortMalloc+0xf8>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	613b      	str	r3, [r7, #16]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050c2:	69b8      	ldr	r0, [r7, #24]
 80050c4:	f000 f908 	bl	80052d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <pvPortMalloc+0x188>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <pvPortMalloc+0x188>)
 80050d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <pvPortMalloc+0x188>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <pvPortMalloc+0x190>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d203      	bcs.n	80050ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <pvPortMalloc+0x188>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <pvPortMalloc+0x190>)
 80050e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <pvPortMalloc+0x184>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <pvPortMalloc+0x194>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <pvPortMalloc+0x194>)
 8005106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005108:	f7fe fcfa 	bl	8003b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <pvPortMalloc+0x174>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60fb      	str	r3, [r7, #12]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <pvPortMalloc+0x172>
	return pvReturn;
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3728      	adds	r7, #40	; 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	24004b00 	.word	0x24004b00
 800513c:	24004b14 	.word	0x24004b14
 8005140:	24004b04 	.word	0x24004b04
 8005144:	24004af8 	.word	0x24004af8
 8005148:	24004b08 	.word	0x24004b08
 800514c:	24004b0c 	.word	0x24004b0c

08005150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d04d      	beq.n	80051fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005162:	2308      	movs	r3, #8
 8005164:	425b      	negs	r3, r3
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4413      	add	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <vPortFree+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4013      	ands	r3, r2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <vPortFree+0x44>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60fb      	str	r3, [r7, #12]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <vPortFree+0x62>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	60bb      	str	r3, [r7, #8]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <vPortFree+0xb8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01e      	beq.n	80051fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11a      	bne.n	80051fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <vPortFree+0xb8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	401a      	ands	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051d8:	f7fe fc84 	bl	8003ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <vPortFree+0xbc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <vPortFree+0xbc>)
 80051e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f000 f874 	bl	80052d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <vPortFree+0xc0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	4a06      	ldr	r2, [pc, #24]	; (8005210 <vPortFree+0xc0>)
 80051f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051fa:	f7fe fc81 	bl	8003b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	24004b14 	.word	0x24004b14
 800520c:	24004b04 	.word	0x24004b04
 8005210:	24004b10 	.word	0x24004b10

08005214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800521a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800521e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005220:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <prvHeapInit+0xac>)
 8005222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3307      	adds	r3, #7
 8005232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <prvHeapInit+0xac>)
 8005244:	4413      	add	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800524c:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <prvHeapInit+0xb0>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <prvHeapInit+0xb0>)
 8005254:	2200      	movs	r2, #0
 8005256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4413      	add	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005260:	2208      	movs	r2, #8
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <prvHeapInit+0xb4>)
 8005274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <prvHeapInit+0xb4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <prvHeapInit+0xb4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvHeapInit+0xb4>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <prvHeapInit+0xb8>)
 80052a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <prvHeapInit+0xbc>)
 80052aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <prvHeapInit+0xc0>)
 80052ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	24000ef8 	.word	0x24000ef8
 80052c4:	24004af8 	.word	0x24004af8
 80052c8:	24004b00 	.word	0x24004b00
 80052cc:	24004b08 	.word	0x24004b08
 80052d0:	24004b04 	.word	0x24004b04
 80052d4:	24004b14 	.word	0x24004b14

080052d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <prvInsertBlockIntoFreeList+0xac>)
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e002      	b.n	80052ec <prvInsertBlockIntoFreeList+0x14>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d8f7      	bhi.n	80052e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d108      	bne.n	800531a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d118      	bne.n	8005360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <prvInsertBlockIntoFreeList+0xb0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d00d      	beq.n	8005356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e008      	b.n	8005368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <prvInsertBlockIntoFreeList+0xb0>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e003      	b.n	8005368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d002      	beq.n	8005376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	24004af8 	.word	0x24004af8
 8005388:	24004b00 	.word	0x24004b00

0800538c <_Znwj>:
 800538c:	2801      	cmp	r0, #1
 800538e:	bf38      	it	cc
 8005390:	2001      	movcc	r0, #1
 8005392:	b510      	push	{r4, lr}
 8005394:	4604      	mov	r4, r0
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f85a 	bl	8005450 <malloc>
 800539c:	b930      	cbnz	r0, 80053ac <_Znwj+0x20>
 800539e:	f000 f81b 	bl	80053d8 <_ZSt15get_new_handlerv>
 80053a2:	b908      	cbnz	r0, 80053a8 <_Znwj+0x1c>
 80053a4:	f000 f820 	bl	80053e8 <abort>
 80053a8:	4780      	blx	r0
 80053aa:	e7f4      	b.n	8005396 <_Znwj+0xa>
 80053ac:	bd10      	pop	{r4, pc}

080053ae <__cxa_pure_virtual>:
 80053ae:	b508      	push	{r3, lr}
 80053b0:	f000 f80c 	bl	80053cc <_ZSt9terminatev>

080053b4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80053b4:	b508      	push	{r3, lr}
 80053b6:	4780      	blx	r0
 80053b8:	f000 f816 	bl	80053e8 <abort>

080053bc <_ZSt13get_terminatev>:
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <_ZSt13get_terminatev+0xc>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	f3bf 8f5b 	dmb	ish
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	24000014 	.word	0x24000014

080053cc <_ZSt9terminatev>:
 80053cc:	b508      	push	{r3, lr}
 80053ce:	f7ff fff5 	bl	80053bc <_ZSt13get_terminatev>
 80053d2:	f7ff ffef 	bl	80053b4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080053d8 <_ZSt15get_new_handlerv>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <_ZSt15get_new_handlerv+0xc>)
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	f3bf 8f5b 	dmb	ish
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	24004b18 	.word	0x24004b18

080053e8 <abort>:
 80053e8:	b508      	push	{r3, lr}
 80053ea:	2006      	movs	r0, #6
 80053ec:	f000 f9d0 	bl	8005790 <raise>
 80053f0:	2001      	movs	r0, #1
 80053f2:	f7fb fb97 	bl	8000b24 <_exit>
	...

080053f8 <__errno>:
 80053f8:	4b01      	ldr	r3, [pc, #4]	; (8005400 <__errno+0x8>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	24000018 	.word	0x24000018

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4d0d      	ldr	r5, [pc, #52]	; (800543c <__libc_init_array+0x38>)
 8005408:	4c0d      	ldr	r4, [pc, #52]	; (8005440 <__libc_init_array+0x3c>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	2600      	movs	r6, #0
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	4d0b      	ldr	r5, [pc, #44]	; (8005444 <__libc_init_array+0x40>)
 8005416:	4c0c      	ldr	r4, [pc, #48]	; (8005448 <__libc_init_array+0x44>)
 8005418:	f000 f9e2 	bl	80057e0 <_init>
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	2600      	movs	r6, #0
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	08005a14 	.word	0x08005a14
 8005440:	08005a14 	.word	0x08005a14
 8005444:	08005a14 	.word	0x08005a14
 8005448:	08005a18 	.word	0x08005a18

0800544c <__retarget_lock_acquire_recursive>:
 800544c:	4770      	bx	lr

0800544e <__retarget_lock_release_recursive>:
 800544e:	4770      	bx	lr

08005450 <malloc>:
 8005450:	4b02      	ldr	r3, [pc, #8]	; (800545c <malloc+0xc>)
 8005452:	4601      	mov	r1, r0
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	f000 b885 	b.w	8005564 <_malloc_r>
 800545a:	bf00      	nop
 800545c:	24000018 	.word	0x24000018

08005460 <memcpy>:
 8005460:	440a      	add	r2, r1
 8005462:	4291      	cmp	r1, r2
 8005464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005468:	d100      	bne.n	800546c <memcpy+0xc>
 800546a:	4770      	bx	lr
 800546c:	b510      	push	{r4, lr}
 800546e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005476:	4291      	cmp	r1, r2
 8005478:	d1f9      	bne.n	800546e <memcpy+0xe>
 800547a:	bd10      	pop	{r4, pc}

0800547c <memset>:
 800547c:	4402      	add	r2, r0
 800547e:	4603      	mov	r3, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <_free_r>:
 800548c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800548e:	2900      	cmp	r1, #0
 8005490:	d044      	beq.n	800551c <_free_r+0x90>
 8005492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005496:	9001      	str	r0, [sp, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f1a1 0404 	sub.w	r4, r1, #4
 800549e:	bfb8      	it	lt
 80054a0:	18e4      	addlt	r4, r4, r3
 80054a2:	f000 f991 	bl	80057c8 <__malloc_lock>
 80054a6:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <_free_r+0x94>)
 80054a8:	9801      	ldr	r0, [sp, #4]
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	b933      	cbnz	r3, 80054bc <_free_r+0x30>
 80054ae:	6063      	str	r3, [r4, #4]
 80054b0:	6014      	str	r4, [r2, #0]
 80054b2:	b003      	add	sp, #12
 80054b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054b8:	f000 b98c 	b.w	80057d4 <__malloc_unlock>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d908      	bls.n	80054d2 <_free_r+0x46>
 80054c0:	6825      	ldr	r5, [r4, #0]
 80054c2:	1961      	adds	r1, r4, r5
 80054c4:	428b      	cmp	r3, r1
 80054c6:	bf01      	itttt	eq
 80054c8:	6819      	ldreq	r1, [r3, #0]
 80054ca:	685b      	ldreq	r3, [r3, #4]
 80054cc:	1949      	addeq	r1, r1, r5
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	e7ed      	b.n	80054ae <_free_r+0x22>
 80054d2:	461a      	mov	r2, r3
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	b10b      	cbz	r3, 80054dc <_free_r+0x50>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d9fa      	bls.n	80054d2 <_free_r+0x46>
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	1855      	adds	r5, r2, r1
 80054e0:	42a5      	cmp	r5, r4
 80054e2:	d10b      	bne.n	80054fc <_free_r+0x70>
 80054e4:	6824      	ldr	r4, [r4, #0]
 80054e6:	4421      	add	r1, r4
 80054e8:	1854      	adds	r4, r2, r1
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	d1e0      	bne.n	80054b2 <_free_r+0x26>
 80054f0:	681c      	ldr	r4, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	6053      	str	r3, [r2, #4]
 80054f6:	4421      	add	r1, r4
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	e7da      	b.n	80054b2 <_free_r+0x26>
 80054fc:	d902      	bls.n	8005504 <_free_r+0x78>
 80054fe:	230c      	movs	r3, #12
 8005500:	6003      	str	r3, [r0, #0]
 8005502:	e7d6      	b.n	80054b2 <_free_r+0x26>
 8005504:	6825      	ldr	r5, [r4, #0]
 8005506:	1961      	adds	r1, r4, r5
 8005508:	428b      	cmp	r3, r1
 800550a:	bf04      	itt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	6063      	str	r3, [r4, #4]
 8005512:	bf04      	itt	eq
 8005514:	1949      	addeq	r1, r1, r5
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	6054      	str	r4, [r2, #4]
 800551a:	e7ca      	b.n	80054b2 <_free_r+0x26>
 800551c:	b003      	add	sp, #12
 800551e:	bd30      	pop	{r4, r5, pc}
 8005520:	24004b20 	.word	0x24004b20

08005524 <sbrk_aligned>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4e0e      	ldr	r6, [pc, #56]	; (8005560 <sbrk_aligned+0x3c>)
 8005528:	460c      	mov	r4, r1
 800552a:	6831      	ldr	r1, [r6, #0]
 800552c:	4605      	mov	r5, r0
 800552e:	b911      	cbnz	r1, 8005536 <sbrk_aligned+0x12>
 8005530:	f000 f8f6 	bl	8005720 <_sbrk_r>
 8005534:	6030      	str	r0, [r6, #0]
 8005536:	4621      	mov	r1, r4
 8005538:	4628      	mov	r0, r5
 800553a:	f000 f8f1 	bl	8005720 <_sbrk_r>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	d00a      	beq.n	8005558 <sbrk_aligned+0x34>
 8005542:	1cc4      	adds	r4, r0, #3
 8005544:	f024 0403 	bic.w	r4, r4, #3
 8005548:	42a0      	cmp	r0, r4
 800554a:	d007      	beq.n	800555c <sbrk_aligned+0x38>
 800554c:	1a21      	subs	r1, r4, r0
 800554e:	4628      	mov	r0, r5
 8005550:	f000 f8e6 	bl	8005720 <_sbrk_r>
 8005554:	3001      	adds	r0, #1
 8005556:	d101      	bne.n	800555c <sbrk_aligned+0x38>
 8005558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800555c:	4620      	mov	r0, r4
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	24004b24 	.word	0x24004b24

08005564 <_malloc_r>:
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005568:	1ccd      	adds	r5, r1, #3
 800556a:	f025 0503 	bic.w	r5, r5, #3
 800556e:	3508      	adds	r5, #8
 8005570:	2d0c      	cmp	r5, #12
 8005572:	bf38      	it	cc
 8005574:	250c      	movcc	r5, #12
 8005576:	2d00      	cmp	r5, #0
 8005578:	4607      	mov	r7, r0
 800557a:	db01      	blt.n	8005580 <_malloc_r+0x1c>
 800557c:	42a9      	cmp	r1, r5
 800557e:	d905      	bls.n	800558c <_malloc_r+0x28>
 8005580:	230c      	movs	r3, #12
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	2600      	movs	r6, #0
 8005586:	4630      	mov	r0, r6
 8005588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800558c:	4e2e      	ldr	r6, [pc, #184]	; (8005648 <_malloc_r+0xe4>)
 800558e:	f000 f91b 	bl	80057c8 <__malloc_lock>
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	461c      	mov	r4, r3
 8005596:	bb34      	cbnz	r4, 80055e6 <_malloc_r+0x82>
 8005598:	4629      	mov	r1, r5
 800559a:	4638      	mov	r0, r7
 800559c:	f7ff ffc2 	bl	8005524 <sbrk_aligned>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	4604      	mov	r4, r0
 80055a4:	d14d      	bne.n	8005642 <_malloc_r+0xde>
 80055a6:	6834      	ldr	r4, [r6, #0]
 80055a8:	4626      	mov	r6, r4
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	d140      	bne.n	8005630 <_malloc_r+0xcc>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	4631      	mov	r1, r6
 80055b2:	4638      	mov	r0, r7
 80055b4:	eb04 0803 	add.w	r8, r4, r3
 80055b8:	f000 f8b2 	bl	8005720 <_sbrk_r>
 80055bc:	4580      	cmp	r8, r0
 80055be:	d13a      	bne.n	8005636 <_malloc_r+0xd2>
 80055c0:	6821      	ldr	r1, [r4, #0]
 80055c2:	3503      	adds	r5, #3
 80055c4:	1a6d      	subs	r5, r5, r1
 80055c6:	f025 0503 	bic.w	r5, r5, #3
 80055ca:	3508      	adds	r5, #8
 80055cc:	2d0c      	cmp	r5, #12
 80055ce:	bf38      	it	cc
 80055d0:	250c      	movcc	r5, #12
 80055d2:	4629      	mov	r1, r5
 80055d4:	4638      	mov	r0, r7
 80055d6:	f7ff ffa5 	bl	8005524 <sbrk_aligned>
 80055da:	3001      	adds	r0, #1
 80055dc:	d02b      	beq.n	8005636 <_malloc_r+0xd2>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	442b      	add	r3, r5
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	e00e      	b.n	8005604 <_malloc_r+0xa0>
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	1b52      	subs	r2, r2, r5
 80055ea:	d41e      	bmi.n	800562a <_malloc_r+0xc6>
 80055ec:	2a0b      	cmp	r2, #11
 80055ee:	d916      	bls.n	800561e <_malloc_r+0xba>
 80055f0:	1961      	adds	r1, r4, r5
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	6025      	str	r5, [r4, #0]
 80055f6:	bf18      	it	ne
 80055f8:	6059      	strne	r1, [r3, #4]
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	bf08      	it	eq
 80055fe:	6031      	streq	r1, [r6, #0]
 8005600:	5162      	str	r2, [r4, r5]
 8005602:	604b      	str	r3, [r1, #4]
 8005604:	4638      	mov	r0, r7
 8005606:	f104 060b 	add.w	r6, r4, #11
 800560a:	f000 f8e3 	bl	80057d4 <__malloc_unlock>
 800560e:	f026 0607 	bic.w	r6, r6, #7
 8005612:	1d23      	adds	r3, r4, #4
 8005614:	1af2      	subs	r2, r6, r3
 8005616:	d0b6      	beq.n	8005586 <_malloc_r+0x22>
 8005618:	1b9b      	subs	r3, r3, r6
 800561a:	50a3      	str	r3, [r4, r2]
 800561c:	e7b3      	b.n	8005586 <_malloc_r+0x22>
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	42a3      	cmp	r3, r4
 8005622:	bf0c      	ite	eq
 8005624:	6032      	streq	r2, [r6, #0]
 8005626:	605a      	strne	r2, [r3, #4]
 8005628:	e7ec      	b.n	8005604 <_malloc_r+0xa0>
 800562a:	4623      	mov	r3, r4
 800562c:	6864      	ldr	r4, [r4, #4]
 800562e:	e7b2      	b.n	8005596 <_malloc_r+0x32>
 8005630:	4634      	mov	r4, r6
 8005632:	6876      	ldr	r6, [r6, #4]
 8005634:	e7b9      	b.n	80055aa <_malloc_r+0x46>
 8005636:	230c      	movs	r3, #12
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4638      	mov	r0, r7
 800563c:	f000 f8ca 	bl	80057d4 <__malloc_unlock>
 8005640:	e7a1      	b.n	8005586 <_malloc_r+0x22>
 8005642:	6025      	str	r5, [r4, #0]
 8005644:	e7de      	b.n	8005604 <_malloc_r+0xa0>
 8005646:	bf00      	nop
 8005648:	24004b20 	.word	0x24004b20

0800564c <cleanup_glue>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	6809      	ldr	r1, [r1, #0]
 8005652:	4605      	mov	r5, r0
 8005654:	b109      	cbz	r1, 800565a <cleanup_glue+0xe>
 8005656:	f7ff fff9 	bl	800564c <cleanup_glue>
 800565a:	4621      	mov	r1, r4
 800565c:	4628      	mov	r0, r5
 800565e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005662:	f7ff bf13 	b.w	800548c <_free_r>
	...

08005668 <_reclaim_reent>:
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <_reclaim_reent+0xb4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4283      	cmp	r3, r0
 800566e:	b570      	push	{r4, r5, r6, lr}
 8005670:	4604      	mov	r4, r0
 8005672:	d051      	beq.n	8005718 <_reclaim_reent+0xb0>
 8005674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005676:	b143      	cbz	r3, 800568a <_reclaim_reent+0x22>
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d14a      	bne.n	8005714 <_reclaim_reent+0xac>
 800567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	b111      	cbz	r1, 800568a <_reclaim_reent+0x22>
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff ff01 	bl	800548c <_free_r>
 800568a:	6961      	ldr	r1, [r4, #20]
 800568c:	b111      	cbz	r1, 8005694 <_reclaim_reent+0x2c>
 800568e:	4620      	mov	r0, r4
 8005690:	f7ff fefc 	bl	800548c <_free_r>
 8005694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005696:	b111      	cbz	r1, 800569e <_reclaim_reent+0x36>
 8005698:	4620      	mov	r0, r4
 800569a:	f7ff fef7 	bl	800548c <_free_r>
 800569e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056a0:	b111      	cbz	r1, 80056a8 <_reclaim_reent+0x40>
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7ff fef2 	bl	800548c <_free_r>
 80056a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80056aa:	b111      	cbz	r1, 80056b2 <_reclaim_reent+0x4a>
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7ff feed 	bl	800548c <_free_r>
 80056b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80056b4:	b111      	cbz	r1, 80056bc <_reclaim_reent+0x54>
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff fee8 	bl	800548c <_free_r>
 80056bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80056be:	b111      	cbz	r1, 80056c6 <_reclaim_reent+0x5e>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff fee3 	bl	800548c <_free_r>
 80056c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80056c8:	b111      	cbz	r1, 80056d0 <_reclaim_reent+0x68>
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff fede 	bl	800548c <_free_r>
 80056d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d2:	b111      	cbz	r1, 80056da <_reclaim_reent+0x72>
 80056d4:	4620      	mov	r0, r4
 80056d6:	f7ff fed9 	bl	800548c <_free_r>
 80056da:	69a3      	ldr	r3, [r4, #24]
 80056dc:	b1e3      	cbz	r3, 8005718 <_reclaim_reent+0xb0>
 80056de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056e0:	4620      	mov	r0, r4
 80056e2:	4798      	blx	r3
 80056e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056e6:	b1b9      	cbz	r1, 8005718 <_reclaim_reent+0xb0>
 80056e8:	4620      	mov	r0, r4
 80056ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056ee:	f7ff bfad 	b.w	800564c <cleanup_glue>
 80056f2:	5949      	ldr	r1, [r1, r5]
 80056f4:	b941      	cbnz	r1, 8005708 <_reclaim_reent+0xa0>
 80056f6:	3504      	adds	r5, #4
 80056f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056fa:	2d80      	cmp	r5, #128	; 0x80
 80056fc:	68d9      	ldr	r1, [r3, #12]
 80056fe:	d1f8      	bne.n	80056f2 <_reclaim_reent+0x8a>
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff fec3 	bl	800548c <_free_r>
 8005706:	e7ba      	b.n	800567e <_reclaim_reent+0x16>
 8005708:	680e      	ldr	r6, [r1, #0]
 800570a:	4620      	mov	r0, r4
 800570c:	f7ff febe 	bl	800548c <_free_r>
 8005710:	4631      	mov	r1, r6
 8005712:	e7ef      	b.n	80056f4 <_reclaim_reent+0x8c>
 8005714:	2500      	movs	r5, #0
 8005716:	e7ef      	b.n	80056f8 <_reclaim_reent+0x90>
 8005718:	bd70      	pop	{r4, r5, r6, pc}
 800571a:	bf00      	nop
 800571c:	24000018 	.word	0x24000018

08005720 <_sbrk_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d06      	ldr	r5, [pc, #24]	; (800573c <_sbrk_r+0x1c>)
 8005724:	2300      	movs	r3, #0
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	f7fb fa04 	bl	8000b38 <_sbrk>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_sbrk_r+0x1a>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_sbrk_r+0x1a>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	24004b28 	.word	0x24004b28

08005740 <_raise_r>:
 8005740:	291f      	cmp	r1, #31
 8005742:	b538      	push	{r3, r4, r5, lr}
 8005744:	4604      	mov	r4, r0
 8005746:	460d      	mov	r5, r1
 8005748:	d904      	bls.n	8005754 <_raise_r+0x14>
 800574a:	2316      	movs	r3, #22
 800574c:	6003      	str	r3, [r0, #0]
 800574e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005756:	b112      	cbz	r2, 800575e <_raise_r+0x1e>
 8005758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800575c:	b94b      	cbnz	r3, 8005772 <_raise_r+0x32>
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f830 	bl	80057c4 <_getpid_r>
 8005764:	462a      	mov	r2, r5
 8005766:	4601      	mov	r1, r0
 8005768:	4620      	mov	r0, r4
 800576a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800576e:	f000 b817 	b.w	80057a0 <_kill_r>
 8005772:	2b01      	cmp	r3, #1
 8005774:	d00a      	beq.n	800578c <_raise_r+0x4c>
 8005776:	1c59      	adds	r1, r3, #1
 8005778:	d103      	bne.n	8005782 <_raise_r+0x42>
 800577a:	2316      	movs	r3, #22
 800577c:	6003      	str	r3, [r0, #0]
 800577e:	2001      	movs	r0, #1
 8005780:	e7e7      	b.n	8005752 <_raise_r+0x12>
 8005782:	2400      	movs	r4, #0
 8005784:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005788:	4628      	mov	r0, r5
 800578a:	4798      	blx	r3
 800578c:	2000      	movs	r0, #0
 800578e:	e7e0      	b.n	8005752 <_raise_r+0x12>

08005790 <raise>:
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <raise+0xc>)
 8005792:	4601      	mov	r1, r0
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	f7ff bfd3 	b.w	8005740 <_raise_r>
 800579a:	bf00      	nop
 800579c:	24000018 	.word	0x24000018

080057a0 <_kill_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d07      	ldr	r5, [pc, #28]	; (80057c0 <_kill_r+0x20>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	f7fb f9a9 	bl	8000b04 <_kill>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d102      	bne.n	80057bc <_kill_r+0x1c>
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	b103      	cbz	r3, 80057bc <_kill_r+0x1c>
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	bf00      	nop
 80057c0:	24004b28 	.word	0x24004b28

080057c4 <_getpid_r>:
 80057c4:	f7fb b996 	b.w	8000af4 <_getpid>

080057c8 <__malloc_lock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__malloc_lock+0x8>)
 80057ca:	f7ff be3f 	b.w	800544c <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	24004b1c 	.word	0x24004b1c

080057d4 <__malloc_unlock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	; (80057dc <__malloc_unlock+0x8>)
 80057d6:	f7ff be3a 	b.w	800544e <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	24004b1c 	.word	0x24004b1c

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr
